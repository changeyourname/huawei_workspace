/*
 * tlm_wrapper_bridge.cpp
 *
 *  Created on: Sep 30, 2015
 *      Author: uzair
 */


#include "tlm_wrapper_bridge.hpp"
#include <stdio.h>

//#define DO_LOGGING

tlm_wrapper_bridge::tlm_wrapper_bridge(sc_core::sc_module_name name)
		: sc_module(name), m_isocket("m_isocket"), m_tsocket("m_tsocket"), m_req_no(0)	{
	m_tsocket.register_b_transport(this, &tlm_wrapper_bridge::b_transport);
}


void tlm_wrapper_bridge::b_transport(tlm::tlm_generic_payload &payload, sc_core::sc_time &delay) {
#ifdef DO_LOGGING
	printf("Got a new memory transaction!!\r\n");
	printf("Addr = 0x%x, command = %d, data_length = %d\r\n", payload.get_address(), payload.get_command(), payload.get_data_length());
#endif
	m_req_no++;
	//printf("WRAPPER: req_no:%d, payload_ptr:0x%x, addr:0x%x, command:%d, length:%d, data_ptr:0x%x\r\n", m_req_no, &payload, payload.get_address(), payload.get_command(), payload.get_data_length(), payload.get_data_ptr());

	// forwarding to main memory module via the initiator socket
	m_isocket->b_transport(payload, delay);



    sc_dt::uint64    address   = payload.get_address();     // memory address
    tlm::tlm_command command   = payload.get_command();     // memory command
    unsigned char    *data     = payload.get_data_ptr();    // data pointer
    unsigned  int     length   = payload.get_data_length(); // data length
	if (command == tlm::TLM_READ_COMMAND) {
		printf("WRAPPER_READ: ");
		printf("req_no:%d, ", m_req_no);
		printf("addr:0x%x, ", address);
		printf("command:%d, ", command);
		printf("length:%d, ", length);
		printf("resp_status:%d\r\n", 1);
		printf("data: ");
		for (int i=0; i<length-1; i++) {
			printf("0x%x | ", data[i]);
		}
		printf("0x%x\r\n-------------\r\n", data[length-1]);
	} else if (command == tlm::TLM_WRITE_COMMAND) {
		/*printf("WRAPPER_WRITE: ");
		printf("req_no:%d, ", m_req_no);
		printf("addr:0x%x, ", address);
		printf("command:%d, ", command);
		printf("length:%d, ", length);
		printf("resp_status:%d\r\n", 1);
		printf("data: ");
		for (int i=0; i<length-1; i++) {
			printf("0x%x | ", data[i]);
		}
		printf("0x%x\r\n", data[length-1]);*/
	}

	return;
}
