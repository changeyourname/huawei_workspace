/*
 * main.c
 *
 *  Created on: Oct 15, 2015
 *      Author: uzair
 */

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <sys/mman.h>
#include <time.h>



int main(int argc, char *argv[])
{
#if 0
    int i;
    int fd;
    int result;
    int *map;  /* mmapped array of int's */
    int r;
    /* Open a file for writing.
     *  - Creating the file if it doesn't exist.
     *  - Truncating it to 0 size if it already exists. (not really needed)
     *
     * Note: "O_WRONLY" mode is not sufficient when mmaping.
     */
    printf("Hello World \n");
    printf("Step 1 \n");
    fd = open("/dev/mem", O_RDWR);
    if (fd == -1) {
	perror("Error opening file for writing");
	exit(EXIT_FAILURE);
    }

    /* mmap graphics memory */
    if ((map = malloc(FILESIZE + (PAGE_SIZE-1))) == NULL) {
        printf("VGAlib: allocation error \n");
        exit (-1);
    }
    /* Now the file is ready to be mmapped.
     */
    map = mmap(0, FILESIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0x6F000000);
    if (map == MAP_FAILED) {
	close(fd);
	perror("Error mmapping the file");
	exit(EXIT_FAILURE);
    }
    srand(time(NULL));
    printf("Step 1 \n");
    while(1){
       r = rand() % (1024*4*64);
       //printf("Rand : %d\n",r);
       map[r] = r;
    }
    printf("memset succeed\n");
    return 0;
    perror("Step 4 \n");
    /* Now write int's to the file as if it were memory (an array of ints).
     */
    for (i = 1; i <=NUMINTS; ++i) {
	map[i] = i*i;
	if((i % 1024) == 0) printf("Writen %d \n",i/1024);
    }
    perror("Step 5 \n");
    for (i = 1; i <=NUMINTS; ++i) {
	if(map[i] !=  i*i) {
		printf("compare error %d %d \n",map[i] , i);
                getc(stdin);
	}
    }
    perror("Step 6 \n");
    /* Don't forget to free the mmapped memory
     */
    if (munmap(map, FILESIZE) == -1) {
	perror("Error un-mmapping the file");
	/* Decide here whether to close(fd) and exit() or not. Depends... */
    }
    perror("Step 7 \n");
    /* Un-mmaping doesn't close the file, so we still need to do that.
     */
    close(fd);
    printf("Step 8 \n");
    return 0;
#endif

    printf("uzleo\r\n");
    // making a virtual mapping
    int *map;

}

