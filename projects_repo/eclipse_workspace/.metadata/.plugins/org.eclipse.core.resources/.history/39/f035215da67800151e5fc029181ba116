/*
 * main.cpp
 *
 *  Created on: Oct 20, 2015
 *      Author: uzair
 */




#include <tlm>
#include <tlm_utils/simple_initiator_socket.h>
#include <stdio.h>
#include "cache.hpp"

class req_generator : public sc_core::sc_module {
public:
	tlm_utils::simple_initiator_socket<req_generator> m_isocket;

	SC_HAS_PROCESS(req_generator);
	req_generator(sc_core::sc_module_name name)
		:	m_isocket("m_isocket")
	{
		SC_THREAD(main);
	}

	void main() {
		while(1) {
			tlm::tlm_generic_payload trans;
			sc_core::sc_time delay = sc_core::SC_ZERO_TIME;
			trans.set_write();
			trans.set_address(0x03);
			trans.set_data_length(4);
			unsigned char *ptr = new unsigned char[4];
			*ptr = 0x1;	*(ptr+1) = 0x2; *(ptr+2) = 0x3; *(ptr+3) = 0x4;
			trans.set_data_ptr(ptr);
			m_isocket->b_transport(trans, delay);

			wait(10, sc_core::SC_NS);

			trans.set_read();
			trans.set_address(0x01);
			*ptr = 0; *(ptr+1) = 0; *(ptr+2) = 0; *(ptr+3) = 0;
			m_isocket->b_transport(tras, delay);

			printf("data[0]=0x%02x | ", *ptr);
			printf("data[1]=0x%02x | ", *(ptr+1));
			printf("data[2]=0x%02x | ", *(ptr+2));
			printf("data[3]=0x%02x\r\n", *(ptr+3));
		}
	}
};

int sc_main(int argc, char *argv[]) {
	req_generator m_req("m_req");
	cache m_cache("m_cache");

	m_req.m_isocket(m_cache.m_tsocket);

	sc_core::sc_start(100, sc_core::SC_NS);
	return 0;
}
