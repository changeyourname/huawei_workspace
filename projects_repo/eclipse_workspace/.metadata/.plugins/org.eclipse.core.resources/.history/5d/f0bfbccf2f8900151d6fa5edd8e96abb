/*
 * cache.hpp
 *
 *  Created on: Nov 11, 2015
 *      Author: uzleo
 */

#ifndef CACHE_HPP_
#define CACHE_HPP_

#include <tlm>
#include <tlm_utils/simple_initiator_socket.h>
#include <tlm_utils/simple_target_socket.h>
#include <stdint.h>

#define WORD_SIZE 4

class cache : public sc_core::sc_module {
private:
	uint32_t m_num_child;
	tlm::tlm_generic_payload m_trans;			// lt modeling so can afford a single m_trans for the whole object as there are no outstanding requests..this helps to improve performance as m_trans needs to be created only once for an object of this class

	void blkAddr_set_tag(const uint64_t req_addr, uint64_t &block_addr, uint32_t &set, uint64_t &tag);
	bool cache_lookup(const uint64_t req_addr, bool &evict_needed);
	void do_eviction(const uint64_t req_addr);
	uint32_t find_way_free(const uint32_t set);
	void send_request();
public:
	tlm_utils::simple_initiator_socket< cache > m_isocket;
	tlm_utils::simple_target_socket< cache > *m_tsocket;

	cache(sc_core::sc_module_name name, uint32_t num_child);
	void b_transport(tlm::tlm_generic_payload &trans, sc_core::sc_time &delay);
};



#endif /* CACHE_HPP_ */
