/*
 * Copyright (c) 2005-2015 Imperas Software Ltd., www.imperas.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include "ovpworld.org/modelSupport/tlmProcessor/1.0/tlm2.0/tlmProcessor.hpp"
#include "ovpworld.org/modelSupport/tlmPlatform/1.0/tlm2.0/tlmPlatform.hpp"
#include "ovpworld.org/modelSupport/tlmDummySlavePort/1.0/tlm2.0/tlmDummySlavePort.hpp"
#include "ovpworld.org/modelSupport/tlmInitiatorExtension/1.0/tlm2.0/tlmInitiatorExtension.hpp"

#define CONCAT2(s1,s2) ((string) s1 + "_" + (string) s2).c_str()

//
// Local utility
//
static void printBytes(Uns8 *ptr, Uns32 bytes) {
    icmPrintf("{");
    Uns32 i;
    for(i = 0; i < bytes; i++, ptr++) {
        if(i == 0) {
            icmPrintf("%02x", *ptr);
        } else {
            icmPrintf(",%02x", *ptr);
        }
    }
    icmPrintf("}");
}

//
////////////////////////// Interrupt input //////////////////////////////////////
//
icmCpuInterrupt::icmCpuInterrupt(const char *name, icmCpu *cpu)
: m_net(CONCAT2(cpu->name(), name))
, m_cpu(cpu)
, m_name(strdup(name))
{
    // connect net to netport. Writing to the net will send an input into the model.
    ((icmProcessorObject *)cpu)->icmCpuManager::icmProcessorObject::connect(m_net, (const char*)name, ICM_INPUT);
}

// write

void icmCpuInterrupt::write(const int &value)
{
    if (m_cpu->traceSignals()) {
    	icmPrintf("TLM: %s.%s = %d\n", m_cpu->name(), m_name, value);
    }
    m_net.write(value);
}

//
////////////////////////////// Output net port ////////////////////////////////
//

icmCpuOutputNetPort::icmCpuOutputNetPort(const char *name, icmCpu *cpu)
: m_net(CONCAT2(cpu->name(), name))
, m_cpu(cpu)
, m_name(name)
{
    ((icmProcessorObject *)cpu)->icmCpuManager::icmProcessorObject::connect(m_net, name, ICM_OUTPUT);
    m_net.addCallback(icmCpuOutputNetPort::update, this);
}

void icmCpuOutputNetPort::update(void *user, Uns32 value)
{
    icmCpuOutputNetPort *thisPtr = (icmCpuOutputNetPort*)user;
    int t = value;
    if (thisPtr->m_cpu->traceSignals()) {
    	icmPrintf("TLM: %s.%s = %d\n", thisPtr->m_cpu->name(), thisPtr->m_name, value);
    }
    thisPtr->write(t); // SystemC net write
}


//
//////////////////////////////// MASTER PORT //////////////////////////////////
//
#define CASE_STRING(_n)   case tlm::_n : s = # _n;          break;

const char *icmCpuMasterPort::response() {
    const char *s = "???";
    switch (m_trans.get_response_status()) {
        CASE_STRING(TLM_OK_RESPONSE);
        CASE_STRING(TLM_INCOMPLETE_RESPONSE);
        CASE_STRING(TLM_GENERIC_ERROR_RESPONSE);
        CASE_STRING(TLM_ADDRESS_ERROR_RESPONSE);
        CASE_STRING(TLM_COMMAND_ERROR_RESPONSE);
        CASE_STRING(TLM_BURST_ERROR_RESPONSE);
        CASE_STRING(TLM_BYTE_ENABLE_ERROR_RESPONSE);
    }
    return s;
}

icmCpuMasterPort::icmCpuMasterPort(icmCpu *cpu, const char *name, Uns32 addrBits, Uns32 num_smp_cores)
    : m_addrBits(addrBits)
    , m_name      (strdup(CONCAT2(cpu->name(), name)))
    , m_bus       (CONCAT2(m_name, "m_bus"      ), m_addrBits)
    , m_zero_delay(SC_ZERO_TIME)
    , m_cpu       (cpu)
    , m_maxBytes  (8)
	, m_num_smp_cores (num_smp_cores)
{
    m_initiator = new icmInitiatorExtension();
    m_trans.set_extension(m_initiator);

    m_isocket.reserve(m_num_smp_cores);

    for (int i=0; i<m_num_smp_cores; i++) {
    	char socket_name[20];
    	sprintf(socket_name, "m_isocket[%d]", i);
    	m_isocket[i] = new tlm_utils::simple_initiator_socket_tagged<icmCpuMasterPort>(socket_name);
        // let target call back to invalidate DMI
        m_isocket[i]->register_invalidate_direct_mem_ptr(this, &icmCpuMasterPort::invalidate_direct_mem_ptr);
    }


    cbTryDMI = new icmMemCallback(
         (icmMemCallback::readCallback)&icmCpuMasterPort::readTryDMI,
         (icmMemCallback::writeCallback)&icmCpuMasterPort::writeTryDMI,
         (void*)this // this master port
    );

    cbNoDMI = new icmMemCallback(
         (icmMemCallback::readCallback)&icmCpuMasterPort::readNoDMI,
         (icmMemCallback::writeCallback)&icmCpuMasterPort::writeNoDMI,
         (void*)this // this master port
    );

    cbRdDMI = new icmMemCallback(
         0,
         (icmMemCallback::writeCallback)&icmCpuMasterPort::writeNoDMI,
         (void*)this // this master port
    );

    cbWrDMI = new icmMemCallback(
         (icmMemCallback::readCallback)&icmCpuMasterPort::readNoDMI,
         0,
         (void*)this // this master port
    );

    cbRWDMI = new icmMemCallback(
         0,
         0,
         (void*)this // this master port
    );
    m_bus.mapExternalNativeMemory("DMI", 0, ICM_PRIV_RWX, 0, maxValue(m_addrBits), cbTryDMI);

    ((icmProcessorObject *)cpu)->icmCpuManager::icmProcessorObject::connect(name, m_bus);
}

//
// Static read callback that will try DMI
//
void icmCpuMasterPort::readTryDMI(
      Addr          address,
      Uns32         bytes,
      void         *value,
      void         *userData,
      void         *processor
) {
    icmCpuMasterPort *classPtr = (icmCpuMasterPort*)userData;
    bool              first    = true;
    unsigned char    *p        = (unsigned char *)value;
    while (bytes) {
        Uns32 readBytes = (bytes > classPtr->m_maxBytes) ? classPtr->m_maxBytes : bytes;
        classPtr->readUpcall(address, p, readBytes, processor, first, true);
        p       += readBytes;
        address += readBytes;
        bytes   -= readBytes;
    }
}

//
// Static write callback that will try DMI
//
void icmCpuMasterPort::writeTryDMI(
      Addr          address,
      Uns32         bytes,
      const void   *value,
      void         *userData,
      void         *processor
) {
    icmCpuMasterPort *classPtr = (icmCpuMasterPort*)userData;
    bool              first    = true;
    unsigned char     *p       = (unsigned char *)value;
    while (bytes) {
        Uns32 wrBytes = (bytes > classPtr->m_maxBytes) ? classPtr->m_maxBytes : bytes;
        classPtr->writeUpcall(address, p, wrBytes, processor, first, true);
        p       += wrBytes;
        address += wrBytes;
        bytes   -= wrBytes;
    }
}

//
// Static read callback that will NOT try DMI. This replaces the TryDMI version
// after a DMI failure
//
void icmCpuMasterPort::readNoDMI(
      Addr          address,
      Uns32         bytes,
      void         *value,
      void         *userData,
      void         *processor
) {
    icmCpuMasterPort *classPtr = (icmCpuMasterPort*)userData;
    bool              first    = true;
    unsigned char    *p        = (unsigned char *)value;
    while (bytes) {
        Uns32 readBytes = (bytes > classPtr->m_maxBytes) ? classPtr->m_maxBytes : bytes;
        classPtr->readUpcall(address, p, readBytes, processor, first, false);
        p       += readBytes;
        address += readBytes;
        bytes   -= readBytes;
    }
}

//
// Static write callback that will NOT try DMI. This replaces the TryDMI version
// after a DMI failure
//
void icmCpuMasterPort::writeNoDMI(
      Addr          address,
      Uns32         bytes,
      const void   *value,
      void         *userData,
      void         *processor
) {
    icmCpuMasterPort *classPtr = (icmCpuMasterPort*)userData;
    bool              first    = true;
    unsigned char     *p       = (unsigned char *)value;
    while (bytes) {
        Uns32 wrBytes = (bytes > classPtr->m_maxBytes) ? classPtr->m_maxBytes : bytes;
        classPtr->writeUpcall(address, p, wrBytes, processor, first, false);
        p       += wrBytes;
        address += wrBytes;
        bytes   -= wrBytes;
    }
}


// try for dmi
void icmCpuMasterPort::tryDmi(Addr addr, Bool read) {

    tlm::tlm_dmi tmpr;
    tlm::tlm_dmi tmpw;

    if(m_cpu->traceBuses()) {
        icmPrintf( "TLM: %s DMI REQUEST [" FMT_Ax "]\n",m_name, addr);
    }
    bool ok, rok, wok;
    m_trans.set_address( addr );
    m_trans.set_read();
    //ok   = socket->get_direct_mem_ptr(m_trans, tmpr);
    ok = (*m_isocket[0])->get_direct_mem_ptr(m_trans, tmpr);
    rok  = ok && tmpr.is_read_allowed();

    m_trans.set_address( addr );
    m_trans.set_write();
    ok  = socket->get_direct_mem_ptr(m_trans, tmpw);
    wok = ok && tmpw.is_write_allowed();

    Addr  lor  = tmpr.get_start_address();
    Addr  hir  = tmpr.get_end_address();
    Addr  low  = tmpw.get_start_address();
    Addr  hiw  = tmpw.get_end_address();

    if(lor!=low || hir!=hiw) {
        icmPrintf(
            "TLM: %s DMI read [" FMT_Ax "-" FMT_Ax "] != write [" FMT_Ax "-" FMT_Ax "]\n",
            m_name, lor, hir, low, hiw
        );
        // invalidate the largest range. Not sure what else we could do.
        if(low < lor) lor = low;
        if(hiw < hir) hir = hiw;
        rok = wok = false;
    }

    void           *ptr = 0;
    icmMemCallback *cb;
    bool            enableDMI = rok || wok;

    if(rok && wok) {
        cb = cbRWDMI;
    } else if (rok) {
        cb = cbRdDMI;
    } else if (wok) {
        cb = cbWrDMI;
    } else {
        cb = cbNoDMI;
    }

    if(enableDMI) {
        ptr = tmpr.get_dmi_ptr();
    }

    m_bus.mapExternalNativeMemory("DMI", ptr, ICM_PRIV_RWX, lor, hir, cb);

    if(!m_cpu->traceBuses()) {

        // no action

    } else if(enableDMI) {

        const char *access;

        if(rok && wok) {
            access = "RWX";
        } else if(rok) {
            access = "RX";
        } else {
            access = "W";
        }

        icmPrintf(
            "TLM: %s DMI ENABLED [" FMT_Ax "-" FMT_Ax "] %s\n",
            m_name, lor, hir, access
        );

    } else {

        icmPrintf( "TLM: %s DMI DENIED [" FMT_Ax "-" FMT_Ax "]\n", m_name, lor, hir);
    }
}

//! This is the entry point used by ::staticReadUpcall(). Constructs a
//! Generic transactional payload for the read, then passes it to the target.

//! @param addr      The address for the write
//! @param value     Pointer to data
//! @param bytes     Bytes for this transaction
//! @param processor If non-zero, this access should be simulated, if not it should be a back-door access

void icmCpuMasterPort::readUpcall(Addr addr, unsigned char *p, Uns32 bytes, void *processor, bool &first, bool tryDMI)
{
    Bool ok = True;

    // set initiator for this transaction
    m_initiator->m_initiator = processor;

    m_trans.set_read();
    m_trans.set_address( addr );
    m_trans.set_data_length(bytes);
    m_trans.set_data_ptr(p);
    m_trans.set_streaming_width(bytes);
    m_trans.set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);
    m_trans.set_dmi_allowed(false);

    if(m_cpu->traceBuses()) {
        const char *type = processor ? "sim" : "dbg";
    	icmPrintf("TLM: %s %s read %d bytes [" FMT_Ax "]\n", m_name, type, bytes, addr);
    }

    if (processor) {

        // This is the call to make the transaction
        //socket->b_transport( m_trans, m_zero_delay );
    	(*m_isocket[0])->b_transport(m_trans, m_zero_delay);
        // Now the transaction has been made

        if (m_trans.get_response_status() == tlm::TLM_OK_RESPONSE) {
            if (tryDMI && first && m_cpu->dmi() && m_trans.is_dmi_allowed()) {
                m_trans.set_read();
                tryDmi(addr, true);
                first = false;
            }
        } else {
            // Notify simulator that the access failed
            icmAbortRead((icmProcessorP)processor, addr);
            ok = False;
        }

    } else {
        // This is the call to make the debug transaction
        //Uns32 actual = socket->transport_dbg(m_trans);
    	Uns32 actual = (*m_isocket[0])->transport_dbg(m_trans);
        // The debug transaction has been made

        if (actual == bytes) {
            // Try DMI in DBG transaction as well as transport
            if (tryDMI && first && m_cpu->dmi() && m_trans.is_dmi_allowed()) {
                m_trans.set_read();
                tryDmi(addr, false);
                first = false;
            }
        } else {
            ok = False;
            icmAbortRead(0, addr);
        }
    }

    if (p != m_trans.get_data_ptr()) {

        if (!m_warn_data_ptr) {
            icmPrintf(
                "%s has detected that the data pointer in the TLM transaction object was modified by a target. This is illegal.\n",
                m_cpu->name()
            );
            m_warn_data_ptr = True;
        }

        // pointer was wrong, so copy data to where we are expecting it to end up
        //memcpy(p, m_trans.get_data_ptr(), m_trans.get_data_length());
    }

    if(m_cpu->traceBuses() || (m_cpu->traceBusErrors() && !ok)) {
        icmPrintf("TLM: %s %s [" FMT_Ax "] ", m_name, response(), addr);
        if(ok) {
            printBytes(p, bytes);
        }
        icmPrintf("\n");
    }
}


// This is the entry point used by icmCpu::write.
//  Constructs a generic transactional payload for the write, then passes the target.

//! @param addr      The address for the write
//! @param value     Pointer to data
//! @param bytes     Bytes for this transaction
//! @param processor If non-zero, this access should be simulated, if not it should be a back-door access

void icmCpuMasterPort::writeUpcall(Addr addr, const unsigned char *p, Uns32 bytes, void *processor, bool &first, bool tryDMI)
{
    // set initiator for this transaction
    m_initiator->m_initiator = processor;

    m_trans.set_write();
    m_trans.set_address( addr );
    m_trans.set_data_length(bytes);
    m_trans.set_data_ptr((unsigned char*)p);
    m_trans.set_streaming_width(bytes);
    m_trans.set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);
    m_trans.set_dmi_allowed(false);

    if(m_cpu->traceBuses()) {
        const char *type = processor ? "sim" : "dbg";
    	icmPrintf("TLM: %s %s write %d bytes [" FMT_Ax "] ", m_name, type, bytes, addr);
    	printBytes((Uns8*)p, bytes);
        icmPrintf("\n");
    }
    if (processor) {
        // Call the transport method
        //socket->b_transport( m_trans, m_zero_delay );
    	(*m_isocket[0])->b_transport(m_trans, m_zero_delay);
        // Transport done
        if (m_trans.get_response_status() == tlm::TLM_OK_RESPONSE) {
            if (tryDMI && first && m_cpu->dmi() && m_trans.is_dmi_allowed()) {
                m_trans.set_write();
                tryDmi(addr, false);
                first = false;
            }
        } else {
            // Notify simulator that the access failed
            icmAbortWrite((icmProcessorP)processor, addr);
        }
        if(m_cpu->traceBuses() || (m_cpu->traceBusErrors() && m_trans.get_response_status() != tlm::TLM_OK_RESPONSE)) {
            icmPrintf("TLM: %s %s\n", m_name, response());
        }
    } else {
        // Call the debug method
        //Uns32 actual = socket->transport_dbg(m_trans);
    	Uns32 actual = (*m_isocket[0])->transport_dbg(m_trans);
        // debug done
        if (actual == bytes) {
            if (tryDMI && first && m_cpu->dmi() && m_trans.is_dmi_allowed()) {
                tryDmi(addr, false);
                first = false;
            }
            if(m_cpu->traceBuses()) {
                icmPrintf( "TLM: %s dbg complete\n", m_name);
            }
        } else {
            icmAbortWrite(0, addr);
            if(m_cpu->traceBuses() || m_cpu->traceBusErrors()) {
                icmPrintf( "TLM: %s dbg failed (expected:%u wrote:%u)\n", m_name, bytes, actual);
            }
        }
    }
    if (p != m_trans.get_data_ptr() && !m_warn_data_ptr) {
        icmPrintf(
            "%s has detected that the data pointer in the TLM transaction object was modified by a target. This is illegal.\n",
            m_name
        );
        m_warn_data_ptr = True;
    }
}


// This region will be local memory in OVP
void icmCpuMasterPort::mapLocalMemory(Addr low, Addr high, icmBusObject* &localBus) {
    if(localBus == 0) {
        localBus = new icmBusObject("localMemoryBus", m_addrBits);

        // create entire memory space
        Addr bytesM1 = maxValue(m_addrBits);
        localBus->mapLocalMemory("localMemory" , ICM_PRIV_RWX, 0, bytesM1);
    }

    // map this region
    m_bus.bridge(*localBus, low, high, low);
}

// This region will be native memory
void icmCpuMasterPort::mapNativeMemory(unsigned char *ptr, Addr low, Addr high, icmPriv priv) {
    m_bus.mapNativeMemory(ptr, priv, low, high);
}

void icmCpuMasterPort::unmapNativeMemory(Addr low, Addr high) {
    m_bus.mapExternalNativeMemory("DMI", 0, ICM_PRIV_RWX, low, high, cbTryDMI);
}

void icmCpuMasterPort::invalidate_direct_mem_ptr(sc_dt::uint64 start_range, sc_dt::uint64 end_range) {
    unmapNativeMemory(start_range, end_range);
    if(m_cpu->traceBuses()) {
        icmPrintf( "TLM: %s DMI invalidate [" FMT_Ax "-" FMT_Ax "]\n", m_name, (Addr)start_range, (Addr)end_range);
    }
}

//
// Use this when there is no default master port
//
void icmCpuMasterPort::bindIfNotBound() {
    /*if (socket.size() == 0) {
        icmDummySlavePort *dummy=new icmDummySlavePort();
        socket(dummy->socket);
    }*/

	for (int i=0; i<m_num_cmp_cores; i++) {
		if (m_isocket[i]->size() == 0) {
			icmDummySlavePort *dummy = new icmDummySlavePort();
			(*m_isocket[i])(dummy->socket);
		}
	}
}

//
// Use this when there is a default master port (and it works)
//
void icmCpuMasterPort::bindIfNotBound(icmCpuMasterPort *dflt) {
    if (socket.size() == 0) {
        icmDummySlavePort *dummy=new icmDummySlavePort();
        socket(dummy->socket);
        m_dflt = dflt;
    }
}

//
// Invalidate the whole DMI region
//
void icmCpuMasterPort::invalidateDMI(void) {
    unmapNativeMemory(0,  maxValue(m_addrBits));
}

//
//////////////////////////////////// PROCESSOR ////////////////////////////////
//

SC_HAS_PROCESS(icmCpu);

icmCpu::icmCpu(
      sc_module_name          name
    , const unsigned int      ID
    , const char             *type
    , const char             *model
    , const char             *attrTable
    , const char             *semihostLibrary
    , icmNewProcAttrs         procAttrs
    , icmAttrListObject      *initialAttrs
    , Uns32                   addressBits
    , bool                    dmi
    , Uns32                   cpuFlags
)
: sc_module (name)          // instance name
, icmProcessorObject(
    sc_object::name(),      // hierarchical name
    type,
    ID,
    cpuFlags,
    addressBits,
    model,
    attrTable,
    procAttrs | ICM_ATTR_SYSTEMC,
    initialAttrs,
    semihostLibrary,
    0
  )
    , m_instPerSecond    (100000000)                     // 100MHz
    , m_traceQuanta      (false)
    , m_traceBuses       (false)
    , m_traceBusErrors   (false)
    , m_traceSignals     (false)
    , m_name             (name)
    , m_dmi              (dmi)
    , m_localBus         (0)
{
    SC_THREAD(icmCpuThread);

    // note that OVPsim PSEs are run on the first thread to be run.
    set_stack_size(0x50000);
    if (getenv("IMPERAS_TLM_CPU_TRACE")) {
        icmPrintf( "TLM: %s Tracing ON (addresses [] and data {} in Hexadecimal)\n", m_name);;
        m_traceQuanta     = true;
        m_traceBuses      = true;
        m_traceBusErrors  = true;
        m_traceSignals    = true;
    }
}

//
// Note: to be consistent with the OVP scheduler, this thread should be:
//
//  while(!finished) {
//    wait();
//    simulate();
//  }
//
// rather than the other way round, as it is now. The effect would be that
// querying the time during the simulate() returns end-of-quantum time
// not the start-of-quantum time as happens now.
// Unfortunately we can't do this because if the SystemC kernel is asked to simulate
// exactly one quantum, no instructions are executed;
// the simulator quits before the wait() returns.
//
#if 1
void icmCpu::icmCpuThread (void)
{
    icmTLMPlatform *platform = icmTLMPlatform::Instance();

    wait(sc_core::SC_ZERO_TIME);  // initial wait

    while(!m_finished) {
        sc_time quantum  = platform->quantum();
        Uns64   instToDo = (Uns64)(quantum.to_seconds() * m_instPerSecond);
        if (m_traceQuanta) {
            icmPrintf("TLM: %s running " FMT_64d " instructions\n", m_name, instToDo);
        }
        icmStopReason r = simulate(instToDo);
        switch(r) {
            case ICM_SR_HALT:
            case ICM_SR_SCHED:
            case ICM_SR_YIELD:
            case ICM_SR_FREEZE:
                // restart on a halt
                break;

            case ICM_SR_FINISH:
                m_finished = 1; // signal 'done' to other cpus.
                // fall through
            default:
                return;
        }
        wait(quantum);
    }
}

#else

// This variation of the processor thread tries to finish the simulation after the
// correct number of instructions. It demonstrates that time sync from systemC to
// OVP is incorrect. The SystemC Kernel is late calling the time advance function.
// Don't know why or how to fix it.

#define MIN(a,b) ((a)<(b) ? (a) : (b))

void icmCpu::icmCpuThread (void)
{
    icmTLMPlatform *platform = icmTLMPlatform::Instance();
    while(!m_finished) {
        double stop     = icmGetStopTime();
        double now      = icmGetCurrentTime();
        double remain   = stop - now;
        if(remain <= 0.0) {
            m_finished = 1;
            break;
        }
        double quantum  = platform->quantum().to_seconds();
        double run      = MIN(remain, quantum);

        Uns64   instToDo = (Uns64)(run * m_instPerSecond);
        if (m_traceQuanta) {m_trans
            icmPrintf("TLM: %s running " FMT_64d " instructions\n", m_name, instToDo);
        }
        icmStopReason r = simulate(instToDo);
        switch(r) {
            case ICM_SR_FINISH:
                m_finished = 1; // signal 'done' to other cpus.
                // fall through
            case ICM_SR_EXIT:
                return;
            case ICM_SR_HALT:
                // restart on a halt
            default:
                break;
        }
        sc_time runt = sc_time(run, SC_SEC);
        wait(runt);
    }
}

#endif

void icmCpu::connectInterrupt(icmCpuInterrupt **intr, const char *name) {

    *intr = new icmCpuInterrupt(name, this);
}

bool icmCpu::m_finished  = 0;

