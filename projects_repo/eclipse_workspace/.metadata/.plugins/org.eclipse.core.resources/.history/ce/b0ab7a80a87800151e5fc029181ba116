/*
 * main.cpp
 *
 *  Created on: Oct 20, 2015
 *      Author: uzair
 */




#include <tlm>
#include <tlm_utils/simple_initiator_socket.h>
#include <stdio.h>
#include "cache.hpp"

class req_generator : public sc_core::sc_module {
public:
	tlm_utils::simple_initiator_socket<req_generator> m_isocket;

	SC_HAS_PROCESS(req_generator);
	req_generator(sc_core::sc_module_name name)
		:	m_isocket("m_isocket")
	{
		SC_THREAD(main);
	}

	void main() {
		while(1) {
			tlm::tlm_generic_payload trans;
			trans.set_address(rand()%40);
			trans.set_data_length(4);
			unsigned char *ptr = new ptr[4];
			if (rand()%2) {
				trans.set_read();
			} else {
				trans.set_write();
				for (int i=0; i<3; i++) {
					*(ptr+i) = rand();
				}
			}
			trans.set_data_ptr(ptr);
			sc_core::sc_time delay = sc_core::SC_ZERO_TIME;

			m_isocket->b_transport(trans, delay);
		}
	}
};

int sc_main(int argc, char *argv[]) {
	req_generator m_req("m_req");
	cache m_cache("m_cache");

	m_req.m_isocket(m_cache.m_tsocket);

	sc_core::sc_start(100, sc_core::SC_NS);
	return 0;
}
