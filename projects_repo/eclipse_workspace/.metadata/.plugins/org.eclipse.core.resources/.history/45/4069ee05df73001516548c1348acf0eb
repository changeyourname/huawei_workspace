/*
 * main.c
 *
 *  Created on: Oct 15, 2015
 *      Author: uzair
 */

#define _GNU_SOURCE

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <sys/mman.h>
#include <time.h>
#include <sched.h>


#define NUMINTS  (1024*4*64)
#define FILESIZE (NUMINTS * sizeof(int))
#define PAGE_SIZE 4096


int main(int argc, char *argv[])
{
	cpu_set_t mask;
	CPU_ZERO(&mask);
	CPU_SET(2, &mask);
	if (sched_setaffinity(0, sizeof(mask), &mask) < 0) {
		printf("ERROR in setting cpu affinity\r\n");
		exit(-1);
	}


    // making a virtual mapping of /dev/mem to this process address space
    int *mem_map;
    int mem_fd = open("/dev/mem", O_RDWR);
    if (mem_fd == -1) {
    	perror("Error opening file for writing");
    	exit(EXIT_FAILURE);
    }

    if ((mem_map = malloc(FILESIZE + (PAGE_SIZE-1))) == NULL) {
    	printf("mem allocation error\r\n");
    	exit(-1);
    }

    mem_map = mmap(0, FILESIZE, PROT_READ | PROT_WRITE, MAP_SHARED, mem_fd, 0x70000000);
    if (mem_map == MAP_FAILED) {
    	close(mem_fd);
    	perror("Error mmapping the file");
    	exit(EXIT_FAILURE);
    }

    for (int i=0; i<10; i++) {
    	mem_map[i] = i*i;
    }

    for (int i=0; i<10; i++) {
    	printf("val:%d\r\n", mem_map[i]);
    }


    if (munmap(mem_map, FILESIZE) == -1) {
    	perror("Error unmapping the file");
    }
    close(mem_fd);

    return 0;

}






