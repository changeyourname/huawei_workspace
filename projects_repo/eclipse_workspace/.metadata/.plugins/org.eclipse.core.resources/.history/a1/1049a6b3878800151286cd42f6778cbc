/*
 * main.c
 *
 *  Created on: Oct 27, 2015
 *      Author: uzair
 */

#define _GNU_SOURCE

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <sys/mman.h>
#include <time.h>
#include <sched.h>


#define PAGE_SIZE 4096

#define USER_MEM_BASE 0x70000000


int main(int argc, char *argv[])
{
	int global_smp_cpu_mem_baseaddr[4] = {USER_MEM_BASE, USER_MEM_BASE+0x2000, USER_MEM_BASE+0x4000, USER_MEM_BASE+0x6000};
	int smp_cpu;
	// getting the cpu affinity from the user
	if (argc < 2) {
		perror("proc affinity not provided");
		exit(-1);
	} else {
		smp_cpu = atoi(argv[1]);
	}
	printf("got smp_cpu:%d\r\n", smp_cpu);

    // setting this process to only run on passed smp-cpu
	cpu_set_t mask;
	CPU_ZERO(&mask);
	CPU_SET(smp_cpu, &mask);
	if (sched_setaffinity(0, sizeof(mask), &mask) < 0) {
		printf("ERROR in setting cpu affinity\r\n");
		exit(-1);
	}


#if 0
    // making a virtual mapping of /dev/mem to this process address space
    int *mem_map;
    int mem_fd = open("/dev/mem", O_RDWR);
    if (mem_fd == -1) {
    	perror("Error opening file for writing");
    	exit(EXIT_FAILURE);
    }

    if ((mem_map = malloc(FILESIZE + (PAGE_SIZE-1))) == NULL) {
    	printf("mem allocation error\r\n");
    	exit(-1);
    }

    // making a mapping from physical memory to this process address space for 1024 bytes only
    mem_map = mmap(0, 1024, PROT_READ | PROT_WRITE, MAP_SHARED, mem_fd, global_smp_cpu_mem_baseaddr[smp_cpu]);
    if (mem_map == MAP_FAILED) {
    	close(mem_fd);
    	perror("Error mmapping the file");
    	exit(EXIT_FAILURE);
    }

	/*clock_t begin, end;
	double time_spent;
    // writing randomly within this smp-cpu allocated memory space
    while(1) {
    	begin = clock();
    	for (int i=0; i<100000; i++) {
    		mem_map[rand()%1024] = 0x98765432;
    	}
    	end = clock();
    	time_spent = (double) (end-begin)/CLOCKS_PER_SEC;

    	printf("(SMP%d) ", smp_cpu);
		printf("time_spent for task:%.8f\r\n", time_spent);
    }*/

    for (int i=0; i<8; i++) {
    	mem_map[i] = i;
    }


    if (munmap(mem_map, FILESIZE) == -1) {
    	perror("Error unmapping the file");
    }
    close(mem_fd);
#endif


    int mem_fd = open("/dev/mem", O_RDWR);
    if (mem_fd == -1) {
    	perror("Error opening file for writing");
    	exit(EXIT_FAILURE);
    }

    int *mem_map = malloc(PAGE_SIZE);				// dynamic array in C
    if (mem_map == NULL) {
    	printf("mem allocation error\r\n");
    	exit(-1);
    }

    mem_map = mmap(0, PAGE_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, mem_fd, 0x70000000);
    if (mem_map == MAP_FAILED) {
    	close(mem_fd);
    	perror("Error mmapping the file");
    	exit(EXIT_FAILURE);
    }

    mem_map[0] = 0x12345678;

    if (munmap(mem_map, PAGE_SIZE) == -1) {
    	perror("Error unmapping the file");
    }
    close(mem_fd);

    return 0;

}



