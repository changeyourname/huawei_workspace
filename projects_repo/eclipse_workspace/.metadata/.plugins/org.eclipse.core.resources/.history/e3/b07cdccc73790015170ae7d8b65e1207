/*
 * cache_controller.hpp
 *
 *  Created on: Oct 13, 2015
 *      Author: uzair
 */

#ifndef CACHE_CONTROLLER_HPP_
#define CACHE_CONTROLLER_HPP_


#include <tlm>
#include <tlm_utils/simple_target_socket.h>
#include <tlm_utils/simple_initiator_socket.h>
#include "modelSupport/tlmProcessor/1.0/tlm2.0/tlmProcessor.hpp"
#include "cache.hpp"

class cache_controller : public sc_core::sc_module {
public:
	//TODO: use a multipassthroughsocket for target interface
	std::vector< tlm_utils::simple_target_socket_tagged<cache_controller> * > m_tsocket;
	tlm_utils::simple_initiator_socket<cache_controller> m_Ibus_isocket;
	tlm_utils::simple_initiator_socket<cache_controller> m_Dbus_isocket;

	cache_controller(sc_core::sc_module_name name, int num_smp_cores, icmCpu *cpu);

private:
	int m_num_smp_cores;
	bool m_dmi_mode;
	bool m_do_dmi;
	tlm::tlm_dmi m_dmi_data;
	int m_req_count;			// for debugging
	bool m_debug;
	icmCpu *m_cpu;
	cache *m_icaches;
	cache *m_dcaches;

	void b_transport(int SocektId, tlm::tlm_generic_payload &payload, sc_core::sc_time &delay);
	unsigned int transport_dbg(int SocketId, tlm::tlm_generic_payload &payload);
	void invalidate_direct_mem_ptr(sc_dt::uint64 start_range,  sc_dt::uint64 end_range);
	bool get_direct_mem_ptr(int SocketId, tlm::tlm_generic_payload &payload, tlm::tlm_dmi &dmi_data);
	bool set_dmi_mode(bool dmi_enable);
	bool get_dmi_mode();
};






//NOTES:

// right now no support for GIC Register interface

// for this specific platform we know that both Instruction-Access and Data-Access use the same memory so we are going to use same DMI
// infrastructure for both of them i.e no separate handling for DMI for either of them





#endif /* CACHE_CONTROLLER_HPP_ */






















