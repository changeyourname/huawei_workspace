###############################################################################
#                           CHANGELOG.OVP.txt                                 #
#      Copyright (c) 2005-2015 Imperas Software Ltd., www.imperas.com         #
#               Covered under your Software License Agreement                 #
###############################################################################
    Date : 20150825                        Version : 20150901.0
###############################################################################

Platform command line parser
-------------------------------------------------------------------------------
- A new data type 'uns32' has been added.

Simple BareMetal Demonstrations
-------------------------------------------------------------------------------
- The simple Baremetal demonstration platforms provided by OVP have been 
  replaced by the use of the Imperas Instruction Set Simulator (ISS) virtual 
  platform. The Imperas ISS allows the definition of the processor type, the 
  number of processors and any shared memory region to allow simple cross 
  compiled applications to be executed quickly and efficiently on the specified
  processor  
- The basic demos provided as Imperas/Demo/OVPsim_* have been removed in place 
  of the Processor Demos Imperas/Demo/Processors

TLM2.0 Demonstrations
-------------------------------------------------------------------------------
- The TLM2.0 demos have moved down one directory into one named SystemC_TLM
  with naming changed to remove reference to OVPsim (this was a reference to
  one of the available simulators that could be used)

ARC Processor Model
-------------------------------------------------------------------------------
- The model now supports save/restore.
- A bug has been fixed which allowed the bottom bit of the branch target address
  auxiliary register to be writable when a branch-and-link with delay slot to
  register address was executed. This bit should always be zero.
- A bug has been fixed which caused reads of some unimplemented BCR auxiliary
  registers to take an exception.
- Boolean parameter opt-reset-internal-ccms has been added; when True, model
  CCMs will be cleared to zero by a processor reset.
- A bug has been fixed in the DIVAW instruction, which generated incorrect
  results for large values of divisor or quotient.
- A bug has been fixed in which timer counts were not being correctly restricted
  by the corresponding timer limit value.
- Performance of timers has been improved.
- The GDB interface has been updated to match gdb version 7.9 and the model will 
  no longer work with earlier versions. arc-elf32-gdb version 7.9 is provided 
  with the simulator and is used by default.


ARC toolchain
-------------------------------------------------------------------------------
A full toolchain package is now available for ARC processors. This is a build
of the 2015.06 release from:
   https://github.com/foss-for-synopsys-dwc-arc-processors/toolchain/releases

The following example Makefiles are provided in $IMPERAS_HOME/lib/$IMPERAS_ARCH
to show how the toolchain is used to compile for specific ARC processors:
  ARC600.makefile.include
  ARC700.makefile.include
  ARCEM.makefile.include
These all include the file ARC.makefile.include. See the comments in that file 
for info on how to use these Makefiles.


The -vlnvmap command line argument
-------------------------------------------------------------------------------
- A wildcard '*' character in a map command will now match an unspecified vlnv
  field in a model instance. e.g.
  
  icmGetVlnvString(0, "vendor", 0, "name", "1.0", "model");
  
  will now match when used with the command
  
  -vlnvmap vendor/*/name/*=vendor/*/newValue/*

Use of the platform command line parser
-------------------------------------------------------------------------------
- Trying to add duplicate commands to the command line parser produces more
  helpful messages.
- The command line parser has been added to most example platforms.

Imperas VLNV Library Platform Building
-------------------------------------------------------------------------------
- The Imperas VLNV library platforms are built with a standard Makefile, 
  Makefile.platform, to a platform executable and a shared object. The shared 
  object naming has changed to be model.so or model.dll in line with other
  generated VLNV library shared object naming 

mips.ovpworld.org SmartLoaderLinux peripheral
-------------------------------------------------------------------------------
- A new parameter, "pagebits" has been added to allow specifying the alignment 
  for loading the initrd file. This defaults to 12 bits, so the initrd is aligned
  on a 4096 word boundary if it is not set. If the configuration of your kernel
  requires a larger alignment then this option may be used to change it.
- The code added when the fixuplinuxstart parameter is specified now includes
  setting of the BAR registers the same way they are set by the default 
  startup code.
- When generating opcodes the SmartLoaderLinux peripheral now uses the opcode 
  for 'jalr $0, r' for jump instructions in order to be compatible with 
  the Release 6 instruction set, which no longer supports the R5 opcode for
  'jr r' in favor of the 'jalr $0, r' opcode which gives the same functionality
  
The ICM API
-------------------------------------------------------------------------------
The simulator has been updated. It has the following changes:

  The new simulator runtimes are still libCpuManager.[so,dll] and libOVPsim.[so,dll]
  The old simulator runtimes are libCpuManagerICM.[so,dll] and libOVPsimICM.[so,dll]

  To revert to the old simulators, set the environment variable IMPERAS_LOAD_ICM=1.

- icmNewAttrList()
  The handle returned by this can be passed to only one model. If passing the
  same parameters to several models, a new list is required for each instance.

- Formal parameters
  All processors, peripherals, MMCs and intercept libraries must declare each 
  parameter before use. Previously the declaration was optional in some
  circumstances. Each parameter must be declared with the correct type.
  If using igen to generate the model, note that the new TCL command
  imodeladdformalmacro -name <macro name> 
  can be used to add declarations for record/replay and serial interface
  parameters (see CHANGELOG.iGen.txt).
  
- Actual parameters
  It is now an error to pass a parameter to a model that it is not expecting.
  Previously this was a warning.
  
- Bus, net and packetnet interfaces.
  All processors, peripherals and MMCs must declare their interfaces before
  use. Previously the declaration was optional in some circumstances. 
  
- Error messages
  Some error messages have changed. Please check the behaviour of any downstream
  tools that depend on particular text output.
  
- Reports
  Outputs from -showcommands -showbuses, -showoverrides have changed format
  and sort order in some cases.

GDB for Windows Hosts
-------------------------------------------------------------------------------
The GDB for native windows machines has been upgraded to version 7.9

DWARF info no longer read in OVPsim
-------------------------------------------------------------------------------
Since DWARF info is only used by features that are only available in the
Imperas Professional Tools the DWARF info is no longer read when those tools 
are not available. The warning about incompatible DWARF version in an elf
file will no longer occur when running OVPsim. 

ARM Model Licensing
-------------------------------------------------------------------------------
Several changes have been made to the terms of the license for using the OVP
ARM CPU models. Please re-read the OVP license and ensure you are in agreement
with the terms of the license.

ELF Loader
-------------------------------------------------------------------------------
The built in ELF loader has been modified to load the ELF program headers using
the DATA bus of the processor. Previously the INSTRUCTION bus of the processor
was used. This was correct in unified memory situations, but not when the CODE
and DATA domains were non-uniform. It appears the best loading method is via
the DATA bus, this is also the same mechanism used by gdb when performing a
load.

GDB Server
-------------------------------------------------------------------------------
The simulator's  GDB server has been enhanced to handle non-uniform memory
spaces on harvard architecture processors. Previously an RSP memory access
would only attempt to access the DATA domain. If instructions were inaccessible
from the  DATA Domain, then the GDB Server would return 0xbadcOde4.
The GDB Server now attempts to read from the DATA domain, and if the access
fails due to no memory being accessible, it then attempts to read from the 
CODE domain.

The simulator's GDB server now supports the Taa return code allowing the GDB
to better support debugging of multicore SMP processors.

A bug has been fixed in the support of watch-points.

GDB
-------------------------------------------------------------------------------
The GDB executables now shipped as part of the product have all been upgraded
to GDB version 7.9 (except for arc-elf which is not yet available)
In addition the V850 no longer selects the architecture name v850, this is now
replaced to be auto

ovpworld.org VirtioBlkMMIO peripheral
-------------------------------------------------------------------------------
The VirtioBlkMMIO model in ovpworld.org/peripheral now supports record/replay. 

MipsMalta Platform (Imperas VLNV mips.ovpworld.org/platform/MipsMalta/1.0)
-------------------------------------------------------------------------------
- A new MipsMalta platform has been added to the library that is generated by the
  iGen productivity tool. This platform resides within the Imperas VLNV library 
  structure and is used in several demos from this location.
- The MipsMalta platform has been updated and now includes the standard Imperas
  Command Line Parser (CLP). The single MipsMalta platform replaces the previous
  platforms that had slightly different address maps hard coded to support
  different operating systems. 
- Switched from deprecated 16450 UART model to new 16550 model. Some register
  names, event names and other details of the model are different.

Build infrastructure 
-------------------------------------------------------------------------------
In order to compile PSE peripherals in either debug or optimized modes, this is
now controlled by the make variable PSEOPT, the default is to compile
optimized, in order to disable this set PSEOPT=0 on the make command line

Imperas control files
-------------------------------------------------------------------------------
- The extension library command (for example):
    --extlib platform/processor=modelAttrs@interceptlib.${IMPERAS_SHRSUF}
  No longer requires 'modelAttrs@' so should read (for example):
    --extlib platform/processor=interceptlib.${IMPERAS_SHRSUF}
    
  This is because all models require an attribute table which MUST be called
  'modelAttrs'.

Semihosting on Windows platforms
-------------------------------------------------------------------------------
- A bug prevented the creation of a new file using the semihosted open()
  function on Windows platforms (32 & 64 bit). This has been fixed.
  
ARM_CORTEX*.makefile.include
-------------------------------------------------------------------------------
The makefiles used to build ARM Cortex (v7) demo and example applications have
been modified to use the ARM Embedded pre-built toolchain from:
   https://launchpad.net/gcc-arm-embedded
   
This replaces the CodeSourcery Lite toolchain, which is no longer available. 
The executable files will of course be different due to the toolchain change.

BareMetalArmCortexMSingle platforms
-------------------------------------------------------------------------------
The BareMetalArmCortexMSingle and BareMetalArmCortexMSingle_TLM2.0 platforms 
have been modified to disable the resetAtTime0 parameter that causes the
simulation to start from the reset vector. Instead the entry address defined in
the application elf file is used as the start address.

This is consistent with other platforms and make these platforms compatible
with toolchains that do not provide default exception handlers with their
startup code.

Imperas Platforms
-------------------------------------------------------------------------------
- To prevent unpredictable behaviour the simulator now checks the API version
  of each peripheral model against the simulator. If an out-dated model causes
  the simulator to exit, it should be recompiled using include files from the
  simulator's installation (this condition already applies to other models).

New ICM functions
-------------------------------------------------------------------------------
- Functions to query Memory mapped registers in peripheral models
  icmNextBusPortMMRegInfo get each memory mapped register in turn, from the
                          bus slave port used to access the register.

  icmMMRegName                       return the name
  icmMMRegOffset                     return the address offset in bytes from the base of the
                                     bus slave port.
  icmMMRegBits                       return the width in bits
  icmMMRegDescription                return the description
  
  icmGetPSEDoc                       return root documentation node for a PSE
  icmGetNetPortMustBeConnected       true if the model requires this port to be connected
  icmGetPacketnetPortNet             return the net connected to the port
  icmGetPacketnetPortMustBeConnected true if the model requires this port to be connected
  
Demo OVPsim_Linux_Altera_Cyclone_V_HPS_Cortex-A9MPx2
-------------------------------------------------------------------------------
Info on rebuilding the kernel has been added to the README file

TLM 
-------------------------------------------------------------------------------
- Direct Memory Interface control
  It is now possible to turn DMI off or on during a simulation
  (the default state is ON).
  From a processor:
      processor_instance.dmi(0);  // off
      processor_instance.dmi(1);  // on

  Turning DMI off flushes the current DMI state so processor read and writes
  will use TLM transactions from that time.
      
  Turning DMI on causes the processor to re-negotiate DMI on each region.

  From an Imperas TLM Memory:
      ram_instance.dmi(0);  // off
      ram_instance.dmi(1);  // on
      
  Turning DMI off flushes the current DMI state so processor read and writes
  to this memory will use TLM from that time.

  NOTE: processor interface files must be regenerated by igen.
  If this is not possible, add a new function as follows:
  
  void dmi(bool on) {
      // One call for each bus port
      INSTRUCTION.invalidateDMI();
      DATA.invalidateDMI();
  }

Peripheral Bus Interface
-------------------------------------------------------------------------------
- A peripheral model may abort the bus transaction of an application processor
  or another peripheral acting as a bus master using new functions ppmReadAbort
  and ppmWriteAbort in a register or memory read or write callback context.
  If an application processor read or write is aborted, the processor model
  memory abort handlers are called.
  If aborting of a peripheral acting as a bus master is required, the bus master
  must use functions ppmReadAddressSpace and ppmWriteAddressSpace to initiate
  bus transactions. If these functions return False, the aborting address may
  subsequently be found using new function ppmGetAbortAddress.

Peripheral Model Socket Interface
-------------------------------------------------------------------------------
- Some peripheral models utilize a serial socket interface. The attribute 
  portFile that is used to specify a file in which to write the port opened will
  now cause the next available port to be opened even is the port attribute is
  not specified.
  
Modeling a packet-based network
-------------------------------------------------------------------------------
- A new simulation  concept - the packetnet has been introduced to model packet
  based networks such as Ethernet, CAN or GSM. A packetnet is similar to a net, 
  but carries a packet (with a maximum number of bytes) instead of a single 
  integer value. A packetnet connects two or more packetnet ports
  defined by peripherals or the platform itself. A packet is transmitted by 
  making a (blocking) function call in the peripheral or platform. The
  transmission takes zero time. Receivers are notified by a callback function
  which must not block. A receiver can make modifications to a packet which
  will be seen by the sender when the call returns. 
  
  New functions in ICM:
      icmNewPacketnet
      icmConnectPSEPacketnet
      icmAddPacketnetCallback
      icmWritePacketnet
      icmPrintAllPacketnetConnections
  
  New functions in PPM:
      ppmPacketnetWrite
      ppmPacketnetPort
      packetnetPortsCB (in the PPM modelattrs structure)
      
  Please refer to:
      OVPsim and Imperas CpuManager User Guide
      OVP Peripheral Modeling Guide
  in $IMPERAS_HOME/doc/ovp for additional info.

MIPS Processor Model
-------------------------------------------------------------------------------
- A bug has been fixed that could cause processor lockup when the reset signal
  was asserted on a multi-threaded processor in some circumstances.
- A bug has been fixed which caused enabled floating point exceptions to be
  ignored in some circumstances.
- Behavior of a reset signal has changed so that the reset is taken immediately.
  Previously, reset was deferred until after the next instruction fetch.
- The initial runnable state of a TC in a multi-threaded processor has been
  changed to take account of the value of the VPEControl.TE bit.
- Behavior of artifact fetch accesses that use the cache when cache model is
  enabled has been corrected for multicore processors. Previously, cacheability
  attributes were ignored for such accesses which could cause incorrect
  behavior.

Imagination Technologies MIPS Models
-------------------------------------------------------------------------------
- Imagination Technologies have released, through OVP, models of it's new 
  MIPS64 variant I6400. This is released in beta form and not yet fully 
  complete.
- Behavior of a reset signal has changed so that the reset is taken immediately.
  Previously, reset was deferred until after the next instruction fetch.
- The initial runnable state of a TC in a multi-threaded processor has been
  changed to take account of the value of the VPEControl.TE bit.
- Behavior of artifact fetch accesses that use the cache when cache model is
  enabled has been corrected for multicore processors. Previously, cacheability
  attributes were ignored for such accesses which could cause incorrect
  behavior.

ARM Processor Model
-------------------------------------------------------------------------------
- Names of GIC registers have been updated to correspond more closely to names
  used by ARM.
- New parameter override_GICD_TYPER allows reset value of GICD_TYPER to be
  overridden.
- Obsolete CP15NOP system register (0,c7,c0,4) has been deleted from all ARMv8
  variants.
- Exception vector selected when taking exception in AArch64 state from AArch32
  state has been modified to correspond to the description of "next lower level"
  in the ARM ARM.
- New variant Cortex-A17 has been added.
- Virtual IRQ and FIQ input signals have been added to Cortex-A7, Cortex-A15,
  Cortex-A53 and Cortex-A57 variants, allowing a GIC model to be implemented
  externally if required.

ARMM Processor Model
-------------------------------------------------------------------------------
- New variants ARMv6-M, Cortex-M0, Cortex-M0plus and Cortex-M1 have been added.
- Model parameter interface has been improved. New parameters allow specific
  features to be enabled or disabled:
  - unprivilegedExtension: Unprivileged/Privileged extension (ARMv6-M only);
  - VTORPresent          : whether VTOR register present (ARMv6-M only);
  - SysTickPresent       : whether SysTick timer present;
  - BitBandPresent       : whether bit-band region present (ARMv7-M only,
                           replaces parameter disableBitBand).
- A write to the PC before simulation starts now implicitly cancels the initial
  reset.
  
PPM INTERFACE (see BHM/PPM Function Reference documentation)
-------------------------------------------------------------------------------
- Redundant fields objectSize, constructCB and destructCB have been deleted from
  the ppmModelAttr structure.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmirtFlushTargetModeTagged enables conditional flushing of code
  blocks, depending on whether they have been tagged using vmimtTagBlock.
- New function vmirtSetPCDS enables a processor simulated program counter to
  be set to a delay slot instruction; once the instruction is executed, control
  is immediately transferred to a second address. This function is useful for
  models that require exception handlers to be able to return to delay slot
  instructions.
- New functions vmirtGetNetPortByName and vmirtGetNextNetPort enable access to
  and iteration of net ports on processors (useful in intercept libraries).
- New functions vmirtGetBusPortByName and vmirtGetNextBusPort enable access to
  and iteration of bus ports on processors (useful in intercept libraries).
- New functions vmirtGetFifoPortByName and vmirtGetNextFifoPort enable access to
  and iteration of fifo ports on processors (useful in intercept libraries).
- Status of function vmirtInstallNetCallback has been changed from deprecated
  to active because it is useful in intercept libraries. The function has been
  enhanced to allow callbacks to be installed on both output and input ports.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- New functions vmimtFCompareRRC and vmimtFCompareSimdRRC have been added. These
  are similar to existing functions vmimtFCompareRR and vmimtFCompareSimdRR but
  generate instruction-specific result values instead of the fixed result values
  of type vmiFPRelation generated by the existing functions.
- New function vmimtTagBlock allows blocks to be tagged when generated to
  prevent them being deleted by vmirtFlushTargetModeTagged.
- New functions vmimtEnterDelaySlotC and vmimtEnterDelaySlotR allow control
  transfer to a delay-slot block at any address, followed by control transfer
  to a different simulated address.
- vmiBusPort structure has a new field 'domain' of type memDomainP. This field
  is filled with the memory domain associated with any bus which is connected
  to the port, or is left NULL if the port is unconnected. Processor models may
  allocate a memory domain object and assign it to a NULL port domain field if
  required; this technique can be used to expose memory domains that are
  defined internally to other platform components such as intercept libraries.
  
BHM API (see OVP BHM and PPM API Function Reference documentation)
-------------------------------------------------------------------------------
- The BHM function interface for serial devices has been enhanced. New functions
  bhmSerReadN and bhmSerWriteN implement *non-blocking* reads and writes of
  serial devices. New functions bhmSerReadB and bhmSerWriteB implement
  *blocking* reads and writes of serial devices. Blocking functions block only
  the current PSE thread, not the entire simulation. Functions bhmSerRead and
  bhmSerWrite have been deleted and replaced with #defines to bhmSerReadN and
  bhmSerWriteN, respectively. Note that the deleted function bhmSerWrite used to
  block the entire simulation until data could be sent, so consider using
  bhmSerWriteB as a replacement if this behavior is required.
- The BHM function interface for Ethernet devices has been enhanced in an
  analogous fashion to the serial device interface described above. New
  functions bhmEthernetReadFrameN and bhmEthernetWriteFrameN implement
  *non-blocking* reads and writes. New functions bhmEthernetReadFrameB and
  bhmEthernetWriteFrameB implement *blocking* reads and writes. Functions
  bhmEthernetReadFrame and bhmEthernetWriteFrame have been deleted and replaced
  with #defines to bhmEthernetReadFrameN and bhmEthernetWriteFrameN,
  respectively.
- Peripheral record/replay has been enhanced with the introduction of a new text
  file format. The old format is still supported but deprecated.
- Function bhmReplayEvent now takes an additional maxBytes argument, which
  specifies the maximum size of the data packet, in bytes.

Simulator Core
-------------------------------------------------------------------------------
- A code generator bug causing incorrect execution of conditional instructions
  under some circumstances has been fixed.
- A bug has been fixed which would cause the native X87 register stack to be
  corrupted when exceptions were generated by a floating point operation with
  a result adjustment callback.
- A bug has been fixed which caused an assertion for a jump with delay slot
  at the top of memory (e.g. 0xfffffffc) and the delay slot instruction at the
  wrapped low memory address (e.g. 0x00000000).
- A bug has been fixed in which the value returned by the vmiNextPCFn in a model
  would be corrupted if the returned address was more than 4Gb from the current
  instruction address.
- A bug has been fixed which could occasionally cause bad code to be generated
  in badly-written processor models that fetch instruction bytes using
  vmicxtFetch* functions from addresses *before* the instruction address.
- The 'variant' parameter is applied at only the parent processor of an SMP 
  cluster. Reporting a bad variant is done only once by the parent, previously
  it could be reported by all children.
- Symbol lookup for interception and tracing has been enhanced so that symbols
  are correctly found when ELF files are loaded onto processors with non-uniform
  memories.

###############################################################################
##                                                                           ##
## Date 2015-February-11                                                     ##
##                                                                           ##
## Release 20150205.0                                                        ##
##                                                                           ##
###############################################################################

 -mno-ms-bitfields added to SIM_CFLAGS for Windows host compilation
-------------------------------------------------------------------------------
The -mno-ms-bitfields gcc option has been added to SIM_CFLAGS for Windows 
targets in the file bin/Makefile.include. This is needed because some gcc
implementations (e.g. gcc version 4.8.1 provided as part of Windows32 MinGW)
have changed the default setting for the ms-bitfields option from off to on
causing bugs when linking objects created with this flag on with objects
created with it off.

mips.ovpworld.org MipsMaltaLinux platform
-------------------------------------------------------------------------------
- An alias has been added from the high 2GB to the low 2GB of the physical 
  address space to model an undocumented feature of the MipsMalta that is
  required for kernels configured with support for using the EVA feature of
  the latest processor families.
- An additional 1.5GB of RAM has been added at 0x2000.0000 to 0x7fff.ffff to
  model memory that is available on later versions of the Malta. 

armAngel Semihost Library
-------------------------------------------------------------------------------
The values returned by the armAngel semihost SYS_HEAPINFO call on AARCH64 have 
been modified.
- The addresses returned will now always be at the top of the 2GB area that
  includes the program (as determined by the pointer passed to the semihost 
  call). This is required because the default C startup code for AARCH64 only
  maps a 2GB region in the MMU, leaving other addresses inaccessible.
- The value returned for HEAP_BASE has been changed from 0x8000000 to either
  0x60000000 or 0xE0000000, depending on whether the program is in the low
  or high 2GB area. This was needed because the 0x80000000 value overlaps
  the text area which by default starts at 0x80000000.

ICM C++ Interface (& TLM2)
-------------------------------------------------------------------------------
- icmTerminate is now called when the first icmCpuManagerItem is destroyed.
  Previously it was called only when an icmPlatform object was destroyed. This 
  forces icmTerminate to be called before any icm objects have been destroyed,
  which can lead to a segmentation violation. This also removes the requirement 
  to call icmTerminate in a C++ platform that does not explicitly define an 
  icmPlatform object. 

TLM2 Interface
-------------------------------------------------------------------------------
- The TLM2 transaction layer has been enhanced so that the current processor
  context is passed using an icmInitiatorExtension object (derived from the
  tlm_extension class) for the active TLM2 transaction. This means that the
  active processor is always known in a callback context, and consequently
  constant values ICM_UNKNOWN_PROCESSOR and VMI_UNKNOWN_PROCESSOR are no longer
  required and have been removed from the ICM and VMI headers, respectively.
  
- Fixed a bug in the Imperas TLM decoder which caused an incorrect calculation
  of the DMI memory region.

ArmVersatileExpress-CA9 platform enhancements
-------------------------------------------------------------------------------
- The NOR0 and NOR1 Flash memories have been modified to use the fixed-size
  NorFlashP30_64MB model rather than the variable size NorFlashP30 model. This
  is required to support building a SystemC TLM version of the platform, as
  variable size ports are not supported for TLM platforms.

New fixed-size NorFlashP30_64MB peripheral model added
-------------------------------------------------------------------------------
A new peripheral modeling a 64MB Intel StrataFlash P30 NOR Flash device has  
been added to at:
    ImperasLib/source/intel.ovpworld.org/peripheral/NorFlashP30_64MB/1.0
This is a fixed-size version of the NorFlashP30 model. This is required to 
support SystemC TLM, as variable size ports are not supported for TLM 
platforms.

ArmVersatileExpress-CA15 platform changes 
-------------------------------------------------------------------------------
The ArmVersatileExpress-CA15 platform is now generated by iGen. The main effect  
of this change is that the platform's command line arguments have changed:
- The simulator's command line parser is now used, and thus all standard 
  command line arguments are accepted. The --help argument may now be used
  to see all available command line arguments.
- The command line arguments previously accepted by the platform have changed:
    OLD FORMAT      NEW FORMAT
    ----------      ----------
    V  <variant>    --variant <variant>
    B  <boot code>  --boot <boot code>
    SD <image>      --sdimage <image>
    U  <port>       --uart0port <port>
    nographics      --nographics
    wallclock       --wallclock
    Android         --android

OVPsim_Linux_ArmVersatileExpress_arm_Cortex-A15MP Demo
-------------------------------------------------------------------------------
The OVPsim_Linux_ArmVersatileExpress_arm_Cortex-A15MP Demo directory no longer
contains the executable platform, instead it uses the platform from the VLNV 
tree. See the README file in the demo for details.

AlteraCycloneV_HPS platform changes
-------------------------------------------------------------------------------
The AlteraCycloneV_HPS platform is now generated by iGen. The main effect of 
this change is that the platform's command line parameters have changed:
- The simulator's command line parser is now used, and thus all standard 
  command line arguments are accepted. The --help argument may now be used
  to see all available command line arguments.
- The arguments previously accepted by the platform, e.g.:
    ZIMAGE zImage
  now must be have a "--" prepended, and are accepted in lower case, e.g.:
    --zimage zImage

OVPsim_Linux_Altera_Cyclone_V_HPS_Cortex-A9MPx2 Demo
-------------------------------------------------------------------------------
The OVPsim_Linux_Altera_Cyclone_V_HPS_Cortex-A9MPx2 Demo directory no longer
contains the executable platform, instead it uses the platform from the VLNV 
tree. See the README file in the demo for details.

V850 Processor Model
-------------------------------------------------------------------------------
- Fixed an issue where a pending interrupt can be missed during the RETI
  instruction

ICM API
-------------------------------------------------------------------------------
- Functions have changed name (macros map the old to new names so you need not
  change your code)
    icmGetNextParamInfo    becomes icmGetNextProcessorParamInfo
    icmGetNextBusPortInfo  becomes icmGetNextProcessorBusPortInfo
    icmGetNextNetPortInfo  becomes icmGetNextProcessorNetPortInfo
    icmGetNextFifoPortInfo becomes icmGetNextProcessorFifoPortInfo
- New access functions:
    icmGetInterceptVlnv          Get the VLNV of this intercept object                          
    icmGetNextInterceptParamInfo Return the next intercept parameter info                              
    icmGetMMCVlnv                Get the VLNV of this MMC
    icmGetNextMMCBusPortInfo     Return the next MMC bus port description
    icmGetNextMMCParamInfo       Return the next MMC parameter description      
    icmGetPSEVlnv                Get the VLNV of this PSE
    icmGetNextPSEBusPortInfo     Return the next PSE bus port description                
    icmGetNextPSENetPortInfo     Return the next PSE bus port description
    icmGetNextPSEParamInfo       Return the next PSE parameter description
- If these functions fail, they no longer cause the simulation to fail:
    icmLoadBus   
    icmLoadSymbols
    icmLoadProcessorMemory
  Their return values MUST be checked if their success is important. To report
  why they failed, see icmLastMessage().
  
- New function
    const char *icmLastMessage()
  Returns the last message produced by the simulator, even if it was suppressed.
  
- fixed a bug in icmGetNextPSEBusPortInfo.
- fixed a bug in icmGetVlnvString - was confused by spurious directories in the
  <version> directory of a model.
  
- Function icmCLParser takes new values ICM_AC_SIM and ICM_AC_LIB to allow the
  users program to separately request simulator or library management flags.
  
- New functions icmDocSectionAdd and icmDocTextAdd allow a platform to create
  documentation that can be interrogated with the ICM API.
 
ARM Processor Model
-------------------------------------------------------------------------------
- Support added for VIC Ports to the ARM processor model. This adds new  
  netports VICADDR and VICACK to the model for those variants that support VIC 
  ports.
  If SCTLR.VE=1 when an IRQ interrupt is received then the processor will write
  a value of 1 to the VICACK netport and then expect a 32 bit address to be 
  immediately written to the VICADDR netport and this address will be used as 
  the exception vector for the interrupt.
  This behavior is only supported in the appropriate variants, currently: 
  ARM1026EJ-S, ARM1136J-S, ARM1156T2-S, ARM1176JZ-S, Cortex-R4 and Cortex-R4F.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- The vmi command argument parser can now parse Uns64 values (formerly the
  Addr type had to be used for 64-bit values). The new enumeration VMI_CA_UNS64
  added to the enumerated type vmiArgType is used to parse this type.
  
VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- Unary operations added:
    vmi_CTZ     (count trailing zeros)
    vmi_CTO     (count trailing ones)
    vmi_BSFZ    (get bit index of least-significant zero)
    vmi_BSFO    (get bit index of least-significant one)
    vmi_BSRZ    (get bit index of most-significant zero)
    vmi_BSRO    (get bit index of most-significant one)
- Binary operations added:
    vmi_IREM    (signed remainder)
    vmi_REM     (unsigned remainder)

Imperas VLNV Library Build Infrastructure
-------------------------------------------------------------------------------
- Makefile.igen build peripheral xml files independently of peripheral template
  files. All pse xml files generated are names pse.igen.xml
  
###############################################################################
##                                                                           ##
## Date 2014-November-05                                                     ##
##                                                                           ##
## Release 20141103.0                                                        ##
##                                                                           ##
###############################################################################

Imagination Technologies MIPS Models
-------------------------------------------------------------------------------
- Imagination Technologies have released, through OVP, models of it's new Warrior 
  class of processors.
  The MIPS32 variants M5100, M5150 and P5600 are fully released
  The MIPS64 variant MIPS64R6 is released in beta form and not yet fully 
  complete. 
 
Nios_II Shadow register / RDPRS /WRPRS
-------------------------------------------------------------------------------
- The estatus[CRS] and bstatus[CRS] register fields were marked as readonly as
  per the status[CRS] register field, this has been corrected to be read/write.

- The instructions RDPRS and WRPRS have been added.

SMSC LAN9118 peripheral model fixes
-------------------------------------------------------------------------------
Minor fixes to register read values to support UEFI Boot Loader:
- Clear "MII_ACC" register "MII Busy" bit when it has been set by a write.
- Fix incorrect value returned for "PHY Basic Status" register.

ARM MmciPL181 peripheral model fixes
-------------------------------------------------------------------------------
Minor fixes for CMD8 to support UEFI Boot Loader.

ARM SmartLoader peripherals
-------------------------------------------------------------------------------
The ARM Linux SmartLoader pseudo-peripherals will no longer generate extraneous
warning messages about unused attributes when they have been disabled.

Nios_II reset_n pin
-------------------------------------------------------------------------------
An additional change has been made to the reset_n pin, so that the first
net value of 0 is seen as an active edge transition. 
The removes the need to initialize the net to 1 at startup.

ArmVersatileExpress-CA9 platform enhancements
-------------------------------------------------------------------------------
The following changes have been made to the ArmVersatileExpress-CA9 platform 
to support UEFI booting:

- System Configuration Controller, 'Fast' AXI matrix and 'Slow' AXI matrix 
  address spaces may now be read and written (no underlying functionality has 
  been added, just the ability to read/write those addresses)
- The NOR0 and NOR1 Flash memories are now modeled with the new NorFlashP30
  peripheral which models the Flash programming process. These were previously
  just modeled as RAM.

New NorFlashP30 peripheral model added
-------------------------------------------------------------------------------
A new peripheral modeling the Intel StrataFlash P30 NOR Flash device has been 
added to at ImperasLib/source/intel.ovpworld.org/peripheral/NorFlashP30/1.0

TzpcBP147 (ARM TrustZone Protection Controller) peripheral model
-------------------------------------------------------------------------------
TzpcBP147 peripheral model has been enhanced to support 16 protection outputs
per register rather than 8, in order to match the Versatile Express 
implementation.

Peripheral Model Diagnostics
-------------------------------------------------------------------------------
- Standard MACROs are included to obtain the diagnostic level.

Xilinx xps-timer
-------------------------------------------------------------------------------
- Fixed an issue of reading the Count register, whilst counting not enabled
  The count register would only be loaded when counting enabled, this has been
  corrected so that the load occurs when the status load bit is set

ARM Cortex-M (armm) processor model
-------------------------------------------------------------------------------
- Writes to the reset net that do not change its value now have no effect.
- Performance of MOVT instructions has been greatly improved.
- Virtual memory constructor has been modified to use new functions
  vmirtSetProcessorInternalCodeDomain and vmirtSetProcessorInternalDataDomain
  to identify internal domains. The effect of this is that callbacks added
  with icmAddFetchCallback, icmAddReadCallback or icmAddWriteCallback will be
  activated by processor accesses prior to any system control space re-mappings
  have been applied.
- A warning message is now issued when an unrecoverable exception causes a
  cpu lockup
- Bits 31:30 of the VTOR register are now writable, per the latest revision of
  the ARM architecture specification.  

Nios_II reset_n pin
-------------------------------------------------------------------------------
The Nios_II model now behaves correctly when the reset_n pin is set/cleared
On a neg-edge the Nios_II goes into reset, on a pos-edge the Nios_II exits 
reset with all of its internal registers set to the reset condition. Code
execution then resumes at the RESET_VECTOR

armNewlib semihosting supports additional newlib function names
-------------------------------------------------------------------------------
The armNewlib semihost library has been enhanced to support newlib function
names with an additional "_" prepended to them (e.g. "__open" as well as "_open".
This allows semihosting of ELF files generated by certain toolchains which use
this convention (such as IAR).

armAngel semihosting extended to support Cortex-M model
-------------------------------------------------------------------------------
The armAngel semihost library now supports the Cortex-M (armm) models.

Libraries versioned for libelf & libdwarf
-------------------------------------------------------------------------------
The simulator is now linked against specific versions of libelf and libdwarf libraries
this is to overcome the case where external tools use there own versions
of libelf and libdwarf

Unsupported Dwarf version message added
-------------------------------------------------------------------------------
A check for ELF files using an unsupported DWARF version has been added. Only 
versions 3 and earlier are supported. For GNU toolchains the command line 
option -gdwarf-2 is recommended to get a supported DWARF version.

Note that DWARF information only affects line number queries and certain VAP 
tools, so it is not an error to use an ELF file with an unsupported DWARF 
version. 

arm.ovpworld.org ArmVersatileExpress-CA9 platform
-------------------------------------------------------------------------------
Added a dummyPort placeholder for the serial bus PCI device address range.  
Required for the Debian kernel to boot.

arm.ovpworld.org MmciPL181 peripheral
-------------------------------------------------------------------------------
Fixed uninitialized memory bug in the model that prevented the Debian network 
boot installer from working.

MIPS Processor Model
-------------------------------------------------------------------------------
- The integration support "stop" pseudo-register will now cause a processor to
  stop even when it is in debug mode (Debug.DM=1). Previously, processors in
  debug mode were unaffected by changes to this register.
- Full cache model has ben enhanced to distinguish fetch and load accesses.
- The initial values for the segctl registers when EVAReset=1 have been fixed
- Virtual memory constructor has been modified to use new functions
  vmirtSetProcessorInternalCodeDomain and vmirtSetProcessorInternalDataDomain
  to identify internal domains. The effect of this is that callbacks added
  with icmAddFetchCallback, icmAddReadCallback or icmAddWriteCallback will be
  activated by processor accesses prior to any CDMM, GCR, cache model, SPRAM
  or ITC re-mappings have been applied.
- A new resource code is added for debug access of the pseudo-register 'stop'.
- Byte-sized accesses to memory-mapped CMP registers are now supported.
- Correct microAptivCF configuration to MD00934-2B-microAptivUC-SUM-01.03

ARM Cortex-A (arm) processor model
-------------------------------------------------------------------------------
- Writes to the reset net that do not change its value now have no effect.
- Performance of MOVT instructions has been greatly improved.
- Virtual memory constructor has been modified to use new functions
  vmirtSetProcessorInternalCodeDomain and vmirtSetProcessorInternalDataDomain
  to identify internal domains. The effect of this is that callbacks added
  with icmAddFetchCallback, icmAddReadCallback or icmAddWriteCallback will be
  activated by processor accesses prior to any TCM re-mappings have been applied.

VMI API
-------------------------------------------------------------------------------
- Type memAccessAttrs has been enhanced to allow fetch and read accesses to be
  distinguished. Valid values for variables of type memAccessAttrs are:
    MEM_AA_FALSE                (indicates artifact read/write)
    MEM_AA_TRUE                 (indicates true read/write)
    MEM_AA_FALSE|MEM_AA_FETCH   (indicates artifact fetch)
    MEM_AA_TRUE|MEM_AA_FETCH    (indicates true fetch)
- New macros MEM_AA_IS_TRUE_ACCESS and MEM_AA_IS_ARTIFACT_ACCESS must be used
  to identify true and artifact accesses, given a value of type memAccessAttrs.
- New functions vmirtReadNByteDomainVA and vmirtWriteNByteDomainVA have been
  added. These are similar to vmirtReadNByteDomain and vmirtWriteNByteDomain
  but additionally allow a nominal virtual address (VA) to be passed. This
  virtual address is available as the VA argument of callbacks of type
  vmiMemReadFn, vmiMemWriteFn and vmiMemWatchFn activated by the read or write,
  and also similar platform callbacks of type icmMemReadFn, icmMemWriteFn and
  icmMemWatchFn. Existing functions vmirtReadNByteDomain and
  vmirtWriteNByteDomain always report identical 'address' and 'VA' arguments.
- Memory watch callback installation and removal functions (vmirtAdd*Callback
  and vmirtRemove*Callback) have been enhanced. It is now possible to pass the
  special value VMI_MASTER_SCOPE as the 'scope' argument to these callbacks,
  to indicate that the callback should be activated only by master-side
  accesses by any processor.
- New functions vmirtSetProcessorInternalCodeDomain and
  vmirtSetProcessorInternalDataDomain allow internal code and data domains for
  a processor to be identified. If these functions are not called during
  processor construction, domains associated with externally-connected code
  and data busses will be used (in other words, processor internal and
  external domains will be the same).
- New functions vmirtGetProcessorInternalCodeDomain and
  vmirtGetProcessorInternalDataDomain return the processor internal domains.
- Types vmiSymbolType and vmiSymbolBinding have been deleted; use types
  ordSymbolType and ordSymbolBinding instead. The definition of these types is
  in file ImpPublic/include/host/ord/ordTypes.h.
- Functions vmirtGetSymbolType and vmirtGetSymbolBinding have been modified to
  return values of type ordSymbolType and ordSymbolBinding, respectively.
- The shared data interface has been modified to improve usability, as follows:
  - Function vmirtRemoveSharedData now takes a 'vmiSharedDataHandleP' argument
    instead of a 'const char *' argument.
  - Function vmirtRegisterListener now takes a 'void *' argument as its third
    argument instead of a vmiosObjectP. This allows the shared data listener
    functions to be used in contexts other than intercept libraries.
  - Function vmirtUnregisterListener now takes a 'void *' third argument, which
    must match the corresponding argument given to vmirtRegisterListener for the
    listener to be deleted.
  - Function type VMI_SHARED_DATA_LISTENER_FN is now passed a void *' first
    argument instead of a vmiosObjectP argument. This is because the listener
    functions have been generalized so that they can be used in contexts other
    than just intercept libraries. Existing intercept library code that uses
    listeners can be made to conform to the new interface by adding this line:
        vmiosObjectP object = userObject;
- New functions have been added to access processor parameters of different
  types from intercept libraries:
    vmirtProcessorBoolAttr
    vmirtProcessorDoubleAttr
    vmirtProcessorUns32Attr
- Functions with names vmiosExtension*Attribute have been deleted. Extension
  libraries are now parametrized in the same way as processor models, and
  all parameters must be formally declared in a vmiParameter table structure.
  See the Imperas Binary Interception Technology User Guide for more details.
- Functions with names vmimmcGet*Attribute have been deleted. Memory model
  components are now parametrized in the same way as processor models, and
  all parameters must be formally declared in a vmiParameter table structure.
  See the Memory Model Component Function Reference Guide for more details.

ICM API
-------------------------------------------------------------------------------
- New function icmProcessorClocks(processor)
  returns the total number of instructions executed, including those 'executed'
  in the halted state.
- Behavior of icmAddFetchCallback, icmAddReadCallback and icmAddWriteCallback
  has been modified so that callbacks are added to processor internal domains
  instead of external domains as was the case previously. This allows callbacks
  to be installed before any structure such as a cache, which was not possible
  previously. To install callbacks on external domains, use existing functions
  icmAddBusFetchCallback, icmAddBusReadCallback or icmAddBusWriteCallback.
- icmGetProcessorElfcode has changed its parameters. Please refer to icmQuery.h
  if you use this function.
- Passing a non NULL value to the semihost-file argument of icmNewPSE will cause
  an error. If native code is used to provide behavior of a PSE model it 
  is only specified in the PSE model itself.
- MMC implementation has been improved so that transparent and full models are
  both connected to busses as normal (previously, transparent models required a
  special connection idiom). Functions icmConnectTransparentMMC and
  icmChainTransparentMMC have been deleted.
- New functions icmGetBusPortAddrBitsMin and icmGetBusPortAddrBitsMax return
  the number of address bits when a model offers a range.
  
Simulator Core
-------------------------------------------------------------------------------
- Behavior of asynchronous interrupts from a debugger has been modified so that,
  for processors with delay slot instructions, the interrupt is safely deferred
  until the following non-delay-slot instruction.
- Function vmirtDisassemble has been enhanced as follows:
  - When called in an intercept library context, the function will now invoke
    the disassembly function either in a subsequent intercept library or in the
    processor model; previously, the function could invoke the disassembly
    function in the *current* intercept library, which could cause an infinite
    recursion. The new behavior is more useful when writing intercept libraries
    that modify the behavior of a specific instruction in a processor
    instruction set.
  - Type vmiDisassAttrs contains a new DSA_BASE entry, which specifies that
    disassembly should always be performed using the processor model disassembly
    function (not a function defined in any intercept library).
- The QuantumLeap parallel simulation algorithm has been enhanced to improve
  usability, as follows:
  - Simulation is now Nice instead of Greedy by default. See the OVPsim and
    Imperas CpuManager User Guide for more information about Nice and Greedy
    simulation modes and how to configure which algorithm is used.
  - A new control file option --parallelThreads allows the number of parallel
    threads that run simultaneously to be restricted if required. See the OVPsim
    and Imperas CpuManager User Guide for more details.
  - The standard QuantumLeap algorithm now allows simulation of platforms with
    any number of processor cores within them (previously, a separate license
    was required to enable simulation of platforms with more than 8 cores).
  - A separate license is required now for simulations with more than 4 threads
    running in parallel.
- Control file options
    --gdb has been deleted. Use --port 0 instead.
    --gui has changed to --mpdgui.
    --argv <parameters> passes parameters to the application's main()
    Note that this swallows all following parameters so must be used last.
    --envp <var>=<value> <var>=<value> ...
      Passes environment variables to the application's main().
    --showcommands and --showoverrides now prevent the simulator from
      creating a debug console.
- A code generator bug causing incorrect code to be generated in complex
  sequences of overlapping register moves has been fixed.
- A bug has been fixed that caused an assertion error with 32-bit products when
  running on hosts with native FMA support when FMA instructions caused floating
  point exceptions to occur.
- An issue has been fixed that could cause unexpected floating point exceptions
  when emulating fused-multiply-add instructions.
  
###############################################################################
##                                                                           ##
## Date 2014-July-31                                                         ##
##                                                                           ##
## Release 20140731.0                                                        ##
##                                                                           ##
###############################################################################

Phillips ISP1761 USB controller model added
-------------------------------------------------------------------------------
- A new USB device has been added to philips.ovpworld.org. See the file
  ImperasLib/source/philips.ovpworld.org/peripheral/ISP1761/1.0/README-OTG.txt
  for info on configuring the host computer to use it.

SMSC LAN9118 and LAN91C111 ethernet controller models added
-------------------------------------------------------------------------------
- 2 new ethernet devices have been added to smsc.ovpworld.org. See the file
  ImperasLib/source/smsc.ovpworld.org/peripheral/LAN9118/1.0/README-EMAC.txt
  for info on configuring the host computer to use them.

Functional USB and Ethernet models added to VersatileExpress platforms
-------------------------------------------------------------------------------
- Working ethernet and USB models have been added to the following platforms:
    ArmVersatileExpress
    ArmVersatileExpress-CA9
    ArmVersatileExpress-CA15
    ArmVersatileExpressLinuxwithMicroBlaze
    QuadArmVersatileExpress

ArmVersatileExpress-CA9 platform
-------------------------------------------------------------------------------
- Added missing cardin and wprot net connections between the MmciPL181 and 
  VexpressSysRegs peripherals so the MmciPL181 now is usable in Linux when a disk
  image is specified for it using the SD_DRIVE parameter.

ARM Cortex-M (armm) processor model
-------------------------------------------------------------------------------
- The SYST_CSR.CLKSOURCE field has been changed to read-as-1/write ignored
  since external clock sources are not supported by the model.

MIPS Processor Model
-------------------------------------------------------------------------------
- Correct default values of SegCtl registers on interAptivUP to 3 GiB MUSUK
  segment when EVAReset asserted.
- Configuration bits in the FCSR register of the microAptivCF variant have been 
  corrected.
- Config5.K is correctly forced to 1 when EVAReset parameter set.
- Correct potential crash when calling icmDisassemble on a multi-core or multi-
  VPE processor.
- Added SI_ExceptionBase and SI_UseExceptionBase input nets to variants that
  support them. Note that CMP variants do not have these inputs - the GCR 
  register GCR_CL_REGISTER_BASE is used instead. Also variants before 24K do not 
  have these nets either.
  Also added SI_EVAReset, SI_ExceptionBasePA and SI_ExceptionBaseMask inputs to 
  variants that support Segment control but do not have CMP. (currently only 
  the interAptivUP variant meets this criteria).
  These nets are only sampled on a reset, so if you want a value written to 
  these nets to take effect at the beginning of simulation, the reset net must 
  be set to 1 and then 0 at the beginning of simulation.
- The SI_* nets are provided for cases where these inputs to the processor model
  are controlled by other simulated devices. When this is not needed there are 
  corresponding model parameters which may be used to specify the values to use
  for inputs that never change during the simulation. 
  These parameters are:
    ExceptionBase
    UseExceptionBase
    EVAReset
    ExceptionBaseMask
    ExceptionBasePA
  Note these parameters are ignored when CMP is present. The last three are
  ignored unless segment control is present.
  These parameters simply provide a way to specify the values used at simulation 
  startup. If the SI_* nets are connected and written to, that will override
  the initial value from the parameters.
- The LegacyUseBEVBase parameter has been deleted in favor of the new 
  UseExceptionBase parameter, which has slightly different functionality.
- The BEVBase parameter has been deleted in favor of the new ExceptionBase 
  parameter. Note that unless the new UseExceptionBase parameter is set to 1 
  it will be ignored.
- The BEVBasePA and BEVBaskMask parameters have been renamed ExceptionBasePA
  and ExceptionBaseMask to match the latest MIPS documentation.
  
TLM Platforms
-------------------------------------------------------------------------------
- Several TLM platforms in the library and in the Examples directories which
  specified memories that were one byte too large have been corrected.
- The TLM decoder now checks that the high address is not lower than the low
  address.
- A crash when hitting a register event breakpoint in the TLM platform has been
  fixed.

Signal Handling
-------------------------------------------------------------------------------
- When connected to a debugger, signals received by the simulator could finish
  the simulation. This has been fixed.

Control files
-------------------------------------------------------------------------------
- OVPsim can now read a control file. Please refer to OVP_Control_File_User_Guide

New "append" parameter added to SmartLoaderLinuxArm peripheral
-------------------------------------------------------------------------------
- A new parameter named "append" has been added to the SmartLoaderLinuxArm
  peripheral. When set, the string will be appended to the command line passed 
  to the Linux kernel. This is useful for adding things to the default command
  line. The "command" parameter may still be used to override the default
  command line.  

New VirtioBlkMMIO peripheral model added
-------------------------------------------------------------------------------
- A new peripheral device that models a VIRTIO MMIO Block device has been added.
  This device models a legacy (or v1) device as described in the document:
    http://docs.oasis-open.org/virtio/virtio/v1.0/virtio-v1.0.pdf
  and may be used to model a disk drive in Linux platforms. 
  Use the VB_DRIVE parameter to specify the disk image file to use.

ARM Cortex-A/R Processor Model
-------------------------------------------------------------------------------
- Non-functional debug registers have been added to ARMv8 processor model
  (sufficient to allow operating systems such as Linux to boot).
- Coprocessor registers in the debug view are now sorted alphabetically instead
  of by index number.
- A bug has been fixed in which monitor addresses used by LDREX/STREX
  instructions were incorrect in AArch64 state in some circumstances.
- A bug has been fixed which caused incorrect memory aborts when AArch32 EL0
  processes were executed with AArch64 EL1 TLB management.
- Condition flag settings for AArch64 ANDS, BICS and TST instructions have been
  corrected (previously, flags were incorrectly set in the same way as for
  equivalent AArch32 instructions, meaning that PSTATE.V was not changed).
- A bug has been fixed which prevented Cortex-R models from exiting reset state
  with ATCM or BTCM enabled when signals INITRAMA or INITRAMB were high.
- A new Boolean parameter "useInternalTCMs" has been added to processor variants
  with ATCM/BTCM memories. When set to true, this parameter forces the model to
  use internal TCM memory models even when ATCM/BTCM ports appear to be
  externally connected. This allows internal ATMC/BTCM memories to be used in
  SystemC platforms in which ATCM/BTCM ports are connected to dummy devices and
  not actually implemented externally.

VMI API
-------------------------------------------------------------------------------
- vmiFPConfig structure has new 'tininessAfterRounding' field, which specifies
  that tininess of floating-point results should be detected after rounding
  instead of before rounding (the default).
- vmiFPConfig structure 'suppressDF' field has been deleted and replaced with
  a field 'suppressFlags' of type vmiFPFlags. This enables any flag generated
  by a floating-point operation to be suppressed if required.
- vmiFPConfig structure has new 'stickyFlags' field, which, if True, specifies
  that floating-point operation result flags should be combined with the current
  flags using bitwise-or. If False, floating-point operation result flags are
  directly assigned to the flags specified with the operation.
- Function prototypes of vmiMemReadFn, vmiMemWriteFn and vmiMemWatchFn memory
  callback functions have been modified so that the order of arguments conforms
  to similar functions in the ICM API. Define callbacks using VMI_MEM_READ_FN,
  VMI_MEM_WRITE_FN and VMI_MEM_WATCH_FN macros to ensure portability.

Simulator Core
-------------------------------------------------------------------------------
- An issue has been fixed that occasionally caused halted processors to be
  incorrectly restarted by a preceding call to the ICM function icmInterrupt.
- Memory model performance with large virtual pages has been improved.
- Combination of -enabletools and -finishafter caused internal error. This is
  fixed.
- An issue has been fixed that caused slow simulation on Windows hosts with
  QuantumLeap parallel simulation when the number of simulated cores exceeded
  the available cores on the host.
- An issue has been fixed that caused incorrect behavior on 64-bit hosts in
  some circumstances for simulations using large amounts of virtual memory.
- Performance of all floating point operations that set sticky flags has been
  significantly improved.
- Performance of most SIMD floating point operations has been significantly
  improved.

ICM API
-------------------------------------------------------------------------------
- The use of icmInit() has been replaced with icmInitPlatform() in most of the 
  example and library platforms. The new function names the platform as part
  of the simulation initialization.
  
- icmCLParserAdd has new argument types
  ICM_AT_PAIRLIST     parses -flag name=value name=value ... (until another -)
  ICM_AT_FC_ARGVPAIR  parses -flag name=value name=value ... (until another -)
  ICM_AT_STRINGSLAST  parses -flag string string ... (until the last argument)
  ICM_AT_FC_ARGVLAST  parses -flag string string ... (until the last argument)
  
  Note that some of the ICM_AT_xxx macro names have changed.
  
- Custom object reader has moved:
     from ImpPublic/include/host/icm   to   ImpPublic/include/host/ord
     
  Please refer to the include-file in this directory.   
  
  The callbacks created by the user must supply an extra argument -
    the user data passed to your entry function.
  Information is passed back to the simulator in the ordObjectInfo structure
  instead of as arguments to the callback.
  (see Examples/Platforms/objectReader/loader/loader.c)
  
  New functions to extract more information from ELF files:
  icmReadObjectFileHeaderInfo - More comprehensive version of icmReadObjectFileHeader
  icmReadObjectFileInfo       - Get a list of regions to be loaded.
  Function to load a program with an external offset
  icmLoadProcessorMemoryOffset()

- New function icmMapExternalNativeMemory allows memory regions to be created
  that are accessed either by callback function or as direct memory for read
  or write, if the corresponding callback is NULL.
  
- New function icmGetFaultAddress returns the fault address associated with any
  processor with a stopReason which is one of:
      ICM_SR_RD_PRIV
      ICM_SR_WR_PRIV
      ICM_SR_RD_ALIGN
      ICM_SR_WR_ALIGN
      ICM_SR_FE_PRIV
      ICM_SR_RD_ABORT
      ICM_SR_WR_ABORT
      ICM_SR_FE_ABORT

###############################################################################
##                                                                           ##
## Date 2014-April-25                                                        ##
##                                                                           ##
## Release 20140430.0                                                        ##
##                                                                           ##
###############################################################################

ARM V8 Toolchain support
-------------------------------------------------------------------------------
- $IMPERAS_HOME/lib/$IMPERAS_ARCH/CrossCompiler/AARCH64.makefile.include:

  This may be used to build AArch64 baremetal applications. See the comments in 
  the file for details on how to use it. The executables it creates assumes 
  Arm Angel semihosting is present.
  
- $IMPERAS_HOME/lib/$IMPERAS_ARCH/CrossCompiler/AARCH32.makefile.include:

  This may be used to build AArch32 baremetal applications.  See the comments in 
  the file for details on how to use it. The executables it creates assumes 
  Arm Angel semihosting is present.
  
  Since processors boot into AArch64 mode by default, to run this executable
  directly on a V8 processor you must either boot the processor in AArch32 mode 
  (using the "override_RMR" processor model parameter) or an AArch64 program 
  must switch to AArch32 mode when it jumps to it. 

ARM Cortex-A/R Processor Model
-------------------------------------------------------------------------------
- Exceptions HypervisorCall8 and HypervisorCall20 have been renamed
  HypervisorCall and HypervisorTrap to indicate more clearly their function.
- Mode and exception information has been removed from the root level of MPCore
  cluster processors: it should be present at leaf level only.
- A bug was fixed that could cause a result of 0x01 instead of 0x00 for 
  AArch32 SIMD VQRSHL.U8 and VRSHL.U8 instructions when the shift amount was 
  less than -7.
- A bug was fixed that could cause incorrect rounding and flags on some corner
  cases for the SIMD and VFP Fused Multiply Accumulate instructions 
  vfma/vfms/vfnma/vfnms
- A bug was fixed that could cause the FPSCR.QC (cumulative saturate) flag to 
  be incorrectly set to 1 on certain corner cases of the VQRSHRUN instruction 
  with a signed operand.
- TLB entry cache has been enhanced so that overlapping entries with different
  ASIDs can be held simultaneously.
- For processors with active stage 1 and stage 2 translation tables, stage 1 and
  stage 2 data is now merged into a single TLB entry. Previously, stage 1 and
  stage 2 entries were maintained separately.
- Processor variants of architecture versions ARMv7 and ARMv8 now support
  additional variant-specific configuration signals.
- Processor parameters have been revised so that only parameters relevant to
  the instantiated version are presented.
- Cortex-R4 and Cortex-R4F variants now have additional parameters
  override_ATCMRR and override_BTCMRR that allow implementation-specific TCM
  base addresses and sizes to be set.
- IT blocks now strictly check the legality of instructions within them and
  take an Undefined Instruction exception for invalid instructions (the
  behavior of such instructions is unpredictable according to the ARM ARM, so
  correctly-written code should be unaffected).
- Input signal SLVERR has been added. The value of this signal is used when an
  external abort is generated to set the ExT bit in the DFSR and IFSR registers.
  Previously, this bit was always set to 1.

ARM Cortex-M Processor Model
-------------------------------------------------------------------------------
- A bug was fixed that could cause incorrect rounding and flags on some corner
  cases for the SIMD and VFP Fused Multiply Accumulate instructions 
  vfma/vfms/vfnma/vfnms.
- IT blocks now strictly check the legality of instructions within them and
  take an Undefined Instruction exception for invalid instructions (the
  behavior of such instructions is unpredictable according to the ARM ARM, so
  correctly-written code should be unaffected). 
  
armAngel Semihost Library
-------------------------------------------------------------------------------
- A bug has been fixed which caused incorrect errno values to be set in the 
  armAngel semihost library
- Support for setting errno in executables built with the IAR Embedded Workbench 
  toolchain has been added to the armAngel semihost library.

ICM API
------------------------------------------------------------------------------
- A bug has been fixed that caused the ICM_ELF_USE_VMA flag on 
  icmLoadProcessorMemory() calls to be ignored
  
- icmLoadProcessorMemory now reads the program header flags when loading an
  executable.
  If the execute bit set it uses the processor instruction bus port.
  If the execute bit is clear it uses the processor data bus port.
  (In a platform which connects both ports to the same bus, this has no effect).
  
  icmLoadProcessorMemory accepts a new loader attribute ICM_ELF_SECTION_HDRS.
  When set, the loader loads the section headers rather than the program headers.
  Normally this should not be required.
  
- If you are installing your own loader, note that the loadSection callback
  now requires you to supply an extra argument - the execute bit.
  
VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- Range table objects (created with vmirtNewRangeTable) have been enhanced to
  support overlapping regions. Function vmirtGetLastRangeEntry has been deleted.
  New function vmirtGetNextRangeEntry allows delete-safe iteration over range
  table entries.
- vmirtEvaluateCodeLocation() has been changed.
     It has an extra argument fullFile which points to the fully qualified path
     to the code location.
     both sourceFile and fullFile are now correctly declared as "const char *"
     because they should not be written over by the user.
     sourceLine is now (more precisely) declared as Uns32*.
- vmirtAddArg is a new function used in the same context.
- New functions vmirtAddCommandParse vmiosAddCommandParse vmimmcAddCommandParse
  should not be used until documented.
- vmirtGetLicenseErrString now accepts a name argument which must be the same
  value that was passed to the failing vmirtGetLicense function.
- New function vmirtSetLoadStoreMask has been added which allows load/store
  most-significant address bits to be masked off and either filled with zeros
  or ones. This enables tag bits to be efficiently implemented.

VMI OS SUPPORT FUNCTION INTERFACE (see VMI OS Support Reference documentation)
-------------------------------------------------------------------------------
- vmiosAddCommand vmirtAddCommand vmimmcAddCommand 
  All have a new argument (vmiCommandAttrs attrs) which controls how a command
  is handled in a graphical interface.
  Set to VMI_CT_DEFAULT to maintain existing behavior.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- All memory access functions have been enhanced to support any load/store size
  from 1 to 128 bytes.

Simulator Core
-------------------------------------------------------------------------------
- An issue has been fixed where a call to icmInterrupt when a processor is
  halted caused control to be directed to an attached debugger instead of
  causing return from icmSimulate/icmSimulatePlatform.
- A code generator bug causing incorrect code generation for operations using
  operation vmi_SHRR for operands of width less than 32 bits has been corrected.
- Some corner cases results for floating point fused-multiply-add operations
  have been corrected. In fused mode, the operations are now implemented as
  follows:
    vmi_FMADD:      d <- ( a * b) + c
    vmi_FMSUB:      d <- ( a * b) - c
    vmi_FNMADD:     d <- (-a * b) - c
    vmi_FNMSUB:     d <- (-a * b) + c
    vmi_FMSUBR:     identical to vmi_FNMSUB
  In fused mode, all arithmetic operations are performed at infinite precision
  followed by a single rounding event at operation completion.
- New floating point ternary operation types vmi_FMADDH, vmi_FMSUBH and
  vmi_FMSUBRH have been added. These are equivalent to vmi_FMADD, vmi_FMSUB and
  vmi_FMSUBR except that they also perform a final halving operation. In fused
  mode, they are therefore implemented as:
    vmi_FMADDH:     d <- (( a * b) + c) / 2.0
    vmi_FMSUBH:     d <- (( a * b) - c) / 2.0
    vmi_FMSUBRH:    d <- ((-a * b) + c) / 2.0
- New floating point unary operation type vmi_FAWAY has been added. This
  implements IEEE754-2008 round-to-nearest, tie-away rounding.
- New rounding mode vmi_FPR_AWAY has been added. This implements IEEE754-2008
  round-to-nearest, tie-away rounding.
- Floating point QNaN result handlers have been enhanced to allow return of
  non-NaN results. If such a result is returned, an Illegal Operation is not
  signaled.
- Allow virtual mapping to be made where the page address is not aligned to
  the size of the page being mapped.

Generated Peripheral Model File Naming
-------------------------------------------------------------------------------
- The peripheral model source code generated by iGen naming has changed. 
  Please be aware that the generated files of form pse.* are now given a model
  specific name.
  For example for the peripheral LcdPL110: pse.igen.h is now LcdPL110.igen.h
- The files named *.macro.igen.h are now named *.macros.igen.h for consistency.

TLM Interface
-------------------------------------------------------------------------------
  - Transaction tracing. With tracing turned on, the OVP TLM Processor
    interface prints more information:
    * data referenced by the TLM data pointer
    * DMI requests and answers
    * Which processor port is acting as TLM initiator.
    
  - DMI is now negotiated on debug as well as transport transactions.
  - DMI negotiation is now attempted only once for each region, until the 
    region is invalidated.
    
  - The OVP MMC interface no longer modifies the transaction data pointer
    (in violation of the TLM protocol).
    
  - Prototype of method icmCpuMasterPort::mapLocalMemory has changed to
    void mapLocalMemory(Addr lows, Addr high, icmBusObject* &localBus);
    
    This fixes a problem that made it impossible to use local memory for
    a region required by both instruction and data ports. See
    OVPsim_Using_OVP_Models_in_SystemC_TLM2.0_platforms.pdf.

###############################################################################
##                                                                           ##
## Date 2014-January-24                                                      ##
##                                                                           ##
## Release 20140127.0                                                        ##
##                                                                           ##
###############################################################################

OVP BHM PPM Function Reference Manual
-------------------------------------------------------------------------------
Several errors have been fixed and additional clarifications have been added to
Section 8 Serial Device Support. 

MIPS32 Processor Model
-------------------------------------------------------------------------------
- A new interAptivUP variant has been added to the mips.ovpworld.org mips32 
  model.
- A new integration support pseudo-register "stop" has been added. When written
  with non-zero, this stops the processor executing. The purpose of the register
  is to allow integration with debuggers that expect to be able to stop
  individual cores in a multicore platform while allowing simulation to continue
  on other cores.

IMPORTANT!   ICM API object names
-------------------------------------------------------------------------------
Named objects (nets, buses, FIFOs, processors, peripherals, memories, ports,
parameters, platforms) must use legal characters in their names.
This is now enforced. Legal characters are : A-Z a-z, 0-9 _
Please ensure that calls to icmNewProcessor() etc. use legal names.

Remote Debug
-------------------------------------------------------------------------------
The remote debug interface has changed. In the event of the debugger (gdb, mpd,
or other debugger) crashing or causing a protocol error, the simulator will no
longer exit in all cases. Where possible the simulator will stop and wait for a
new connection. If this happens, simply restart the debugger and reconnect to
the same port number as before.

Powerpc32 ISA Model
-------------------------------------------------------------------------------
The LWARX/STWCX have been enhanced to work in a multiprocessor environment.
Whenever a reserved location is accessed by another processor during a load
store sequence. The store will fail in the correct manner in a multiprocessor
platform.

ARM Cortex-A Processor Model
-------------------------------------------------------------------------------
- The processor model parameter 'override_genericTimerScale' has been renamed
  to be 'override_timerScaleFactor' and now applies to the mpCore local, 
  private and watchdog timers in the A5 and A9 models as well as the generic  
  timers in the A7 and A15 models that it previously applied to. 
  
  When this value is not overridden the timing is unchanged from previous 
  simulator versions. With this change the mpCore timer frequency may now be
  controlled in all cases.
  
- The CNTFRQ register in models that implement generic timers (currently just
  the A7 and A15 models) is now initialized at reset to the timer clock 
  frequency that is being modeled. This frequency may be changed using the 
  'override_timerScaleFactor' parameter described above.
  
- MPCore block global, generic and event timers are now modeled more accurately
  using monotonic timers (see new function vmirtCreateMonotonicModelTimer)

- Added an artifact register 'transactAT' that returns the access type of any
  active memory transaction, encoded as:
  0: virtual address;
  1: physical address (from TLB pagewalk).

- Uncooked disassembly mode includes a new keyed field "IS" giving the
  instruction set of the decoded instruction. Possible values are:
    "32" (for traditional 32-bit instruction)
    "T"  (for Thumb instruction)

- Disassembly of bkpt and svc instructions has been modified to conform to the
  ARM ARM. Previously, these instructions were disassembled in the form:
    svc     0x1234
    bkpt    0x123
  The revised form includes the # constant identifier:
    svc     #0x1234
    bkpt    #0x123

- Descriptions of system registers in the processor documentation have been
  improved.

ARM Cortex-M (armm) Processor Model
-------------------------------------------------------------------------------
- Interrupt inputs now properly latch an input edge rather than ignoring an 
  interrupt if it lowered before it became active. Previously a pulse triggered
  input could be modeled by writing 1's to the interrupt net to simulate a
  pulse, and never writing a 0. This did not allow proper modeling of level 
  sensitive interrupts, so now a pulse must be modeled by writing a 1  
  followed by writing a 0. The 0 may follow immediately - there is no need to 
  simulate for any cycles in between. 
  
- Level sensitive interrupts are now fully supported:
  Interrupt inputs that remain high upon the return from the service routine 
  will now properly cause a new interrupt exception. Previously this would
  only happen if a 1 was written again to the interrupt net once the interrupt 
  went active.
  
- A bug has been fixed where writes to NVIC_ICPRx registers would improperly 
  clear the pending state when the interrupt input was asserted. The 
  architecture specifies that the pending state should not be cleared by writes  
  to NVIC_ICPR when the corresponding interrupt input is still asserted.
  
- A bug has been fixed where writes to SHCSR did not cause the current execution
  priority to be updated if active bits changed state as a result.

- Uncooked disassembly mode includes a new keyed field "IS" giving the
  instruction set of the decoded instruction. This is always "T" because
  Cortex-M processors implement only the Thumb instruction set.

MIPS Processor Model
-------------------------------------------------------------------------------
- CMP block programmable interrupt timers are now modeled more accurately using
  monotonic timers (see new function vmirtCreateMonotonicModelTimer)

- A bug has been fixed in which values of floating point registers accessed
  using the debug interface at the VPE level of a processor with a
  single-threaded FPU were not correctly returned.

Nios_II Processor Model
-------------------------------------------------------------------------------
During a TLB read, the line field of pteaddr.VPN was incorrectly being 
overwritten. This has now been fixed

ICM API
------------------------------------------------------------------------------
Two new arguments required:

void icmCLParserAdd (
    icmCLPP       parser,
    const char*   name,
    const char*   shortName,
    const char*   argDesc,
    const char*   group,       <-- name of group (clarifies -help output)   
    icmCLPArgType type,
    icmArgTypes   pointer,
    const char*   description,
    Uns32         useMask,
    Uns32         userData,
    Bool          mandatory    <-- if set, this argument _must_ be supplied
)

New function provides a usage message, printed by -help or if an error occurs.

void icmCLParserUsageMessage(icmCLPP parser, const char *message)

VMI API
-------------------------------------------------------------------------------
- Processor parameter value size callback (entry paramValueSizeCB in the
  vmiIASAttr structure) now takes an additional "variant" argument, which is
  the requested processor variant (or NULL, if no variant is being requested).
  The variant can be used to configure the presented parameters so that they
  are variant-specific.
- New field 'Bool QLQualified' added to the 'vmiProcessorInfo' structure. Set
  this to True if your model is qualified to run with QuantumLeap.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmimtAtomic allows identification of atomic instructions and
  similar constructs, allowing processor models to be used with the QuantumLeap
  parallel simulation algorithm.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmirtGetProcessorIPS returns the nominal instructions-per-second
  for a processor (i.e. the instructions-per-second implied by the "mips"
  processor parameter at creation.
- New function vmirtCreateMonotonicModelTimer allows the creation of monotonic
  timers. Monotonic timers are guaranteed to present a consistently-increasing
  view of system time to a processor mode.
- Semantics of timer operation have been clarified (refer to the documentation).

Simulator Core
-------------------------------------------------------------------------------
- A code generator bug causing incorrect execution of conditional instructions
  under some circumstances has been fixed. The bug was introduced in Release
  20131018.0.
- Arithmetic exceptions that are not generated by processor models are now
  handled like other exceptions (i.e. they generate a standard abort message or
  are routed to previously-installed numeric exception handlers).
- A new simulation algorithm (QuantumLeap) allows multicore platforms to
  simulate in parallel on multiple cores of the host machine. See the OVPsim and
  Imperas CpuManager User Guide for more information.
- OVP now supports up to 4 instruction type intercepts per processor, which
  allows limited semihosting based on instruction type to be used with OVP.
  This allows ARM AngelTrap semihosting to be used with OVP (previously, this
  semihosting was available only with Imperas Professional products).
- Function vmirtDisassemble is now available for use with OVP. This enables
  semihost libraries that require instruction type decode to be used with OVP.
- Verbose mode simulation time statistics have been improved so that time taken
  at a debug prompt does not distort results.
- When control files are enabled, a new option -o0 is implemented that
  disables aggressive JIT compiler optimizations.

ARM AngelTrap Semihosting
-------------------------------------------------------------------------------
- The armAngel semihosting library which is loaded and used in an example 
  platform BareMetalArmCortexASingleAngelTrap have been moved to the 
  arm.ovpworld.org vendor in the Imperas VLNV library.
- The demo Imperas_angeltrap_arm_icm has been renamed and made available
  in the OVP demo packages OVPsim_demo_arm and OVPsim_demo_arm_Cortex-A as
  a statically built demo OVPsim_single_angeltrap_arm_Cortex-A9UP.

terminal.exe
-------------------------------------------------------------------------------
- Fixed a bug which caused this program to consume excess CPU time at the end
  of simulation. (this program allows the user to communicate with a UART
  model in some Demos and Examples).

###############################################################################
##                                                                           ##
## Date 2013-December-05                                                     ##
##                                                                           ##
## Release 20131018.1                                                        ##
##                                                                           ##
###############################################################################

Rerunning a platform with peripheral model system events
-------------------------------------------------------------------------------
- Fixed a bug which caused a crash when attempting to use
  icmInit and icmTerminate in a platform containing a peripheral model that
  uses system events.

ELF File Reader
-------------------------------------------------------------------------------
The ELF File reader has been altered to use the program headers in preference
to the section headers. If there are no-program headers then the section 
headers are used to load memory.
By default the LMA addresses are used for placement, if the ELF requires that
the VMA addresses are used, then this can be overridden using the command line
flag --elfusevma, or the ICM API call icmLoadProcessorMemory() can be
configured to use the VMA addresses in the attrs argument setting the 
value ICM_ELF_USE_VMA.

ARM Cortex-A Processor Model
-------------------------------------------------------------------------------
- The maximum interrupt lines setting of the ITLinesNumber field of the 
  GICD_TYPER register for the Cortex A7 variant that can be specified using the
  parameter 'override_GICD_TYPER_ITLines' has been corrected to support a 
  maximum value of 15.
- The maximum value allowed by the simulation model for the 
  GICD_TYPER.ITLinesNumber field on the Cortex-A5 variant has been corrected to
  be 7 rather than 15. 
  CAUTION: This was a bad fix that is still present in branch at 20130630.6

MIPS Processor Model
-------------------------------------------------------------------------------
- A bug has been fixed which caused incorrect behavior for configurations with
  a CMP block and only one processor (GCR_CONFIG.PCORES=0).

Host Compilers
-------------------------------------------------------------------------------
The versions of Host compilers used to build libraries and models have been
upgraded to the following versions
Linux32   : 4.5.2 i686-nptl-linux-gnu (Crosstool-NG)
Linux64   : 4.4.3 x86_64-unknown-linux-gnu  (Crosstool-NG)
Windows32 : 4.4.7 (mingw32)
Windows64 : 4.4.7 (mingw64)

###############################################################################
##                                                                           ##
## Date 2013-October-23                                                      ##
##                                                                           ##
## Release 20131018.0                                                        ##
##                                                                           ##
###############################################################################

Nios_II Processor Model
-------------------------------------------------------------------------------
The Nios_II /F /S /E processors are now supported.
The model includes full support for the configuration options to control
MMU(Associativity & Size), MPU, MUL, MULX, DIV.
In addition a reference platform has been created to boot Linux, this is 
based around a Cyclone_III 3c120 configuration

New Freescale Vybrid VF5 and Kinetis K60 Platforms
-------------------------------------------------------------------------------
New platforms have been added for the Freescale Vybrid VF5 and Kinetis K60
SOCs. These have sufficient functionality to boot the MQX RTOS. Uarts are 
modeled to sufficient detail to be usable, but no other peripherals are 
modeled.

ARM Processor Model
-------------------------------------------------------------------------------
- The Cortex-A15 and Cortex-A7 models no longer emit the following bogus 
  warning when certain TLB Maintenance instructions are used in a processor 
  that implements the Multiprocessing Extensions:
  "Warning (ARM_CP_TLBMBD1)...TLB maintenance broadcast disabled by ACTLR.FW=0"
- The Cortex-A5 model secure mode ICDDCR register now properly supports the
  Enable Non-secure bit (bit 1). Previously this bit was incorrectly RAZ/WI.
- The Cortex-A7 model has been corrected so that the SDIV and UDIV instructions
  are enabled by default
(following is also included in patched branch 20130630.5)
- The maximum value allowed by the simulation model for the 
  GICD_TYPER.ITLinesNumber field on the Cortex-A7 variant has been corrected to
  be 15 rather than 7.
  
ELF reader
-------------------------------------------------------------------------------
The ELF reader has been modified so that it now loads to Load Memory Addresses 
(LMA) by default rather the Virtual Memory Addresses (VMA). 

In most ELF files the LMA is the same as the VMA so there will be no change in
behavior. 

The LMA differs from the VMA in ELF files when data is to be copied by a 
program's startup code, usually from ROM to RAM. The icmLoaderAttrs
ICM_LOAD_PHYSICAL enum (or --loadphysical command line option) was sometimes 
used to get ELF files that had a different LMA to work. This option has other 
side effects that can cause problems, and should no longer be used except 
in the rare architectures that actually do specify physical addresses in the 
ELF file.

If the previous behavior of using the VMA address is needed you may use the 
icmLoaderAttrs ICM_ELF_USE_VMA value. There is also a command line option, 
--elfusevma that has the same effect.
  
Demos/Examples
-------------------------------------------------------------------------------
- NEW Demo/OVPsim_Linux_QuadArmVersatileExpress_arm_Cortex-A15MP
    Instantiates 4 quad core ARM Cortex-A15MPx4 processors in platforms; each 
    ARM Cortex-A15MPx4 runs a separate Linux kernel

- NEW Demo/OVPsim_Linux_Altera_CycloneV
    Platform representing the Altera CycloneV platform; runs a Linux kernel on 
    an ARM Cortex-A9MPx2

- NEW Demo/OVPsim_single_Nios_II, OVPsim_multicore2_Nios_II, OVPsim_manycore24_Nios_II
    Shows baremetal applications on platforms with one to many Nios II processors

- NEW Demo/OVPsim_Nios_II_tlm2.0
    Shows baremetal applications running on a SystemC TLM2.o platform with Nios II

- NEW Examples/Platforms/ARM_specific/trustzone
    NOTE: This example requires the Imperas Professional Simulator to run 
    A number of examples showing the support for ARM TrustZone in OVP processor
    models and how this is realized in an OVP platform. 
        1.ignoreTrustZone
        2.alwaysSecure
        3.alwaysNonSecure
        4.programControl

- UPDATE Demo/OVPsim*_arm_Cortex-A7UP demos have been updated to correctly build 
    and execute a Cortex-A7 application.
  
POWERPC32 Processor Model
-------------------------------------------------------------------------------
(following is also included in patched branch 20130630.2)
Model Enhanced to support instructions wrtee and wrteei
(following is also included in patched branch 20130630.4)
Added 2 new Parameters to control unimplemented instructions
UNIMP_TO_NOP, WARN_NOP
UNIMP_TO_NOP=True - map all unimplemented instructions to NOP
WARN_NOP=True     - warn on any mapped instructions to NOP
also all cache instructions have been mapped to NOP

Imperas ARM TrustZone Platform Modeling Application Note
-------------------------------------------------------------------------------
A new application note describing an efficient technique for modeling platforms
implementing ARM TrustZone-aware peripherals has been added. See:
  doc/appnotes/Imperas_ARM_TrustZone_Platform_Modeling_Application_Note.pdf
  
Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which caused incorrect operation when a breakpoint was
  placed in an ARM Thumb "if-then" block. Under some circumstances, instructions
  executed on resumption after the breakpoint would be executed unconditionally.
- A bug has been fixed which caused an assertion when simulating mask-generating
  floating point comparison operations (e.g. vmi_FQCMPEQ) with DAZ enabled in
  the floating point control word when one of the two operands is denormal.
- A bug has been fixed which caused incorrect behavior in 32-bit hosts for a
  64-bit integer divide-by-zero when the processor model integer exception
  handler returned VMI_INTEGER_CONTINUE.
(following is also included in patched branches 20130630.2/20130315.5)
- A bug has been fixed which caused incorrect behavior for indirect branch
  instructions in which the branch target register is the same register as the
  link register and the code block containing the branch instruction is
  physically-mapped (relocatable).
(following is also included in patched branches 20130630.2/20130315.6) 
- A bug which could in rare circumstances cause a crash on 64 bit hosts of a
  simulation using very large amounts of memory has been fixed.

New ArmVersatileExpress-CA9 Platform
-------------------------------------------------------------------------------
A new platform, ArmVersatileExpress-CA9, has been added to arm.ovpworld.org.
The new platform has the following changes:
- Explicitly identifies which ARM Versatile Express daughterboard (CA9) is being
  modeled. Other daughterboards are modeled in separate OVP platforms.
- Now models the TrustZone Peripheral Controller to allow restriction of
  non-secure accesses to certain peripherals
- Uses the iGen platform generator to create the platform from a tcl description
- Command line options have been enhanced to allow much more extensive control 
  of the simulation from the platform command line then the deprecated platform.
The existing ArmVersatileExpress platform has been deprecated. 

dynamicBridge peripheral
-------------------------------------------------------------------------------
A new dynamicBridge peripheral has been added which dynamically creates and 
removes a bridge between an input slave port and an output master port under  
control of an input net. This may be used for dynamically controlling access to
a peripheral for specific addresses, e.g. for Arm TrustZone implementations.

dummyPort peripheral
-------------------------------------------------------------------------------
The dummyPort peripheral has been moved from altera.ovpworld.org to ovpworld.org.
This should not require any changes to platforms using it unless the vendor
was explicitly specified.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmimtValidateBlockMaskR allows any processor register to be used
  for block mask validation. Previously, only a single 32-bit built-in block
  mask register was available.
- Function vmimtSync has been renamed vmimtYield, for consistency with the
  equivalent vmirtYield.
- New function vmimtInterrupt causes simulation to stop on completion of the
  current simulated instruction and return to the calling context (the
  icmSimulate or icmSimulatePlatform invocation).
- All floating-point morph-time SIMD functions now support any repeat in the
  range 1..16.
- New function vmimtAtomic can be used to specify that the current instruction
  must be executed atomically in a multiprocessor simulation.
 
VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New function vmirtInterrupt causes simulation to stop on completion of the
  current simulated instruction and return to the calling context (the
  icmSimulate or icmSimulatePlatform invocation).
  
ICM API
-------------------------------------------------------------------------------
- ICM is now Version 2.0.0 :

- The callback for icmIterUserAttributes() now has an extra Boolean parameter,
  which is true if the attribute has been set in the platform.
  
- icmSetPlatformName has been deprecated.
  To initialize ICM and set the platform name, please use:
      icmInitPlatform(ICM_VERSION, simAttrs, protocol, port, platformName);
      
- ICM now strictly checks that an initialization function is called before
  other functions (and does not load the simulator until one of these functions
  is called).
  It is permissible to call any of these functions first:
      icmInit()               (deprecated)
      icmInitPlatform()       (replaces icmInit)
      icmSetEndSchedFn()      (deprecated)
      icmSetDebugNotifiers()  (replaces icmSetEndSchedFn)
      icmOverride()
      icmPrintf()
      icmMessage()
      icmIgnoreMessage()
      icmCLParser()
      icmCLParseStd()
      
- icmConnectProcessorNet(processor, net, portname, direction)
  and
- icmConnectPSENet(pse, net, portname, direction)
  These functions now ignore the direction argument. Please set this to 0.
  The direction is taken from the model.
- icmNewPSE(name, modelFile, attributelist, semiHostFile, semiHostSymbol)
  The semiHostFile argument is now not required in most cases because a peripheral model
  automatically loads its own extension library. 
  The semiHostSymbol argument is always ignored.
  
- ICM Command line parser has a new function which can be used to parse the command line
  when only standard arguments are required:
  icmCLParseStd(const char *exeName, icmCLPArgClass args, int argc, const char *argv)
  
  icmCLParser now takes an enumerated type to select which standard arguments to parse.

PPM API
-------------------------------------------------------------------------------
- The modelAttrs structure which was optional is now mandatory. It is used to:
  define bus ports, net ports and parameters used by the model, and to load
  the model's extension library if one is required.
  When created by igen, this structure is written automatically.
  Please refer to the documentation or, for an example, see
     Examples/Models/Peripherals/creatingDMAC/4.interrupt/dmac.attrs.igen.c

ARM Cortex Toolchain Support
-------------------------------------------------------------------------------
- The support makefile.include files, for example ARM_CORTEX_A15.makefile.include
  have been updated to support CodeSourcery Lite GCC toolchains release version
  2013.05-23 available from
  http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition
   
  
###############################################################################
##                                                                           ##
## Date 2013-October-14                                                      ##
##                                                                           ##
## Release 20130630.5                                                        ##
##                                                                           ##
###############################################################################

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which caused incorrect operation when a breakpoint was
  placed in an ARM Thumb "if-then" block. Under some circumstances, instructions
  executed on resumption after the breakpoint would be executed unconditionally.

ARM Processor Model
- The maximum value allowed by the simulation model for the 
  GICD_TYPER.ITLinesNumber field on the Cortex-A7 variant has been corrected to
  be 15 rather than 7.
  
###############################################################################
##                                                                           ##
## Date 2013-Sept-17                                                         ##
##                                                                           ##
## Release 20130630.4                                                        ##
##                                                                           ##
###############################################################################

POWERPC32 Processor Model
-------------------------------------------------------------------------------
Added 2 new Parameters to control unimplemented instructions
UNIMP_TO_NOP, WARN_NOP
UNIMP_TO_NOP=True - map all unimplemented instructions to NOP
WARN_NOP=True - warn on any mapped instructions to NOP
also all cache instructions have been mapped to NOP

###############################################################################
##                                                                           ##
## Date 2013-Sept-11                                                         ##
##                                                                           ##
## Release 20130630.3                                                        ##
##                                                                           ##
###############################################################################

POWERPC32 Processor Model
-------------------------------------------------------------------------------
Model Enhanced to support instructions wrtee and wrteei

###############################################################################
##                                                                           ##
## Date 2013-August-27                                                       ##
##                                                                           ##
## Release 20130630.2                                                        ##
##                                                                           ##
###############################################################################

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which caused incorrect behavior for indirect branch
  instructions in which the branch target register is the same register as the
  link register and the code block containing the branch instruction is
  physically-mapped (relocatable).
- A bug which could in rare circumstances cause a crash on 64 bit hosts of a
  simulation using very large amounts of memory has been fixed.

###############################################################################
##                                                                           ##
## Date 2013-July-30                                                         ##
##                                                                           ##
## Release 20130630.1                                                        ##
##                                                                           ##
###############################################################################

IMPERAS_PROXY_SERVER
-------------------------------------------------------------------------------
Some users reported that access through the IMPERAS_PROXY_SERVER was not 
working correctly. This was identified as the HTTP protocol not being
specified, this is now corrected

###############################################################################
##                                                                           ##
## Date 2013-July-08                                                         ##
##                                                                           ##
## Release 20130630.0                                                        ##
##                                                                           ##
###############################################################################

###############################################################################
##                                                                           ##
## Date 2013-August-23                                                       ##
##                                                                           ##
## Release 20130315.6                                                        ##
##                                                                           ##
###############################################################################

Simulator Core
-------------------------------------------------------------------------------
- A bug which could in rare circumstances cause a crash on 64 bit hosts of a
  simulation using very large amounts of memory has been fixed.

###############################################################################
##                                                                           ##
## Date 2013-August-19                                                       ##
##                                                                           ##
## Release 20130315.5                                                        ##
##                                                                           ##
###############################################################################

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which caused incorrect behavior for indirect branch
  instructions in which the branch target register is the same register as the
  link register and the code block containing the branch instruction is
  physically-mapped (relocatable).

*******
PPM API
-------------------------------------------------------------------------------
- Added a Boolean artifactAccess to read and write callbacks. Use this to
  prevent side effects in peripherals when accessed by a debugger or the
  simulator reading ahead during code translation.
  (code written using callback macros need not be changed).

ICM API
-------------------------------------------------------------------------------
- Added a function icmOverride(const char *attributePath, const char *value)
  which has the same effect as (or overrides) icmAddStringAttr.
  Can be called after icmInit but before any objects are constructed, allowing
  attributes to be set separately from construction.
- Added standard command line parser.
  Functions:
    icmCLParser     create a parser
    icmCLParserAdd  add an argument top be parsed by the CLP
    icmCLParseArgs  parse an argc,argv list
    icmCLParseFile  parse a file of arguments (CpuManager only)
  These macros define prototypes for callbacks used by CLP:
    CLPA_BOOL_FN 
    CLPA_INT_FN 
    CLPA_UNS64_FN 
    CLPA_DOUBLE_FN 
    CLPA_STRING_FN
    CLPA_STRINGS_FN
- Added function icmAddBoolAttr(icmAttrListP list, Bool value) to support
  setting Boolean parameters on processors and peripherals.
- icmSetSchedFn has been deprecated; this new function replaces it:
      typedef struct icmDebugNotifierS { 
        icmStartSimFn     start;           // Called once at start of simulation
        icmEndSchedFn     sched;           // Called after each application
                                           // processor has run one time-slice
        icmEndSchedFn     schedPSE;        // Called after each PSE has run
        icmTimeAdvanceFn  advance;         // Called when time advances
        icmFinishFn       finish;          // Called once at end of simulation
        void              *userData;       // Passed to each callback
      } icmDebugNotifier, *icmDebugNotifierP;
      icmSetDebugNotifiers(icmDebugNotifierP notifiers)
- Symbol tables added by icmLoadSymbols are now considered for a possible match
  (for labels in trace and interception) *before* symbols implicitly added by
  icmLoadProcessorMemory; previously, the order was reversed. This affects the
  symbol selected when both symbol file and object file contain a candidate
  for a particular address.

Semihost libraries
-------------------------------------------------------------------------------
- Fixed bug that could cause an abort from a microblaze semihosted newlib
  function calls that returned an error.
- Revamped all newlib semihosting libraries to clean up error handling. The
  errno value is now set to the proper value when an error occurs for both
  reentrant and non-reentrant version of newlib.
- All newlib semihost libraries now use a single code base defined in:
    ImperasLib/source/ovpworld.org/semihostSupport/1.0/model/newlibSemihost.c.h
- All newlib semihost files now support interception of at least the following 
  functions:
        exit(), open(), close(), read(), write(), lseek(), fstat(), lstat(), 
        stat(), kill(), gettimeofday(), times(), unlink() and time()

TLM Processor Classes
-------------------------------------------------------------------------------
The following additional optional arguments have been added to the class 
constructors for the icmCpu class and each specific processor's SystemC  
TLM class:

        Uns32 addressBits (defaults to 32)
        bool  dmi         (defaults to true)
        Uns32 cpuFLags    (defaults to 0)

Previously these values could not be set from an instantiation of a processor
in a C++ or SystemC TLM platform. Now the user may specify the values to be 
used. (These have default values defined for them and thus are optional 
arguments, so no changes to existing platforms are necessary.)


doc/ovp/OVPsim_Using_OVP_Models_in_SystemC_TLM2.0_Platforms.pdf
-------------------------------------------------------------------------------
The example used in the SystemC TLM2.0 documentation has been enhanced to show
an example of driving a processor's reset input as well as specifying an 
attribute for a peripheral.

Some references to obsolete file names and function definitions have been 
cleaned up in this document.

C++ ICM C API Export
-------------------------------------------------------------------------------
Expanded the getPC and setPC functions to better support MP processors  

ARM Processor Model
-------------------------------------------------------------------------------
- Implemented an uncooked disassembly format to simplify downstream tools.
- The model has been updated to use the new floating point FPU configuration
  structure (see Simulator Core changes below)
- Fixed errors in names of 2 MPCore registers:
    ICCIDR  changed to ICCIIDR
    ICDGRPR changed to ICDISR
  (only cores where the version 1 GIC is present are affected: Cortex-A5* and
   Cortex-A9*)
- The SCTLR CP15 register RR field was incorrectly implemented as R/W. It is 
  now correctly implemented as RAZ/WI
- The SCTLR CP15 register Z field was incorrectly implemented as RAZ/WI. It is 
  now correctly implemented as RAO/WI

ARMM Processor Model
-------------------------------------------------------------------------------
- Implemented an uncooked disassembly format to simplify downstream tools.
- The model has been updated to use the new floating point FPU configuration
  structure (see Simulator Core changes below)
- Added read-only integration pseudo-register 'executionPRI', which gives the
  current processor execution priority.
- Added read-only integration pseudo-register 'stackDomain', which gives the
  memory domain used to store the stack with the current execution priority.
- Fixed bug that caused a hard fault to occur when interrupts were enabled 
  while an interrupt input was active but the interrupt was disabled.

MIPS Processor Model
-------------------------------------------------------------------------------
- The microMips32 FPU instructions are now supported.
- Implemented an uncooked disassembly format to simplify downstream tools.
- The model has been updated to use the new floating point FPU configuration
  structure (see Simulator Core changes below)
- On 4k-derived variants, mul instruction now properly leaves an intermediate 
  result in HI/LO registers.
- Divide by zero sets Hi/LO to predefined values, to match hardware.
- Some variants do not translate address of CACHE Index operations via TLB,
  thus not generating TLB exceptions. A "cacheIndexBypassTLB" parameter has
  been added to control this feature and set on the appropriate variants.
- Configuration of microAptiv and proAptiv updated to match hardware.
- COP0 Config4/Config5/Config6 implemented on appropriate variants.
- Fixed bug in UDI: inadvertent modification of register $zero.
- New attributes added for more detailed control of CPU configuration:
    config3BP, config3BI, config3VZ, config5NFExists, configMDU, 
    configMM, intctlIPFDC.
- Cache invalid tag changed to match the hardware (1 instead of all-ones).
- Corrected cache behavior when all lines are locked - using a direct 
  transaction to memory.
- Implemented cache WST and DYT operations.
- Added support for COP0 registers:
    BadInstr, BadInstrP, KScratch1-6, NestedEPC, NestedExc
- Reserved bits of SegCtl0-2 made read-only.
- Bits Status.SR and Status.RE changed to read-only.
- Fixed validation of EVA address.
- Fixed functions prologues: incorrect register bank selection.
- Fixed incorrect ISA mode switching on Debug exception.
- Take exception when a restricted instruction is executed in branch delay 
  slot.  Needed to match a real hardware.
- LLAddr register changed to match hardware (address is now left shifted by
  the cache line size bits.
- Registers SRSCtl and SRSMap made always available, but read-only until 
  enabled by SRSCtl.HSS.
- Multi-region SPRAM supported.
- When FTLB disabled, Config4.MMUExtDef and Config4.MMUConfig are set to 
  predefined value (not zero).
- Mode Config.MT==MT_FMM is supported as one of valid TLB MMU modes.
- Added parameter fcsrABS2008 (enables IEEE-754-2008 ABS/NEG behavior).
- Added parameter fcsrNAN2008 (enables IEEE-754-2008 recommended QNaN/SNaN
  format).
- Added parameter supportDenormals (indicates that the processor FPU is able
  to support denormal arguments and results instead of taking an Unimplemented
  Operation exception).
- Annulled delay slot instructions now do not cause fetch-related exceptions
  (e.g. TLB miss).

POWERPC32 Processor Model
-------------------------------------------------------------------------------
- The powerpc32_400 processor model has been added as a new processor model for
  vendor power.ovpworld.org. This model supports variants m440, m460, m470 and
  m476. Please examine the processor specific documentation for further 
  information.

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed which caused the native MXCSR register not to be
  preserved over a call to icmSimulate or icmSimulatePlatform.
- A bug has been fixed which caused processor read and write abort handler
  functions to be called even when simulated exceptions are disabled. These
  functions are now called only if simulated exceptions are enabled.
- A bug has been fixed in which calls to icmSetProcessor*WatchPoint functions
  could cause a segfault if executed before start of simulation.
- The way that component names are reported has changed. Previously, processor
  and peripheral names were sometime reported as a full hierarchical name,
  including the platform name, and sometimes reported as a non-hierarchical
  processor or peripheral name only. Now, names are always reported as full
  hierarchical names when a platform name has been set using icmSetPlatformName.
  Specifically, these cases are changed:
  - processor names in trace output are hierarchical;
  - processor name returned by vmirtGetProcessorName is hierarchical;
  - file names of peripheral replay files or peripheral output files are now
    the full hierarchical name with '/' characters converted to '_'.
  This has changed the specification of processor names in control files; do
  not put a leading '/' on a controlfile specification.
- A bug has been fixed that caused some underflow cases not to be reported for
  floating point operations using X87 types and some ternary operations.
- Semantics of floating-point ternary operations have been improved. Previously,
  with roundInt=False, these operations always performed calculations rounding
  intermediates to 80-bit precision. Now, when using IEEE argument types,
  multiply result intermediates are represented to infinite precision. This
  means that such operations now correspond to the IEEE fused-multiply-add
  definition.
- Environment variable IMPERAS_LOOP_ON_EXCEPTION has been added which, if set
  to 1, causes the simulator to enter a wait loop on an assertion failure or
  uncaught signal, allowing a debugger to be attached to the simulator
  process to debug the cause of the fault.

VMI API
-------------------------------------------------------------------------------
- Function of type vmiIFetchFn declared using the VMI_IFETCH_FN macro now takes
  an additional Boolean argument 'annulled' indicating whether the instruction
  fetch is for an annulled delay slot instruction.
- Functions of type vmiDisassFn and vmiosDisassFn declared using the
  VMI_DISASSEMBLE_FN and VMIOS_DISASSEMBLE_FN macros, respectively, now take
  an additional argument of type vmiDisassAttrs. This argument is one of:
      DSA_NORMAL    (indicating normal disassembly is required)
      DSA_UNCOOKED  (indicating "uncooked" disassembly is required)
      DSA_MODEL     (indicating other model-specific disassembly is required)
  "Uncooked" disassembly should return components of a decoded instruction in
  a form that can be easily parsed by intercept libraries.
- A Boolean field 'noTraceChange' has been added to the vmiRegInfo structure; if
  True, the associated register is not traced when change tracing is enabled.
- The arithmetic exception handler ('arithExceptCB' entry in the vmiIASAttrs
  structure) now handles integer exceptions only. Floating point exceptions are
  now routed to a new floating point exception handler 'fpArithExceptCB' of type
  vmiFPArithExceptFn in the processor FPU configuration (type vmiFPConfigCP).
- Types vmiNumericExceptionType and vmiNumericExceptionResult have been
  replaced with new types vmiIntegerExceptionType and vmiIntegerExceptionResult,
  clarifying the new behavior that the arithmetic exception handler is now
  called for integer exceptions only.
- QNaN result handler function types vmiFPQNaN32ResultFn and vmiFPQNaN64ResultFn
  now have additional 'allArgNum' and 'allArgs' arguments which are the total
  operand count for the floating point operation that generates a QNaN result
  and an ordered list of all operands, respectively.
- Tiny handler functions type vmiFPTinyResultFn and vmiFPTinyArgumentFn now have
  additional 'setFlags' arguments which can be used to specify additional
  floating point status flag settings when a floating point operation takes a
  tiny operand or generates a tiny result.
- Floating point type vmiFPNaNArg has been replaced with a more general type
  vmiFPArg. The name change reflects the fact that this type is now used to pass
  information about floating point arguments in general, not just NaN arguments.
  The 'isFlt32' field has been replaced with a more general 'type' field,
  allowing the argument value to be fully interpreted.
- Arguments of type vmiFP80Arg in indeterminate result handlers have been
  changed to type vmiFPArg for consistency with QNaN result handlers.
- Member vmi_FT_64_UNS has been added to enumeration vmiFType, enabling
  conversion between floating point and Uns64 types.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- All floating-point morph-time functions have been updated to take an
  additional 'config' argument of type vmiFPConfigCP, allowing operation details
  to be modified on an operation-specific basis.
- Operations vmi_QABS and vmi_QNEG have been added to the vmiFUnnop enumeration,
  implementing IEEE 754-2008 operations that affect sign bit only and do not
  generate exceptions.
- Operations vmi_FROUNDC and vmi_FLOG2 have been added to the vmiFUnnop
  enumeration.
- vmiFUnnop member vmi_FROUND has been renamed vmi_FNEAREST to make it clear
  that the rounding mode used is round-to-nearest.
- Operations vmi_FMIN, vmi_FMAX, vmi_FSCALEF and vmi_FSCALEI have been added to
  the vmiFBinop enumeration.
- Operations vmi_FQCMPEQ...vmi_FQCMPNOR have been added to the vmiFBinop
  enumeration (quiet comparisons producing bitmask result).
- Operations vmi_FSCMPEQ...vmi_FSCMPNOR have been added to the vmiFBinop
  enumeration (signaling comparisons producing bitmask result).
- Function vmimtFConvertSimdRR has been added (performs SIMD floating point
  conversions).

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- Function vmirtDisassemble now takes an additional argument of type
  vmiDisassAttrs, indicating the required form of the disassembled instruction
  (see above).
- Function vmirtConfigureFPU has been modified to take an argument of type
  vmiFPConfigCP to specify the FPU configuration.
- Function vmirtRestoreFPState has been added, allowing embedded functions to
  obtain a clean environment in which to execute floating point operations.
  Failure to call this prior to execution of floating point code in the embedded
  call could cause the results of that floating point code to be affected by
  simulator floating point instructions executed on the processor making the
  embedded call.

Environment
-------------------------------------------------------------------------------
- A new environment variable, IMPERAS_SHRSUF, has been added to select the file
  extension for shared objects, either Windows dll or Linux so

Build Support Infrastructure
-------------------------------------------------------------------------------
- The build support directory has been moved out of the source directory.
  Files that were found at ImperasLib/source/buildutils can now be found at
  ImperasLib/buildutils 

Example/Platforms/interruptSimulation
-------------------------------------------------------------------------------
- This example was incorrectly using icmInterrupt in a memory callback to 
  interrupt the simulation. In a memory callback, or similar, icmYield should 
  be used to interrupt the simulation. icmInterrupt should only be used in a 
  Control-C handler or similar callback.

###############################################################################
##                                                                           ##
## Date 2013-June-24                                                         ##
##                                                                           ##
## Release 20130315.4                                                        ##
##                                                                           ##
###############################################################################

ARM Processor Model
-------------------------------------------------------------------------------
- The model has been updated to reflect a change in section B3.5.3 of the ARM
  Architecture Reference Manual. Version C of this manual stated that for first
  level page table descriptors with NS=1, the page table is located in
  non-secure memory. Version C.b of this manual states that for such first level
  page table descriptors, the page table is located in physical memory implied
  by the security state in force during the page table walk.

###############################################################################
##                                                                           ##
## Date 2013-May-14                                                          ##
##                                                                           ##
## Release 20130315.3                                                        ##
##                                                                           ##
###############################################################################

ARMM Processor Model 
(These changes failed to make the release branch for the 20130315.2 build)
-------------------------------------------------------------------------------
- Change default callback when reading memory mapped system registers to handle
  any data size
- Modify exception handling to report pending but disabled interrupt in ICSR

###############################################################################
##                                                                           ##
## Date 2013-May-10                                                          ##
##                                                                           ##
## Release 20130315.2                                                        ##
##                                                                           ##
###############################################################################
 
ARM and ARMM Processor Models
-------------------------------------------------------------------------------
- A bug in handling Thumb if-then state has been fixed. The symptom was that
  unconditional Thumb instructions would occasionally be skipped as if they
  were located in if-then blocks.

###############################################################################
##                                                                           ##
## Date 2013-April-15                                                        ##
##                                                                           ##
## Release 20130315.1                                                        ##
##                                                                           ##
###############################################################################

ARMM Processor Model
-------------------------------------------------------------------------------
- Change default callback when reading memory mapped system registers to handle
  any data size
- Modify exception handling to report pending but disabled interrupt in ICSR
  
###############################################################################
##                                                                           ##
## Date 2013-March-15                                                        ##
##                                                                           ##
## Release 20130315.0                                                        ##
##                                                                           ##
###############################################################################

SmartLoaderArmLinux peripheral reworked
-------------------------------------------------------------------------------
The SmartLoaderArmLinux peripheral in arm.ovpworld.org has been completely
reworked to make it both more flexible and clearer.

- A new attribute "bootaddr" has been added that specifies the address to jump
  to from the tiny boot loader code generated by SmartLoaderArmLinux. If not 
  specified the image load address is used.
- The "bootcode" attribute has been removed. Use "bootaddr" instead.
- The tiny boot code created by SmartLoaderArmLinux is now called first and 
  then jumps to the boot address ("bootaddr" or the image file load address)
  with the registers configured for the Linux Kernel call.
- The address to load the kernel and initrd image files may be specified with 
  new "kerneladdr" and "initrdaddr" attributes
- The "nbcpus" attribute has been removed (it was always ignored)

MIPS Processor model Config5/6 register definition fixes
-------------------------------------------------------------------------------
- Config5.M bit is now always 0, per the Architectural specification
- Config6 register is now properly present on the 74K/1074K/proAptiv variants
  and has the correct power on value
  
Internet Proxy Server
-------------------------------------------------------------------------------
The update checker can now access through a proxy server, for installations
which do not have direct access to the web. If the server name is proxy.com and
the port is 3128, setting the following variable will use the proxy server for
web access
export IMPERAS_PROXY_SERVER=proxy.com:3128

Preliminary Altera CycloneV platform added
-------------------------------------------------------------------------------
A preliminary implementation of the Altera CycloneV socfpga has been added to
altera.ovpworld.org/platform/AlteraCycloneV. It has sufficient functionality 
to boot a Linux kernel on the ARM Cortex-A9 HPS but most peripherals are
not modeled.

Handling of signals in OVPsim
-------------------------------------------------------------------------------
- Fixed bug which prevented SIGINT from interrupting simulation when RSP is
  active.
  
RSP (GDB) debugging
-------------------------------------------------------------------------------
- Processor names longer than 64 characters could cause premature exit of the
  simulator. This has been fixed.
- When simulator stops and passes control to GDB, the wrong thread could be
  selected. This has been corrected.
- OVPsim now supports GDB hardware watchpoints created using the GDB
  watch, rwatch and awatch commands.
  
OVPsim_linux_ArmVersatileExpress_arm_Cortex-A9MP Demo
-------------------------------------------------------------------------------
- The OVPsim_linux_ArmVersatileExpress_arm_Cortex-A9MP demo has been updated to
  include version 3.7.1 of the Linux kernel built using the vexpress_defconfig
  configuration.

MIPS Processor Model
-------------------------------------------------------------------------------
- Added FPU2008 support
- Added new parameters: configSB, config1WR, config3ITL, firHas2008, 
  pridRevision and intctlIPTI
- Added support for the WST mode INDEX_LOAD_TAG and INDEX_STORE_TAG cache ops
  to the cache model.
- Set ISA mode on debug exception.
- Set BadVAddr on EVA address exception.
- Added CMP registers to register view.
- GIC_CounterLo/GIC_CounterHi values have been modified so that values are
  common across all VPEs in a cluster (previously, different VPEs could see
  different values for these registers).
- Size of registers communicated to GDB has been corrected (all 32-bit on
  MIPS32, all 64-bit on MIPS64).
- interAptiv variant's Config5.M bit changed from 1 to 0 to match specification.

ARM Processor Model
-------------------------------------------------------------------------------
- Modification of mode bits by register write in Hypervisor mode has been
  enabled (this is officially unpredictable but Linaro appears to rely on this
  behavior).
- Event streams have been added to the Generic Timer model.
- Parameter override_genericTimerScale has been added to allow the rate at which
  Generic Timer counters increment to be specified as a fraction of the
  processor MIPS rate. Default value of 20 for Cortex-A7 and Cortex-A15 variants
  implies Generic Counter timers increment once every 20 instructions
  (previously, the counters incremented every instruction).
- Added non-functional ACTLR2 register to Cortex-A15 configuration.

ARMM Processor Model
-------------------------------------------------------------------------------
- Register sp_main has been added to the register view.
- Modified the GDB interface so that the 'fps' register is always passed even 
  if VFP is not present.
- Modified the GDB interface so that archaic floating point registers f0-f7 are
  passed in the "g" packet (matching ARM model interface).

ARC Processor Model
-------------------------------------------------------------------------------
- Modified the debug register interface so that build configuration registers
  are exposed.

ICM C++ Interface
-------------------------------------------------------------------------------
- Added method icmProcessorObject::interrupt() allowing processors to be
  interrupted.
- Deleted method icmProcessorObject::loadNativeMemory() with dubious semantics.
  Use icmProcessorObject::loadLocalMemory() instead.
- A bug has been fixed in the MMC C++ wrapper which caused transactions of
  greater than 4 bytes to be silently discarded.

ICM API
-------------------------------------------------------------------------------
- icmMemNotifierFn prototype had its first two arguments reversed.
  The definition and documentation has been corrected; the functionality remains the same.
  (processor is first, watchpoint second).
- icmMapNativeMemory now includes an icmPriv argument enabling the access
  permissions if the mapped memory to be specified.
- Requests to interrupt simulation using icmInterrupt will now not be routed
  to an attached debugger but instead always cause return from icmSimulate or
  icmSimulatePlatform with a stop reason of ICM_SR_INTERRUPT.
- Moved declaration of icmMapExternalMemory to icmConstruct.h for clarity.
- The values returned by icmGetExceptionInfoCode() for the arm processor model have
  changed. Previously the vector offset used by the exception was returned. Now a
  unique code is returned instead. See the model specific processor documentation
  for the values returned for a given processor.
- Changes to functions for processor introspection:
    deleted function
       icmGetProcessorProcdoc()
    new functions
       icmGetProcessorGroupH()
       icmGetProcessorGroupL()
       icmGetProcessorVariant()
- Stop reasons ICM_SR_RD_ABORT, ICM_SR_WR_ABORT and ICM_SR_FE_ABORT have been
  added to specify read abort, write abort or fetch abort generated by calls to
  icmAbortRead or icmAbortWrite. Previously, stop reasons ICM_SR_RD_PRIV or
  ICM_SR_WR_PRIV were returned.
- Added status argument to icmFinish (see icmGetStatus below).
- Added function icmGetStatus which returns any status code passed by a
  previous call to icmFinish or vmirtFinish.
- Function icmLoadNativeMemory with dubious semantics has been deleted. Use
  icmLoadProcessorMemory or icmLoadBus instead.
- The object reader function type ordSectionCB now requires an additional
  PAtoVA argument. If non-zero, this specifies the displacement from the
  physical section address to virtual symbol addresses in that section. When
  virtual and physical addresses match, the value should be zero. The version
  number ICM_OBJREADER_VERSION has been incremented to reflect this change.

VMI API
-------------------------------------------------------------------------------
The version of the VMI API has been changed. There are two effects:
- You will need to recompile any model or intercept object that uses VMI.
- It is now strongly recommended that fields in the VMI model attributes table
  are initialized by name rather than by position. Thus:
    .versionString  = VMI_VERSION,          /// version string 
    ...
    .constructorCB  = constructor,          // object constructor
    ...
    .intercepts = {
    ...  
- Two new entries of type vmiStartEndBlockFn have been added to the processor
  vmiAttrs structure. If non-NULL, startBlockCB is called just before
  translation of a new code block is started. If non-NULL, endBlockCB is called
  just after translation of a new code block has completed. The functions can be
  used to initialize and finalize data structures required during translation of
  a code block.
- A new entry postOpaqueCB of type vmiPostOpaqueFn has been added to the
  processor vmiAttrs structure. If non-NULL, this function is called in place of
  the morphCB for every instruction that has been opaquely intercepted. The
  purpose of the function is to allow processor state to be updated even if
  the instruction implementation is elsewhere.
- New vmiCache.h and vmiCacheAttrs.h headers have been added which define an
  interface to enable/disable and register callbacks for cache models integrated
  in a processor model. Note that currently only the MIPS32 model has an
  integrated cache model.
- A new entry of type vmiCacheRegisterFn has been added to the processor
  vmiAttrs structure to support model-specific registration of cache functions.
- The contents of the structure vmiProcessorInfo has changed. See
  vmiModelInfo.h for details.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- Functions vmirtGetRegGroupByName and vmirtGetNextRegGroup have been added,
  allowing access to processor register groups from intercept libraries.
- Function vmirtGetNextRegIntGroup has been added, allowing iteration of
  processor registers by group.
- Functions vmirtGetCurrentMode and vmirtGetNextMode have been added, allowing
  access to processor modes from intercept libraries.
- Functions vmirtGetCurrentException and vmirtGetNextException have been added,
  allowing access to processor exceptions from intercept libraries.
- Function vmirtCacheRegister has been added to support registration of cache
  simulation functions.
- An additional 'scale' argument has been added to vmirtCreateModelTimer,
  allowing timers to be defined that operate at a fraction of processor MIPS
  rate. For example, scale=0 indicates the timer increments once every
  simulated instruction (the original mode); scale=8 indicates the timer
  increments once every (1<<8) = 256 instructions.
- Function vmirtGetModelTimerICount has been replaced with a new function
  vmirtGetModelTimerCurrentCount. The new function takes a 'ticks' argument
  which indicates whether the returned value should be in timer ticks (True)
  or processor instructions (False).
- Function vmirtGetModelTimerIDelta has been replaced with a new function
  vmirtGetModelTimerExpiryCount. The new function returns an absolute count
  instead of a delta and takes a 'ticks' argument which indicates whether the
  returned value should be in timer ticks (True) or processor instructions
  (False).
- A new 'scope' argument has been added to functions vmirtAddReadCallback,
  vmirtRemoveReadCallback, vmirtAddWriteCallback, vmirtRemoveWriteCallback, 
  vmirtAddFetchCallback and vmirtRemoveFetchCallback. If the argument is NULL,
  these functions behave as in previous VMI versions; if the argument is
  non-NULL, the callback called only when accesses are made by the given scope
  processor.
- Function vmirtGetSymbolLoadAddr has been added which returns the load address
  of a symbol.
- Function vmirtAddressLookup has been corrected so that it now always returns
  the load address of a symbol, not the virtual address.
- Implementation of Symbol Table Access and Dwarf Line Number Information
  Access routines has been extensively revised and improved. This corrects
  various obscure issues which caused symbol and line lookups to fail in some
  circumstances.
- Added new vmiMessage severity level "T" for Trace.
  
Simulator Core
-------------------------------------------------------------------------------
- An obscure bug has been fixed that caused bad code to be generated for divide
  instructions targeting the first word of a processor structure.
- Registers declared using VMI_TEMP are now written back to the processor
  structure before a divide operation, even if those registers do not appear
  to be subsequently used. This change means that temporary values are always
  valid within arithmetic exception handlers.
- A bug has been fixed that caused an abort when a register change callback is
  installed on the program counter and a block is executed with incorrect
  processor block mask, causing the block to be regenerated.
- The simulator main scheduler loop has been improved to give up to 25% faster
  performance for a single-instruction slice. When simulating multi-thread
  processors (e.g. MIPS 34Kc) the scheduling order of the individual threads is
  slightly different in some circumstances.
- A bug has been fixed which caused hierarchical object names to sometimes be
  reported with a leading slash character (e.g. /cpu0). These will now be
  correctly reported either with no platform name (e.g. cpu0) or with a prefixed
  platform name (e.g. platform1/cpu0).

SystemC TLM2.0 Processor Interface Thread
-------------------------------------------------------------------------------
- The icmCpuThread that calls simulate for an OVP Fast Processor model now 
  calls wait(sc_core::SC_ZERO_TIME) for an initial wait. This gives better 
  SystemC simulation startup characteristics.
 

###############################################################################
##                                                                           ##
## Date 2012-December-12                                                    ##
##                                                                           ##
## Release 20121212.0                                                        ##
##                                                                           ##
###############################################################################

ARM MMCI PL181 Peripheral Model
-------------------------------------------------------------------------------
- This model is now largely moved from PSE to native host code. The PSE still 
  provides the register interface and programmers view. The behavior is now 
  implemented as native host code. This has greatly improved the SD Card data
  read performance. In simulation it has been shown to run substantially 
  faster when booting the Android operating system from an SD Card. 

MICROBLAZE Processor Model
-------------------------------------------------------------------------------
- Enhanced the Exception information to expose all of the exception types 
  described in the System Register ESR[EC]

V850 Processor Model
-------------------------------------------------------------------------------
- Fixed an issue where 32 bit fetches performed a 2byte fetch followed by a 4
  byte fetch at the same address. This is now performed as 2x2byte fetch.
  The TLM wrapper may need enhancing to perform 4byte accesses and caching
  internally for 2byte access
- Fixed a bug where pending interrupts are not processed whenever a reti or ei
  instruction is executed. Writes to the PSW register affecting the ID bit,
  also cause pending interrupts to be re-evaluated

MIPS processor Model
-------------------------------------------------------------------------------
- Corrected a bug which caused writes to COP0 registers on a MIPS64 processor
  using the debug register interface to truncate written values to 32 bits.
- Added new parameters configKU and configK23 to allow overriding of the power 
  on values for the K0 and K23 fields of the COP0 Config register.
- Implemented merging of timer interrupt and external hardware interrupts in
  compatibility and vectored interrupt modes: previously, changes to either
  interrupt would cause an asserted interrupt from the other source to be lost.
- Debugger accesses to the Count and Random registers have been corrected so
  that the processor state is not perturbed.
- The debug register interface has been upgraded to support save/restore
  (Imperas Professional Tools only).
- Deleted obsolete COP0 register programmers view objects (use debug register
  interface instead).
- fixed several errors in SPRAM modeling: multiple regions now handled
  correctly and SPRAM memory is now properly written on INDEX_STORE_DATA
  and read on ISPRAM INDEX_LOAD_TAG
- The 34K variants no longer give a fail on an SC instruction when the 
  underlying memory has been modified by a different processor. A message 
  will be issued in this case. Note that modifications by other VPEs in the 
  same processor will still properly generate SC fails.

ARM Processor Model
-------------------------------------------------------------------------------
- Configurations have been added for variants Cortex-A15 and Cortex-A7
- Corrected a GIC bug related to acknowledgment of externally-asserted
  level-sensitive interrupts: these should become active and pending (not
  active).
- Corrected a GIC bug related to behavior of GICD_ISPENDR and GICD_ICPENDR for
  externally-asserted level-sensitive interrupts: these should be left pending
  if de-asserted.
- Corrected a GIC bug that prevented IRQ and FIQ interrupts being raised by
  writes to GICD_ISPENDR0.
- Corrected a GIC bug that prevented pre-emption of group 1 interrupts when
  using GICC_ABPR in some circumstances.
- Modified unpredictable result of MRS instruction in User or System mode to
  return 0 instead of CPSR.
- Made CBAR accessibility implementation-specific.
- Added non-functional stubs for Cortex-A5 implementation-specific registers
  allowing direct access to internal memory.
- Added override_SCTLR_CP15BEN_Present parameter, which enables the CP15BEN bit
  in the SCTLR register.
- Various parameters defined as integers with a valid range of 0..1 have been
  redefined as Booleans.
- Added an artifact register 'transactPL' that returns the privilege level of
  any active memory transaction (PL0, PL1 or PL2). This is usually the current
  processor privilege level, but can be PL0 if the processor is at PL1 and
  performing an LDRT/STRT instruction. This register is intended for use in
  memory callbacks that need to assemble transaction information (for example to
  emulate the ARM1176 AxPROT signals).
- Corrected a bug that caused values for 2-word coprocessor registers to be
  incorrect when viewed through the debug register interface.
- Corrected a bug that caused incorrect values to be returned for some banked
  registers using the debug register interface in Monitor mode when SCR.NS=1.
  Values are always now returned for the current security state.
- Corrected a bug that caused VFP rounding control and FTZ mode to be set
  incorrectly if FPSCR is updated when VFP is not enabled.
- Added secure and non-secure coprocessor register groups to the debug register
  interface for registers that are banked between secure and non-secure states.
- The debug register interface has been upgraded to support save/restore
  (Imperas Professional Tools only).
- Deleted obsolete coprocessor register programmers view objects (use debug
  register interface instead).

ARMM Processor Model
-------------------------------------------------------------------------------
- A bug has been fixed causing incorrect behavior when the number of interrupts
  was specified to be more than 16.
- A bug has been fixed which caused CONTROL.FPCA to remain unset on completion
  of a floating point instruction in some circumstances on variants that support
  floating point.
- The debug register interface has been upgraded to support save/restore
  (Imperas Professional Tools only).
- Deleted obsolete system register programmers view objects (use debug register
  interface instead).

amd.ovpworld.org/peripheral/79C970 NIC model
-------------------------------------------------------------------------------
- Fixed bug seen when transmitting a packet length > 1500 bytes, causing
  infinite loop. Exposed by using NFS over Ethernet.

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed that caused reported times to be occasionally inaccurate
  on Windows32 and Windows64 hosts.
- A bug has been fixed that caused a crash in vmirtAliasMemory when the physical
  domain region being aliased to contained multiple aliases of another region.
- A bug has been fixed that caused attempts to yield execution using icmYield
  to be ignored.
- A bug has been fixed that caused conditional branch-and-link instructions 
  generated by vmimtCondJumpReg occasionally to branch the wrong way when
  executing a physically-mapped code block.
- A bug has been fixed that caused indirect jumps to be work incorrectly for
  processors with 32-bit virtual address spaces and 64-bit physical address
  spaces.

ICM API
-------------------------------------------------------------------------------
- The behavior of icmAddReadCallback and icmAddWriteCallback has been changed
  so that the callback is associated with the processor physical data bus
  instead of the virtual data bus.
- Function icmAddFetchCallback has been added, allowing fetch accesses made on
  a processor physical instruction bus to be monitored by a callback.
- Functions icmAddBusReadCallback, icmAddBusWriteCallback and
  icmAddBusFetchCallback have been added which allow read, write or fetch
  accesses occurring on any bus to be monitored.
- Callbacks installed using any of the above-listed functions are now called
  only once for each domain in which they are installed. Previously, it was
  possible to have multiple calls per domain if the domain contained several
  bridges to a common underlying physical domain.
- Deprecated function icmInFetchContext has been modified to take a processor
  argument instead of implicitly operating on the current processor.
- Function icmGetRegInfoReadOnly has been deprecated: use new function
  icmGetRegInfoAccess instead which returns full accessibility information.
- New member ICM_ATTR_TRACE_CHANGE has been added to the icmNewProcAttrs
  enumeration, enabling tracing of all changed register values after every
  instruction.
- The function icmYield has been altered so that it no longer passes a SIGTRAP
  to an attached GDB but rather returns from simulation with a return cause
  set to ICM_SR_YIELD without affecting the GDB state.

VMI API
-------------------------------------------------------------------------------
- Save and restore callback functions have been added to the processor vmiAttrs
  structure to support processor model save and restore (under development).
- Register encoding of the vmiReg type has been modified so that a zeroed-out
  value is interpreted as VMI_NOREG, which is more intuitive than the original
  encoding.
- The format of the vmiRegInfo type has been updated as follows:
  1. Fields have been reordered more logically.
  2. The 'readonly' Boolean member has been replaced with an enumeration of type
     vmiRegAccess, allowing write-only access to be specified.
  3. A new 'noSaveRestore' Boolean member has been introduced which is used to
     specify registers that should not be automatically saved and restored.
  4. A new 'raw' field of type vmiReg has been introduced, allowing raw access
     to registers using the debug interface to be more easily described (a raw
     access is one that does not require a callback function). Previously, raw
     access could only be specified using special callback functions
     VMI_REG_RAW_READ_CB and VMI_REG_RAW_WRITE_CB and a special value of the
     'userData' field. This change allows raw access to registers for which
     'userData' is also required for another purpose.
  For future compatibility, please use named fields when filling vmiRegInfo
  structures.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- Functions vmirtGetRegByName, vmirtRegRead and vmirtRegWrite have been added
  which behave identically to the previously-existing vmiosGetRegDesc,
  vmiosRegRead and vmiosRegWrite. The old vmios functions have been deleted and
  aliased to the new vmirt functions using #define. This change has been made
  because register access has more general applicability than semihosting
  support.
- Function vmirtGetNextReg has been added to allow iteration of processor
  registers.
- Function vmirtIterAllProcessors has been added, which applies a callback to a
  given processor and all its descendants.
- Functions vmirtSave and vmirtRestore have been added to support save and
  restore of model-specific items (Imperas Professional Tools only).
- Functions vmirtSaveModelTimer and vmirtRestoreModelTimer have been added to
  support save and restore of processor timers (Imperas Professional Tools
  only).
- Functions vmirtGetPostSlotCB and vmirtSetPostSlotCB have been added to support
  save and restore of post-delay-slot callback functions (Imperas Professional
  Tools only).
- Functions vmirtIsModelTimerEnabled, vmirtGetModelTimerICount and
  vmirtGetModelTimerIDelta have been added, allowing timer state to be queried.
- Obsolete function vmirtUns64FlagByName has been deleted. Use
  vmirtProcessorFlags instead.
- Obsolete function vmirtInstallNetCallback has been deprecated and should not
  be used. Port lists should be specified using the net port specification
  methodology described in the VMI Run Time Function Reference manual instead.
- Obsolete functions vmirtConceal and vmirtReveal have been deleted.

BHM API
-------------------------------------------------------------------------------
- Function Bool bhmBoolAttribute(const char *name)  has been added
  which can be used to fetch a two value attribute from the platform.
  Returns the Boolean value if set, false if not set.
- A PSE must define its interfaces with an attributes table similar to a
  processor. See Examples/Models/Peripheral/creatingDMAC

###############################################################################
##                                                                           ##
## Date 2012-September-06                                                    ##
##                                                                           ##
## Release 20120906.0                                                        ##
##                                                                           ##
###############################################################################

ARM Processor Model
-------------------------------------------------------------------------------
- MPCore debug messages have been improved.

Microblaze Processor Model
-------------------------------------------------------------------------------
- Added Exceptions for Instruction Bus Error and Data Bus Error

ICM API
-------------------------------------------------------------------------------
A discrepancy in the naming of parameters in icmBridgeBuses has been corrected.
The prototype is now :

void icmBridgeBuses (
    icmBusP slave, icmBusP master,
    Addr lowAddrSlave, Addr highAddrSlave, Addr lowAddrMaster
);
Note that the names have changed to reflect their true meaning though a program
which uses this function does not need to be changed.
 
SystemC TLM Demos and Examples
-------------------------------------------------------------------------------
- The release of the OSCI systemc-2.3.0 simulator, has added support for the 
  MinGW Compiler under Windows. In response to this, all of the SystemC TLM 
  Demos (Imperas/Demos) have been modified to use the link library built using
  the MinGW compiler.
  We will continue to supply an example which compiles using the MSVC compiler
  in addition to the MinGW compiler

AMD 79C970 NIC model
-------------------------------------------------------------------------------
- Fixed a bug in amd.ovpworld.org/peripheral/79C970/1.0/pse/net.c where the
  value specified with the MAC attribute was not converted to the correct MAC
  address.

Corrected name of Philips USB Model
-------------------------------------------------------------------------------
- The Philips USB device model is now correctly named in the VLNV library as
  philips.ovpworld.org/peripheral/ISP1761/1.0

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- Arguments to vmirtAliasMemoryVM and vmirtUnaliasMemoryVM have been modified:
  what was previously a Boolean argument, isGlobal, is now an Uns32 argument,
  ASIDMaskOrG. This change enables easier implementation of processor models
  that support hypervisors.
- Exception handling routines of types vmiRdAlignExceptFn and vmiWrAlignExceptFn
  have been enhanced so that they are passed the memory domain of the failing
  access.
- The functions vmirtPlatformStringAttribute and vmirtPlatformUns64Attribute
  have been un-deprecated, as they are still needed to allow intercept libraries
  to get attribute information for a processor model.

New Demo for eCos real-time operating system
-------------------------------------------------------------------------------
- The demo OVPsim_eCos_ArmIntegratorCP provides a number of examples compiled
  with the eCos operating system and running on an ARM920T on the Arm 
  Integrator Compact Platform.

C++ Wrapper
------------------------------------------------------------------------------- 
- Fixed icmPlatform constructor/destructor to support delete/new for
  icmPlatform objects (equivalent to calling icmTerminate followed by icmInit).
  Note only one platform may exist at a time. 

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed that caused an artifact access to an unmapped memory
  address to cause a processor to take a data abort exception (for example,
  a read or write by a debugger).
- A bug has been fixed that caused vmirtGetDomainMappedASID to return
  ASID_MAP_ACTIVE or ASID_MAP_INACTIVE for virtual memory pages that have been
  unmapped: these now always return ASID_MAP_NONE.
- A bug has been fixed that occasionally caused breakpoints on virtual addresses
  to be ignored if those virtual addresses correspond to physical addresses for
  which there is another virtual mapping with no breakpoint.
- A bug has been fixed that caused occasional stack misalignment errors on
  64-bit hosts.
- A bug has been fixed that caused occasional assertion on 64-bit hosts for an
  out-of-range jump.
- A bug has been fixed that caused segmentation faults when addressing outside
  the implemented range of a physical bus (for example, reading or writing an
  address with bit 29 set when a bus of width 28 bits has been connected to
  the processor data port). Such loads or stores wrap into the implemented
  memory range.
- Environment variable IMPERAS_BACKTRACE has been added. When set to 1, this
  causes a backtrace to be generated for an assertion or uncaught signal (on
  Linux hosts only). This can be used to help locate the code causing the
  assertion or signal.

###############################################################################
##                                                                           ##
## Date 2012-September-07                                                    ##
##                                                                           ##
## Release 20120614.8                                                        ##
##                                                                           ##
###############################################################################

ARM Processor Model
-------------------------------------------------------------------------------
- Major revision of GIC implementation to correct non-secure state views for
  many distributor and CPU interface registers.
- Memory type attributes in TLB entries are now filled at entry creation
  (previously, attributes were created on demand when required for address
  translation functions, with the effect that badly-written applications that
  modify PRRR or NMRR without flushing the TLB could see values returned in
  the PAR that differ from hardware).
- Fault status is now correctly reported for debug events resulting from BKPT
  instruction execution.
- Exception return instructions have been corrected to set the event register.
- Coprocessor registers have been divided into 32-bit and 64-bit groups when
  viewed through the register access API.
- Incorrect write mask for ACTLR in Cortex-A5 variants has been fixed.
- Cortex-A5/Cortex-A9 global timer has been modified so that it increases
  monotonically for all processors in a cluster.
- Fixed a bug that caused the global timer Counter and Comparator registers 
  to be described in the processor specific model documentation and debug 
  interface as 32-bit registers when they are in fact 64-bit registers, and
  also reads and writes using icmReadReg/icmWriteReg to affect only the least
  significant 32-bits of these registers.
- Fixed a bug in the GIC that caused all but one of multiple concurrent SGI
  interrupts with the same target CPU and interrupt number but different source
  CPU to be discarded.

###############################################################################
##                                                                           ##
## Date 2012-August-29                                                       ##
##                                                                           ##
## Release 20120614.7                                                        ##
##                                                                           ##
###############################################################################

ARM Processor Model
-------------------------------------------------------------------------------
- Fixed a bug that caused the global timer Counter and Comparator registers 
  to be described in the processor specific model documentation and debug 
  interface as 32 bit registers when they are in fact 64 bit registers.

Processor Model Xilinx MicroBlaze
-------------------------------------------------------------------------------
- The 'Reset' input to the Xilinx MicroBlaze processor model did not allow 
  for the processor to be held in reset. This is corrected. An active high 
  reset signal will now hold the processor in a reset state.
- Fixed a bug with the interrupt handling for Level sensitive interrupts not
  causing the interrupt handler to be called

TLM2 Interface File Semihost Disable
-------------------------------------------------------------------------------
- The generated interface files for the processor models now allow the 
  semihosting to be disabled by setting the argument to "" (empty string) 

###############################################################################
##                                                                           ##
## Date 2012-August-17                                                       ##
##                                                                           ##
## Release 20120614.6                                                        ##
##                                                                           ##
###############################################################################

ELF Loader
-------------------------------------------------------------------------------
- The 32 & 64 bit ELF loaders now load sections with header types 14, 15 & 16
  corresponding to 3 kinds of array initializer supported by some compilers.
  
- Option ICM_ZERO_BSS to icmLoadProcessorMemory and icmLoadBus allow the BSS
  section to be filled with zeros. See icmLoaderAttrs in icmTypes.h
  Note that the ICM C++ API and custom loader API have also changed,
  though the existing C++ methods remain.

###############################################################################
##                                                                           ##
## Date 2012-July-25                                                         ##
##                                                                           ##
## Release 20120614.5                                                        ##
##                                                                           ##
###############################################################################

V850 Processor Model
-------------------------------------------------------------------------------
- Fixed a problem with the V850E1F Variant when performing FP operations 
  writing to register R0
- Fixed Decoding error for the DIVF.S instruction

OVP License Date Server Access
-------------------------------------------------------------------------------
- The format from the date server used by OVPsim changed and introduced an 
  error that made the date lookup, and hence license check, fail.
  
###############################################################################
##                                                                           ##
## Date 2012-July-16                                                         ##
##                                                                           ##
## Release 20120614.4                                                        ##
##                                                                           ##
###############################################################################

ARMM Processor Model
-------------------------------------------------------------------------------
- Reset signal is now level-sensitive (processor will remain halted while reset
  is high).
- Fixed a bug in memory-mapped system register handling that caused side effects
  on debugger accesses (specifically, reads of SYST_CSR).

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed that caused virtual-to-physical address mapping errors
  when a processor switched mode using vmirtSetMode when in both the old and new
  modes the execution address was in the same virtual page, but this page had
  different physical mappings in each mode.

###############################################################################
##                                                                           ##
## Date 2012-July-13                                                         ##
##                                                                           ##
## Release 20120614.3                                                        ##
##                                                                           ##
###############################################################################

GDB Interface
-------------------------------------------------------------------------------
- Fixed a bug in the GDB interface that made memory addresses that are mapped 
  to internal processor registers inaccessible through GDB. In particular, 
  this prevented printing Cortex-M System Control register values using GDB 
  memory accesses.

###############################################################################
##                                                                           ##
## Date 2012-July-10                                                         ##
##                                                                           ##
## Release 20120614.2                                                        ##
##                                                                           ##
###############################################################################

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed that caused an assertion on an attempt to halt a
  processor using vmirtBlock when running with multiple instructions per slice.
- A code generator bug has been fixed that caused registers beyond the first
  1Kb zone of a processor structure to be written with incorrect values in some
  obscure circumstances.

ImperasLib/buildutils/Makefile.TLM.Platform.*
-------------------------------------------------------------------------------
- The environment variable SYSTEMC_HOME is used by default to define the 
  location of the SystemC root directory. However, if it is NOT defined and
  SYSTEMC is defined, SYSTEMC will now be used.
- On Linux, if /usr/bin/execstack does not exist a warning will be issued rather
  than an error occurring. (execstack is used to configure SELinux to permit 
  the executables built to run code from the HEAP.)

MIPS Processor Model
-------------------------------------------------------------------------------
- ITC: now supports byte and halfword accesses and architecturally reserved 
  views are now implemented as a bypass.

ARM Processor Model
-------------------------------------------------------------------------------
- A bug that would allow an MSR instruction to modify the CPSR.T and .J bits
  (which should have writes ignored) has been fixed.   
- Implemented 64-bit coprocessor register view.
- Fixed bug that caused assertion failure when the override_Control_V 
  parameter was set on a processor with an MPU (as opposed to a TLB) such as
  the Cortex-R4.

###############################################################################
##                                                                           ##
## Date 2012-June-27                                                         ##
##                                                                           ##
## Release 20120614.1                                                        ##
##                                                                           ##
###############################################################################

MIPS CrossCompiler Support with CodeSourcery lite
-------------------------------------------------------------------------------
- The support Makefiles CS_*MIPS*.makefile.include that aids the use of a 
  CodeSourcery (lite) CrossCompiler toolchain have been updated for use with
  the latest version available 2012.03-64. This adds support for the MIPS 
  64-bit architecture
- An Imperas TargetLibrary to support the MIPS 64-bit architecture is added 

MIPS Processor Model
------------------------------------------------------------------------------- 
- New parameter config7HCI added to allow users to set Config7.HCI bit in the
  processor model (it is off by default).

ARM Processor Model
-------------------------------------------------------------------------------     
- Cortex-A5MPx1, Cortex-A5MPx2, Cortex-A5MPx3 and Cortex-A5MPx4 variants have
  been added.
- Misnamed variant Cortex-A9MP has been deleted; use Cortex-A9MPx4 instead.
- Accessibility of CBAR, PCR and NEONB registers has been corrected.
- Added a new input net port named spiVector to variants that implement a  
  GIC (Generic Interrupt Controller).
  This input is a net port that supports writing a value to any of the SPI 
  (Shared Peripheral Interrupt) inputs via the icmWriteNet function. 
  Bit 0 of the value written specifies the value written to the SPI input 
  (0 or 1). Bits 31:1 specify which SPI input is written. 
  Writing an out of range value (less than 32 or greater than the maximum SPI 
  supported by the implementation) will be ignored. 
- Added override_GICD_TYPER_ITLines parameter to override the value of the 
  ITLinesNumber field in the GICD_TYPER register. This value defines the number 
  of SPI inputs that are implemented. 
  Changing this value also changes the number of implemented interrupt 
  registers for the following (these have different names depending on whether 
  a variant implements GIC v1 or GIC v2): 
        GIC v1 names        GIC v2 names
        ------------        ------------
        ICDGRPR             GICD_IGROUPR
        ICDISER             GICD_ISENABLER
        ICDICER             GICD_ICENABLER
        ICDISPR             GICD_ISPENDR
        ICDICPR             GICD_ICPENDR
        ICDABR              GICD_ISACTIVER
        ICDIPR              GICD_IPRIORITYR
        ICDIPTR             GICD_ITARGETSR
        ICDICFR             GICD_ICFGR
        SPI_STATUS          GICD_SPISR
        
ARMM Processor Model
-------------------------------------------------------------------------------
- Register view has been corrected to add these system registers that were
  previously omitted: ICSR, SHCSR, SHPR*, STIR, NVIC_ISER*, NVIC_ICER*,
  NVIC_ISPR*, NVIC_ICPR*, NVIC_IABR*, NVIC_IPR*, MPU_RBAR*, MPU_RASR,
  MPU_RBAR_A* and MPU_RASR_A*.
  
Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed that caused an assertion on an attempt to halt a
  processor using vmirtBlock in an unannulled delay slot instruction.

###############################################################################
##                                                                           ##
## Date 2012-June-19                                                         ##
##                                                                           ##
## Release 20120614.0                                                        ##
##                                                                           ##
###############################################################################

Peripheral Model arm.ovpworld.org LcdPL110
-------------------------------------------------------------------------------
This model has been updated to address two issues
- Not passing the correct BPP value to the SDL layer
- Support setting the BPP to a value other than the default (16BPP)

New configuration parameters added to MIPS model
-------------------------------------------------------------------------------
The MIPS model has the following new Boolean parameters:
      fixedMMU
      removeDSP
      removeCMP
      removeFP
These are intended to be used with the Aptiv family variants to create different
implementations. When set the specified feature is modified/removed.

Note that the existing GCR_PCORES parameter may also be used to change the 
number of cores in multiprocessor (the value should be set to the number of 
cores desired minus 1, e.g. 1 for a dual core configuration)

For example, the interAptiv variant, which has by default 4 cores and an FP
unit may be changed to model a 2 core, no floating point implementation by  
adding the following to the platform:
    icmAddStringAttr(procAttrs, "variant",   "interAptiv");
    icmAddStringAttr(procAttrs, "removeFP",  "true");
    icmAddUns64Attr (procAttrs, "GCR_PCORES", 1);

New Demos 
-------------------------------------------------------------------------------
New demos have been created
- FreeRTOS on ARM Cortex-M3 processor model. OVPsim_FreeRTOS_arm
  A new demo has been added to show the operation of a simple application based
  upon the FreeRTOS operating system running on the ARM Cortex-M3 processor.
- OVPsim_mips64(_tlm2.0)
  Two demos have been added to show the mips64, (the MIPS 64-bit architecture)
  model running some simple applications.
- MIPS32 Aptiv processor model demos.
  A set of demos are provided in a new package, OVPsim_demo_mips32_Aptiv, to 
  show the Aptiv variants, microAptiv, interAptiv and proAptiv, running simple 
  applications. These are provided as single, multicore2 and manycore24 example
  platforms.
  
TLM2.0 Interface
-------------------------------------------------------------------------------
- A bug has been fixed so that a processor model now correctly responds to the
  invalidate_direct_mem_ptr request.
- Processor models can now have bus ports left unconnected without error.

Peripheral Modeling API (BHM)
-------------------------------------------------------------------------------
- A set of new functions bhmSerOpenAuto, bhmSerRead, bhmSerWrite and bhmSerClose
  have been added to provide an interface for use by serial devices. The library
  ovpworld.org/modelSupport/pseSockets/1.0 has been deprecated.

V850 Processor Model
-------------------------------------------------------------------------------
- Vendor renaming, the vendor has been renamed from necel.ovpworld.org to
  renesas.ovpworld.org, this is to bring the naming into line with the name
  change of the company
- Variant renaming, all variants now appear as UPPER CASE in order to match
  Renesas Documentation.
  V850, V850E1, V850ES and V850E2
- Addition of variant V850E1F, supporting the Single Precision Floating Point
  Unit for the V850E1(F) series devices

MIPS Processor Model
-------------------------------------------------------------------------------
- The mips64 model has been released, supporting initial variants 5Kf, 5Kc, 
  5KEf and 5KEc.  
- New variants added to the MIPS processor model to support the MIPS Aptiv 
  microprocessor cores. The model now provides support for variants of the 
  microAptiv, interAptiv and proAptiv microprocessor cores.
- Support for ISPRAM and DSPRAM added (enabled using configISP and configDSP
  parameters to override Config.ISP and  Config.DSP, respectively).
  Example added at Examples/Models/Processor/FeatureUsage/MIPS_SPRAM_Internal
- Support for ITC added (enabled using ITCNumEntries and ITCNumFIFO parameters,
  used to specify the total number of ITC cells and the number of FIFO cells,
  respectively). 
  Example added at Examples/Models/Processor/FeatureUsage/MIPS_ITC_Internal
- A minor bug introduced in the 20120313.0 release that caused incorrect
  behavior when overlapping TLB entries were written on 24K and higher variants
  was fixed. On these variants a machine check exception should occur if both 
  conflicting entries have a Valid bit set, but instead the conflicting entry
  was disabled and no machine check exception was taken in this case.  
- Read and write privilege exception handlers have been simplified using
  vmiLoadStoreAction (see VMI API changes).
- The implementation of the WAIT instruction has been corrected so that, if
  Config7.WII=1, the processor will not wait if there is an active interrupt,
  irrespective of whether the interrupts are enabled (Status.IE=1) or whether
  the processor is interrupt-exempt (TCStatus.IXMT=1).
- Added "fixedMMU" parameter which when true sets Config.MT=3, Config.KU/K23=2  
  and Config1.MMUSizeM1=0. This changes the MMU type to be a fixed mapping
  MMU. This may be used on any processor that normally has a TLB MMU.
- Added "removeDSP" parameter which when true sets Config3.DSPP/DSP2P=0. This
  removes the DSP. This may be used on any variant that normally has a DSP.
- BEV Exception Base is now configurable
  Support for specifying the initial value for BEV Exception Base has been
  added:
  For non-CMP processors: 
    A new config value named BEVBase which models the SI_ExceptionBase input 
    available on some implementations has been added. To maintain previous 
    behavior this has been set to 0xbfc00000 in each non-CMP variant in 
    mipsConfigList.c. It may be overridden with the new BEVBase parameter.
  For CMP Processors:
    A new config value named GCR_RESET_BASE has been added to specify the 
    power-on value for the CMP GCR_Cx_RESET_BASE registers. GCR_RESET_BASE is an
    array with up to 4 entries for cores 0 through 3. (If there are more than 4
    cores present, the last value is used for all additional cores.)
  To maintain previous behavior these have been set to 0xbfc00000 in each 
  non-CMP variant in mipsConfigList.c. They may be overridden with the new 
  GCR_Cx_RESET_BASE parameters (where x=0, 1, 2 or 3).

ARM Processor Model
-------------------------------------------------------------------------------
- CPSR.A and CPSR.F mask values on exception entry have been corrected for
  processors that implement Security Extensions.
- Cortex-R4 and Cortex-R4F variants have been added.
- Banked TCMs have been implemented (ARM1176 variants).
- Secure TCMs and secure DMA have been implemented (ARM1176 variants).
- TLB preload operations have been implemented (Cortex-A8 variants).
- VCR and VIR have been implemented (Cortex-A5 and Cortex-A9 variants).
- TCMs are now exposed as bus ports for external connection if required.
- The align64as32 configuration option and override_align64as32 parameter have
  been removed from both the arm and armm models. The behavior is now modeled
  on an instruction basis, not a variant basis.
- The rotateUnaligned configuration option and override_rotateUnaligned
  parameter have been removed from both the arm and armm models. Legacy
  alignment/rotation behavior is always enabled when SCTLR.A=0 and SCTLR.U=0 in
  the arm model and never enabled in the armm model.
- Warning messages generated when undefined or inaccessible coprocessor
  registers are read or written been improved.
- Coprocessor register interface has been revised to ensure that presence of
  registers matches ARM documentation for each processor variant more closely
  (particularly for placeholder registers such as Cache Operation registers).
- The model has been enhanced to use the new explicit read and write address
  snap functions in the vmiAttrs structure: see chapter 12 of the OVP Processor
  Modeling Guide for a detailed description of this feature.
- Read and write privilege exception handlers have been simplified using
  vmiLoadStoreAction (see VMI API changes).
- For processor variants supporting ARMv6 and later, when parameter
  override_deviceStrongAligned=1 the arm model generates misaligned access
  exceptions for loads or stores to Device or Strongly Ordered regions
  irrespective of whether the processor has unaligned accesses enabled. The
  default behavior (if override_deviceStrongAligned=0) is to allow such
  misaligned accesses.
- Behavior of conditional undefined instructions on ARMv6 and before has been
  corrected: these instructions should not cause an Undefined Instruction
  exception if the condition code prevents the instruction being executed.
  Parameter override_condUndefined has been added to allow this behavior to be
  modified if required (set override_condUndefined=1 to enable Undefined
  Instruction exception irrespective of the condition).
- ARM instruction set decode of SDIV and UDIV has been added.
- Implemented ARMv7 MPU background region and subregions.
- FPU system registers have been added to the register view for processor
  variants that support them.
- Defined mode names have been corrected to match ARM standard capitalization
  (for example, "User" instead of "USER").

GDB RSP Interface
-------------------------------------------------------------------------------
- The RSP interface now supports the automatic starting of a debugger when RSP
  Mode is enabled. The debugger is selected by the model from the Imperas
  Installation, the port number is allocated by the system. Use the simulator
  attribute ICM_GDB_CONSOLE to enable this feature.
- On Linux, the gdb console is an xterm. To override the default path to the
  xterm (/usr/bin/xterm) set the environment variable IMPERAS_XTERM_PATH.
- To supply a gdb command file to run before the prompt, use the following:
  export IMPERAS_GDB_COMMAND_FILE=<your_file>
- To set the number of seconds timeout used by  gdb's remote protocol, set the
  environment variable IMPERAS_GDB_TIMEOUT to the required value.
- If an interrupt was received while waiting for a GDB target to connect, the
  simulation would start without the connection being made. This has been fixed.

Serial device model support
-------------------------------------------------------------------------------
- Any model which uses the library ovpworld.org/modelSupport/psesockets/1.0 can
  now automatically create a console window connected to the serial device.
- The feature is enabled by a new argument 'console':
  sockOpenBlocking(int port, char *log, char *source, Bool verbose,Bool console)

VMI API
-------------------------------------------------------------------------------
- The vmiBusPort structure has been enhanced to specify minimum and maximum
  bit widths for connected ports.
- The vmiBusPort structure has a new 'domain' field which gives the memDomain
  object connected to this port. Note that this means that port descriptions can
  no longer be static objects but must be instance-specific.
- It is now possible to specify any number of bus ports to a processor instance.
  When the virtual memory constructor is called, the 'domain' field in each port
  structure will have been filled with the memory domain to which that port has
  been connected. If the port is unconnected, the 'domain' field will be NULL.
- The restriction that ports should be named only INSTRUCTION or DATA has been
  removed. Bus ports can now have any name.
- The memPriv type has a new member, MEM_PRIV_ALIGN, which forces all accesses
  to regions with this privilege to be aligned. This allows aligned/unaligned
  behavior dependent on address (required by ARM processors).
- Explicit read address snap and write address snap functions have been added
  to the processor vmiAttrs structure (previously, address snapping was done by
  the read and write alignment exception callbacks if required). See chapter 12
  of the OVP Processor Modeling Guide for a detailed description.
- Read and write privilege exception handlers have a new by-ref parameter
  'action' of type vmiLoadStoreAction. If set to VMI_LOAD_STORE_TERMINATE (the
  default value), the current load or store is terminated. If set to
  VMI_LOAD_STORE_CONTINUE, the current load or store will be retried when
  control returns from the privilege exception handler. Default behavior is
  backwards-compatible with previous product versions.
  
VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- A new function vmirtBlock() has been added, taking a processor argument. If
  the processor is the currently-executing processor, the current instruction is
  aborted and the processor is halted. On restart, the current instruction is
  re-executed. If the processor is not the current processor, behavior is
  identical to vmirtHalt().

ICM API
-------------------------------------------------------------------------------
- The icmPriv type has a new member, ICM_PRIV_ALIGN, which forces all accesses
  to regions with this privilege to be aligned. This allows aligned/unaligned
  behavior dependent on address (required by ARM processors).

Simulator Core
-------------------------------------------------------------------------------
- A bug has been fixed that prevented SystemC 'wait' calls from working
  correctly in memory callbacks. The bug was introduced in release 20120313.0.
- A bug has been fixed that prevented vmirtFlushTargetMode from working
  correctly in some circumstances for modes other than the current processor
  mode.
- A bug has been fixed that allowed execution in ASID-disabled regions when
  VAP tools were enabled.

###############################################################################
##                                                                           ##
## Date 2012-March-16                                                        ##
##                                                                           ##
## Release 20120313.0                                                        ##
##                                                                           ##
###############################################################################

MIPS BareMetal platforms memory standardized
-------------------------------------------------------------------------------
All of the MIPS BareMetal platforms now implement the same memory maps. 
Non-TLM2.0 platforms implement a fully populated memory map. TLM2.0 platforms, 
which should not implement a fully populated memory map because DMI memory may 
not be demand mapped, now all implement a memory map that is the same for all 
MIPS BareMetal platforms and is a superset of the memory maps required by 
various toolchains that are used for testing.

AMD 79C970 Model - bug fixed
-------------------------------------------------------------------------------
The bug prevented a platform using multiple instances of this model.

RSP Interface
-------------------------------------------------------------------------------
- The GDB RSP interface [activated by icmInit("rsp", <port_number>)] now supports
  the gdb 'detach' command which allows the simulator to run on without debugger
  interaction. The debugger can also be reconnected to the running simulator on
  the same port number. Note that this port number is now reserved for the entire
  duration of the simulation.

- The RSP interface now detects when a processor is stopped in a delay slot,
  preventing operations that would put the processor into an inconsistent state.

- The RSP interface in OVPsim now presents each member of a multicore processor
  as a thread. After starting and connecting gdb to your platform, use the command
  'info threads' to see the individual cores.

MIPS Processor Model
-------------------------------------------------------------------------------
- Support for Dual Variable/Fixed TLB implementation support added. Enabled by
  configuring Config.MT=4 and setting Config4 register values appropriately.
- Configuration parameter overrides (aka attributes) are now fully range 
  checked to ensure specified values are legal.
- Added support for TLBINV/TLBINVF instructions, enabled by Config4.IE field.
- Added support for EntryHi.EHINV field when Config.IE is set or a Dual
  Variable/Fixed TLB is present.
- Deprecated the hiddenTLBentries configuration parameter, which improved
  Linux performance by keeping TLB Entries active when possible. To get a 
  similar result, set the config1MMUSizeM1 parameter to 63. Platforms which
  use hiddenTLBEntries will see changes in the TLB behavior.
- Read and write callbacks for aborts have been added.
- A full cache model has been added for the MIPS processor model. Set  the
  string attribute "enablecache" to "full" or "tag" to enable it. Simulation
  performance is greatly reduced when the cache model is enabled.
- YQ nets are now correctly present in all MT processor variants and excluded
  from non-MT variants.
- The default initial configuration for 34K processors has been changed to 
  implement 2 TCs, one on each VPE (previously it was 5 TCs, all initially
  on VPE0). The VPE0MaxTC and mvpconf0tc parameters may be specified to 
  override this behavior.
- The model can now generate a bus error exception for accesses to memory
  that is not defined in the platform by setting the busErrors configuration
  parameter on a MIPS processor to 1. 

ARM Processor Model
-------------------------------------------------------------------------------
- "pabort" and "dabort" input signals have been deleted: use icmAbortRead and
  icmAbortWrite to force external abort of memory accesses (change required so
  that exception state is correctly set).
- Large Physical Address (LPA) extension has been implemented.
- Security Extensions are supported in the processor core and MPCore block.
- Model has been changed to reflect new privilege level nomenclature (PL0...PL2)
  instead of old nomenclature (user and privileged).
- ACTLR specification has been corrected for each variant that supports it.
- Fixed bug in WFI instruction: processor should not wait if there is pending
  but masked interrupt when this instruction is executed.
- The model has been enhanced to use the new domain-specific load and store
  morph-time functions (better performance and simpler code for LDRT/STRT etc).
- simulateExceptions argument to constructor is now ignored (see ICM API changes
  below).
- For ARMv6 and ARMv7, endianness now applies only to data accesses (instruction
  fetch is always little-endian).
- Many Cp15 registers have been added to the model register view.
- The CPACR.D32DIS bit which disables the high half of the SIMD/VFP
  register bank for VFP instructions is now supported.

ARMM Processor Model
-------------------------------------------------------------------------------
- "pabort" and "dabort" input signals have been deleted: use icmAbortRead and
  icmAbortWrite to force external abort of memory accesses (change required so
  that exception state is correctly set).
- Fixed bug in WFI instruction: processor should not wait if there is pending
  but masked interrupt when this instruction is executed.
- The model has been enhanced to use the new domain-specific load and store
  morph-time functions (better performance and simpler code for LDRT/STRT etc).
- simulateExceptions argument to constructor is now ignored (see ICM API changes
  below).
- override_VTOR parameter added to allow override of the reset value for the
  VTOR system control register. 

ARC Processor Model
-------------------------------------------------------------------------------
- simulateExceptions argument to constructor is now ignored (see ICM API changes
  below).

ICM API
-------------------------------------------------------------------------------
- ICM_ATTR_RELAXED_SCHED and ICM_ATTR_APPROX_TIMER are now deprecated:
  simulation is now always both fast and exactly accurate with regard to
  instruction count.
- ICM_ATTR_SIMEX behavior has been clarified: this flag now determines only
  whether load/store privilege and alignment exceptions are enabled.
- icmSetSchedFn() startcb callback behavior change
  The startcb used to occur during the call to icmSimulationStarting but now
  occurs in the first call to icmSimulate, before the processor executes its
  first instruction. The semantics are still valid, but attention should be paid
  to any interlocks held between a debugger and the platform.
- Connections to PSE ports are now subject to strict checks:
  - PSE bus ports that are not connected at the platform level generate a
    warning.
  - Connections made at the platform level to unknown PSE bus and net ports
    generate an error.

- A new function icmSMPIsLeaf() has been added, which returns true if the given
  part of an SMP executes code and false if it is a 'container'.

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- New functions vmimtStoreRRODomain, vmimtStoreRCODomain, vmimtLoadRRODomain,
  vmimtTryStoreRCDomain and vmimtTryLoadRCDomain have been added that allow
  code to be generated to load or store to any domain (previously, only loads
  and stores to the current data domain could be specified). This simplifies
  code generation for instructions such as STRT and LDRT on ARM processors.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- A new function vmirtGetSMPCpuType has been added to query the SMP details
  of a processor.
- exception handling routines of types vmiRdPrivExceptFn, vmiWrPrivExceptFn
  and vmiIFetchFn have been enhanced so that they are passed the the memory
  domain of the failing access.
- The simulateExceptions argument to vmiConstructorFn is now always passed
  True (models should assume that all exceptions are always enabled).
- Documentation of vmirtAddReadCallback, vmirtAddWriteCallback and
  vmirtAddFetchCallback has been corrected.
  
Simulator Core
-------------------------------------------------------------------------------
- The core of the simulator has been modified so that SIGSEGV signals are no
  longer used for internal purposes. Any SIGSEGV signal now indicates a true
  error.
- Performance for small quantum sizes has been improved by up to 6x (depending
  on the exact platform and quantum size).
- A bug has been fixed that caused bad code to be generated, exposed by ARM
  instruction sequences of the form:
        mov     r1,r0
        uadd8   r1,r1,r2
        sel     r1,r3,r4
- A bug has been fixed that caused instruction fetch callbacks not to be called
  in some circumstances for physically-mapped code blocks.

RSP Interface
-------------------------------------------------------------------------------
The GDB RSP interface [activated by icmInit("rsp", <port_number>)] now supports
the gdb 'detach' command which allows the simulator to run on without debugger
interaction. The debugger can also be reconnected to the running simulator on
the same port number. Note that this port number is now reserved for the entire
duration of the simulation. 

ARM9.makefile.include and ARM11.makefile.include removed
-------------------------------------------------------------------------------
These two Makefiles were provided with the OVP ARM Toolchain. The ARM toolchain 
only contained libraries to support the ARM7 processor family. These makefiles
have now been removed as they could cause linkage errors or inconsistent output.

###############################################################################
##                                                                           ##
## Date 2012-January-4                                                       ##
##                                                                           ##
## Release 20111125.2                                                        ##
##                                                                           ##
###############################################################################

Statically Linked Demos Licensing Fixed
-------------------------------------------------------------------------------
An error was introduced into the statically linked Demos, these are the demos
OVPsim_single_*, OVPsim_multicore2_*, OVPsim_manycore24_* and BareMetal*, this 
has now been rectified. 
The error required that the license feature IMP_OVPSIM was always available.

###############################################################################
##                                                                           ##
## Date 2011-December-15                                                     ##
##                                                                           ##
## Release 20111125.1                                                        ##
##                                                                           ##
###############################################################################

Unconnected Output Nets Written
-------------------------------------------------------------------------------
The result of writing to an unconnected net has been modified. 
Previously, a net must be connected with another device listening to the net 
with a callback. If this was not correct the simulation would stop on a write
to the unconnected net.
Nets may now be left unconnected and writes to an unconnected net complete. 

Model Licensing
-------------------------------------------------------------------------------
Models that cannot run without a license must use a new API.
Processor Models:
    Bool        vmirtGetLicense(void)
        Checks out a license for the model. The simulator determines the feature name.
        Please contact Imperas for details.
    const char *vmirtGetLicenseErrString(void)
        Returns the error message should the license check fail.
        
Plugins and intercept libraries:
    Bool        vmiosGetLicenseFeature(const char *feature)
        Checks out a license for the model. The simulator determines the feature name.
        Please contact Imperas for details.
    
    const char *vmiosGetLicenseFeatureErrString(const char *feature)
        Returns the error message should the license check fail.
        

OVP Model SmartLoaderArmLinux
-------------------------------------------------------------------------------
This is a 'dummy' device used to setup the environment for a Linux kernel to 
start execution. The model has been enhanced to allow setting of new parameters
and to modify the physical base address when a separate boot program is loaded.
 
Environment Variables
-------------------------------------------------------------------------------
To see a list of environment variables read by this and other Imperas products
setenv IMPERAS_ENV=1  before invoking any program that uses icmInit().

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- The definition of vmiReg has been enhanced to support 64-bit hosts.
- The first argument of vmimtArgReg has been changed from bits to enumerated
  type vmiRegArgType to allow floating point arguments to be identified
  (required for 64-bit host port).
- Archaic register type VRT_USEBASE is no longer supported: do not use.
- Functions vmimtTestRR, vmimtTestRC and vmimtTestCR have been added (set a
  flag byte depending on the result of a bitwise-and comparison).
- Functions vmimtGetBlockMask, vmimtSetBlockMaskC and vmimtSetBlockMaskR have
  been added to allow direct manipulation of the processor block mask.
- The busErrorCB callback in the vmiAttrs structure has been replaced with
  rdAbortExceptCB and wrAbortExceptCB callbacks (so that read and write aborts
  from memory callbacks can be distinguished).
- The rdPrivExceptCB and wrPrivExceptCB callbacks in the vmiAttrs structure now
  have an extra argument 'attrs' of type memAccessAttrs, which will be
  MEM_AA_FALSE if this is an artifact read or write (for example, by a
  debugger). For such accesses, the functions may wish to create memory mappings
  (so that the artifact access can complete successfully) but should not update
  true processor state (by, for example, taking an exception for a bad address).
  Previously, processor models were not notified of artifact accesses and
  therefore could not create memory mappings that might have been required to
  support those accesses.

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- VMI Header file vmiI86.h has been deleted: no assumptions should be made
  regarding native registers used by the simulator core.
- Function vmirtGetBlockMask has been added (returns the current processor
  block mask).
- Callback functions of type vmiMemReadFn and vmiMemWriteFn now have an extra
  argument 'attrs' of type memAccessAttrs which should be used to distinguish
  true reads/writes (generated by processor models) and artifact reads or writes
  (for example, by a debugger). The three possible states are:
    1. processor=NULL, attrs=MEM_AA_FALSE:
       an artifact read with no processor context
    2. processor=non-NULL, attrs=MEM_AA_FALSE:
       an artifact read with the passed processor context
    3. processor=non-NULL, attrs!=MEM_AA_FALSE:
       a true read with the passed processor context
  Previously, only states 1 and 3 were supported.

ICM API
-------------------------------------------------------------------------------
- icmSetMemStatusFail has been replaced by icmAbortRead and icmAbortWrite (so
  that read and write aborts can be distinguished in processor models).

New Processor Model
-------------------------------------------------------------------------------
There are new processor models added to the OVP Fast Processor Model library.

- Xilinx MicroBlaze
  The Xilinx MicroBlaze processor has been added to the OVP library, a description
  of the support status is detailed below, including some missing/partial implementation
    Instruction Set: This model fully implements the instruction set up to and including V8.2
    Privileged Instructions: Implemented
    Virtual-Memory Management: Partially Implemented, still undergoing development
    Reset, Interrupts, Exceptions and Break: Implemented
    Floating Point Unit: Implemented
    Stream Link Interface: Implemented
    Supported Core Configuration Parameters
        Barrel Shifter
        Hardware Divider
        Machine Status Set/Clear Instructions
        Hardware Exceptions
        Pattern Compare Instructions
        Floating Point Unit (FPU)
        Disable Hardware Multiplier
        Processor Version Register (PVR)
        Hardware Multiplier 64-bit Result
        Floating Point Conversion and Square Root Instructions
        Memory Management Unit
        Extended Stream Instructions 
        Count Leading Zeros Instruction
        Memory Barrier Instruction
        Allow Stream Instructions in User Mode
    

New Examples
-------------------------------------------------------------------------------
Two new platform examples have been provided:
Example/Platforms/resetControl: 
    This illustrates how a 'reset' net can be used to hold a processor model in
    a reset state after simulation has started.
Example/Platforms/queryProcesor: 
    This shows the query functions that can be used to obtain information from
    the processor model. Note: This example attempts to read from several 
    different processor types, the result will depend if the model is available
    in the specific installation.
    
Simulator Core
-------------------------------------------------------------------------------
- Bug causing occasional memory corruption when vmirtSetMode or
  vmirtSetBlockMask was called during execution of delay slot instruction has
  been fixed.
- Bug causing incorrect behavior for 128-bit, 256-bit, 512-bit and 1024-bit
  arguments to vmimtTryStoreRC and vmimtTryLoadRC fixed.
- 64-bit memory addressing bug fixed (when the memory address high word was held
  in a native register and dirty).

ARM Processor Model
-------------------------------------------------------------------------------
- Bug in behavior of VPUSH/VPOP instructions fixed (stack pointer was not being
  updated).
- processor model now implements improved debug memory access (all memory
  regions present in the MMU are accessible to a debugger irrespective of
  whether the processor has accessed those regions)
- MPCore registers have been added to the ICM register interface.
- The NEON vld4.32 to all lanes with alignment specified as 128 would give an 
  unimplemented instruction error. This has been fixed.
- Support for the SIMD/VFP Fused MAC instructions (vfma, vfms, vfnma, vfnms)
  has been added.

ARMM Processor Model
-------------------------------------------------------------------------------
- processor model now implements improved debug memory access (all memory
  regions present in the MMU are accessible to a debugger irrespective of
  whether the processor has accessed those regions)

MIPS Processor Model
-------------------------------------------------------------------------------
- The FCSR.Cause.E bit is now properly set when the floating point ADD.S or
  MUL.S instructions produce a denormal result.
- Accesses to CP0 Register 29, Select 0 and 2 (ITagHi and DTagHi) on 24K and 
  later processors will now read/write the value rather than generate a message
  that the register is unsupported. The underlying functionality of these
  registers is not supported however.
- When loading MIPS ELF files, if the program header p_paddr field differs from
  the p_vaddr field then the code for that section will be loaded at both 
  addresses (note these are both virtual addresses). This occurs in ELF files
  used to load data to a ROM where a monitor or boot loader program copies the
  data to RAM. The simulation may or may not include this monitor or boot
  loader. By loading to both addresses the simulation will work either way. 
- processor model now implements improved debug memory access (all memory
  regions present in the MMU are accessible to a debugger irrespective of
  whether the processor has accessed those regions)

###############################################################################
##                                                                           ##
## Date 2011-September-29                                                    ##
##                                                                           ##
## Release 20110906.3                                                        ##
##                                                                           ##
###############################################################################

MIPS Processor Model
-------------------------------------------------------------------------------
- The mode access API has been corrected to report true MIPS modes (Kernel,
  Debug, Supervisor and User) instead of implementation modes (Kernel/ERL0,
  Kernel/ERL1, Supervisor and User).
- MTFPU configuration option now supports specification of multithreaded FPU
  with traditional MTTC1/MTTHC1/MFTHC1 behavior (MTFPU=1) or modified MTTC1/
  MTTHC1/MFTHC1 behavior consistent with newer cores (MTFPU=2).

Simulator Core
--------------
- Bug causing incorrect address to be targeted for platforms with 64-bit virtual
  address space and 32-bit physical address space.
- Bug causing incorrect code block to be executed in obscure circumstances in
  processors supporting delay slots has been fixed. This manifested itself on
  the MIPS processor when exceptions were taken on delay slot instructions and
  the exception handler changed the EPC to return to the delay slot instruction 
  (rather than the branch instruction as it normally would) and that instruction 
  caused a second exception.

Preparation Work for 64 bit port
-------------------------------------------------------------------------------
Work has begun on porting the OVP libraries to be 64-bit compatible. This will
eventually replace the current 32-bit emulation, on 64-bit host which is
used under both Linux and Windows. This work requires some changes to the
directory structure within the product trees, for example
Imperas/bin/Linux,   becomes Imperas/bin/Linux32
Imperas/lib/Linux,   becomes Imperas/lib/Linux32
Imperas/bin/Windows, becomes Imperas/bin/Windows32
Imperas/lib/Windows, becomes Imperas/lib/Windows32
The make infrastructure files have been updated accordingly, and
the environment setup scripts bin/setup.sh and setup.bat have been updated to
reflect these changes. In addition the Windows installers have also been
updated to reflect these changes.
If you have written any scripts of your own, these will need to be updated
accordingly.

Added new function: icmAddPtrAttr()
-------------------------------------------------------------------------------
A new function, icmAddPtrAttr(), has been added for passing a native host 
pointer to a model as an attribute. 

The types and macros in vmiParameters.h have been modified to support this
new native host pointer type.


Component (TLM2.0) Library
-------------------------------------------------------------------------------
The component library now has TLM interface files for each variant of each
processor model. 
The generic interface is     :  processor.igen.hpp
The variant interfaces are   :  <processor_name>_<variant>.igen.hpp

###############################################################################
##                                                                           ##
## Date 2011-August-22                                                       ##
##                                                                           ##
## Release eng.20110822.0                                                    ##
##                                                                           ##
###############################################################################

Component Library
-------------------------------------------------------------------------------
Moved the special version of the UART 16450 model used in the MIPS Malta platform
from national.ovpworld.org/peripheral/16450C to mips.ovpworld.org/peripheral/16450C

MIPS Processor Model
-------------------------------------------------------------------------------
- Config3.ISAOnExc is now not writable unless both MIPS32 and microMIPS
  are present.
- TCStatus.TSSt bit has been removed

ICM API
-------------------------------------------------------------------------------
icmGetProcessorElfCode() now returns a _list_ of ELF codes (some processors
use more than one). The list is zero terminated.

icmSetMemStatusFail() now requires 2 arguments : processor and failing address.

TLM2.0 Interface
-------------------------------------------------------------------------------
A bus error in the TLM2.0 interface (e.g. caused by a missing decode)
resulting in an incomplete access can be signaled using icmSetMemStatusFail
(see above). This function can now cause a processor model to take an exception
if the model is programmed to do so.

VMI API
-------------------------------------------------------------------------------
A new field alternativeElfCodes can be used to supply  a list of alternative
ELF codes (some processors use more than one). The list must be zero terminated.

OVPsim Program loader (e.g. using icmLoadProcessorMemory).
-------------------------------------------------------------------------------
When loading the cores of an MP processor with different programs, a bug
prevented each starting at its correct location. This has been fixed.

###############################################################################
##                                                                           ##
## Date 2011-July-21                                                        ##
##                                                                           ##
## Release 20110721.1                                                        ##
##                                                                           ##
###############################################################################

MIPS Processor Model
-------------------------------------------------------------------------------
- Model has been restructured to allow implementation of MIPS64 processor (not
  yet complete).
- Config3.VInt default value corrected
  The Config3.VInt bit was not set by default on several processor families
  whose  architectural specification called for it to be set.
  It is now set to 1 by default on all variants in the 4KE, 24K, 24KE and 34K 
  families, matching the architectural specifications. The MIPS processor model 
  parameter "vectoredinterrupt" can be set to "disable" to override the default 
  value if needed.
  Note that the 74K, 1004K, 1074, M14Kc and M14K families already had this bit
  properly set by default. This bit is still properly not set in the 4K family.

ICM API. icmTerminate MUST be called explicitly at the end of a session.
-------------------------------------------------------------------------------
This function was executed using 'atexit', but this is no longer the case.
This release includes code to detect the missing call.

ICM API. Deprecated functions:
-------------------------------------------------------------------------------
Functions
    icmFreeBus,
    icmFreeBusBridge,
    icmFreeFifo,
    icmFreeMemory,
    icmFreeMMC,
    icmFreeNet,
    icmFreeProcessor,
    icmFreePSE
have been deprecated.

Please use icmInit() at the beginning of a session, and icmTerminate() at the end.

VMI API. IMPORTANT CHANGE TO MODEL ATTRIBUTES TABLES 
-------------------------------------------------------------------------------
Processors, intercept objects and MMCs all have a new field which MUST be
correctly initialized for the model to compile and function correctly.
It's the 2nd field in the table, called 'modelType'; it must be set to 

VMI_PROCESSOR_MODEL, VMI_INTERCEPT_LIBRARY or VMI_MMC_MODEL
    
accordingly.


Preliminary ARM Cortex-A5 Variant Added (arm.ovpworld.com/processor/arm)
-------------------------------------------------------------------------------
A new variant 'Cortex-A5UP' has been added. By default this includes the 
optional SIMDv2 (NEON) and VFPv4 extensions. 

The optional NEON and floating point extensions may be disabled on all Cortex-A 
processors by setting the new 'override_advSIMDPresent' and 'override_vfpPresent'
parameters to 0. 

While it includes all relevant publicly documented features of the A5, currently 
this model is described as preliminary since it does not include support for the 
new Fused MAC instructions that have yet to be fully documented publicly by ARM.


###############################################################################
##                           C A N D I D A T E                               ##
## Date 2011-July-01                                                         ##
##                                                                           ##
## Release 20110701.0                                                        ##
##                                                                           ##
###############################################################################

Simulator Core
--------------
- Code dictionary memory management has been improved (reduces out-of-memory
  conditions in platforms with many processor instances).
- Processor attribute "dictionarysize" is deprecated.
- Recovery from out-of-memory situations has been improved (bogus assertions
  eliminated).

ICM API Used to connect nets to processors
-------------------------------------------------------------------------------
Note that all interrupt (and other single-bit) inputs are now always connected
to the top level of a processor model, rather than to the lower-level
processors. The names of the processor inputs have been modified to take this
into account. For example:

Was
     // handle to main processor, note the name
    icmProcessorP processor = icmNewProcessor("u1", ......);
    
    // find the VPE by hierarchical name
    icmProcessorP vpe0 = icmFindProcessorByName("u1_VPE0");
    
    // connect to net on VPE
    icmConnectProcessorNet(vpe0, net, "hwint0", ICM_INPUT);

Becomes
     // handle to main processor
    icmProcessorP processor = icmNewProcessor("u1", ......);
    
    // connect to hierarchically named net on main processor
    icmConnectProcessorNet(processor, net, "hwint0_VPE0", ICM_INPUT);

VMI API. New method of creating model attributes. 
-------------------------------------------------------------------------------
(note that model-specific attributes are now referred to as model parameters).

deprecated:
    vmirtPlatformStringAttribute
    vmirtPlatformUns64Attribute

The model must provide two new functions in the model attrs table:

VMI_PROC_PARAM_TABLE_SIZE_FN(arcParamValueSize) {
    // return the size of the parameter values table
}

VMI_PROC_PARAM_SPECS_FN(getParamSpec) {
    // return the next model parameter specification
}

Each parameter is specified by a structure containing:
name, type, default value, legal values, description etc.

Please refer to vmiParameters.h

VMI API. Method of creating bus ports.
-------------------------------------------------------------------------------

The model must provide a function in the model attrs table to return the next
bus port specification

VMI_BUS_PORT_SPECS_FN(getNextBusPort) {
    // return the next bus port spec
}

see vmiPorts.h

VMI API. New method of creating net ports.
-------------------------------------------------------------------------------

The model must provide a function in the model attrs table to return the next
net port specification

VMI_NET_PORT_SPECS_FN(getNextNetPort) {
    // return the next net port spec
}

see vmiPorts.h

VMI API. New method of creating conn ports (point-to-point links).
-------------------------------------------------------------------------------

The model must provide a function in the model attrs table to return the next
conn port specification

VMI_FIFO_PORT_SPECS_FN(getFifoPortSpec) {
    // return the next conn port spec
}

see vmiPorts.h

VMI API. New method of installing simulator information in a processor model
-------------------------------------------------------------------------------
See vmiDoc.h and VMI_PROC_INFO_FN() in vmiModelInfo.h 

ICM API - Access to processor model information
-------------------------------------------------------------------------------
New functions have been added to give access to data that is now available in
the processor model. They include:

icmGetProcessorVlnv             Directory where the model normally lives.
icmGetProcessorDefaultSemihost  Directory where the default semihost library
                                lives.
icmGetProcessorElfcode          The regular ELF code used by the processor's
                                tool chain.
icmGetProcessorEndian           Endian of this processor model.
icmGetProcessorGdbPath          Path in an Imperas release to a gdb that works
                                with the model.

Reading a processor's documentation:
icmGetProcessorDoc              Get a documentation node

icmDocNextNode, icmDocChildNode Search a document hierarchy
icmDocIsText                    What kind of node?
icmDocText                      Get the name or text content

ICM memory interface with SYSTEMC TLM2.0
-------------------------------------------------------------------------------
ICM memory Access routines:

  icmReadProcessorMemory
  icmDebugReadProcessorMemory
  icmWriteProcessorMemory
  icmDebugWriteProcessorMemory

  icmReadBus
  icmWriteBus

Now return Bool status to indicate if successful. Used with a TLM2.0 platform,
The icmXXXProcessorMemory functions can now detect if the TLM transactions were
successful.

An example of the use of these functions is in
$IMPERAS_HOME/Examples/Debugger/threads/main.cpp

A new function icmSetMemoryStatusFail() can be used during a memory callback
to signal that the attempt has failed.


ARM Cortex-M Profile Processors (arm.ovpworld.com/processor/armm)
-------------------------------------------------------------------------------
A new variant named 'Cortex-M4' with support for the ARMv7E-M DSP extension has 
been added.

A new variant named 'Cortex-M4F' with support for the ARMv7E-M DSP and FPv4-SP 
VFP extensions has been added.

A new model parameter named 'disableBitBand' has been added. When set to '1' 
this disables the bit banding feature on any Cortex-M processors.


ICM API
-------------------------------------------------------------------------------
- The value ICM_ATTR_NOTRACE_ANNUL can be added to a processor instance to
  prevent tracing of annulled instructions.
- icmGetAllProcessorCommands() Internal error fixed.
- Added new functions icmDebugReadProcessorMemory and
  icmDebugWriteProcessorMemory which will cause TLM debug transactions and will
  not cause side effects in the processor model. If writing a debugger, use
  these functions in preference to icmReadProcessorMemory and
  icmWriteProcessorMemory.
- Added return code of type Bool to icmReadMemory, icmWriteMemory, icmReadBus,
  icmWriteBus, icmReadProcessorMemory and icmWriteProcessorMemory. The return
  code is True if the access succeeded and False otherwise.
  In the case of writes, unwritable bytes are ignored; in the case of reads,
  unreadable bytes are filled with the pattern 0xbadc0de4.
- Added function icmSetMemStatusFail, which can be called within callback-mapped
  memory function (icmMemReadFn or icmMemWriteFn) to specify that the access
  has failed (reported in the return code from the read and write functions
  listed above).
- Added member ICM_ATTR_NOTRACE_ANNUL to processor attributes enumeration
  (icmNewProcAttrs): if present, this prevents trace being emitted for annulled
  delay slot instructions.

VMI API
-------------------------------------------------------------------------------
- vmirtReadNByteDomain and vmirtWriteNByteDomain now have a return code of type
  memMapped. The return code is one of:
    MEM_MAP_NONE: entire read/write failed;
    MEM_MAP_PART: some part of the read/write failed and some part succeeded;
    MEM_MAP_FULL: entire read/write succeeded.
  In the case of writes, unwritable bytes are ignored; in the case of reads,
  unreadable bytes are filled with the pattern 0xbadc0de4.

Multicore2 Demos
-------------------------------------------------------------------------------
The application 'multicore2.c' used in demos has been altered to split the
receiving and writing parts into separate files. While the code generated is
the same this improves the visualization while debugging.

Demos for Eclipse Helios 3.6.2
-------------------------------------------------------------------------------
The Eclipse demo scripts provided in multi-core demos have been extended to
show how to select the core that you wish to debug.
Additionally, if the Imperas M*SIM is available, how to select and debug multiple
cores.

MIPS Processor Model
-------------------------------------------------------------------------------
- The 'modelconfig' attribute is deprecated. Use 'variant' instead.
- Config7.WII has been implemented (processors are awoken from WAIT instruction
  by interrupt even if interrupts are disabled or the processor is interrupt
  exempt). This bit is enabled in default configurations of 24K, 34K, 74K, 1004K
  and 1074K variants.
- Register view (function mips32RegInfo) has been enhanced to allow access to
  shadow registers, where the processor implements them.
- Boolean attribute MIPS_TRACE has been added which (if set to "enable") causes
  instruction and register traces to be emitted in standard MIPS format
  (specifically, only register changes are reported).
- LLaddr register removed from 4K, 24K and 74K variants.
- Address held in LLaddr register changed from virtual to physical.
- SC now validates only that LLbit is set when performing write (not that the
  physical address matches).
- Debug mode is partially implemented.
- Config1.EP is enabled to indicate presence of debug mode.
- Fixed bug in update of TCStatus.DT (in some circumstances, this bit was set to
  1 one instruction too early).

###############################################################################
##                                                                           ##
## Date 2011-April-27                                                        ##
##                                                                           ##
## Release 20110427.0                                                        ##
##                                                                           ##
###############################################################################

Demos for Eclipse Helios 3.6.2
-------------------------------------------------------------------------------
A number of Demos now have additional scripts, identified by the prefix
DEBUG_ECLIPSE_ that setup an Eclipse workspace to contain a project that will
allow the application to be debugged using Eclipse CDT.
These make use of an Imperas Eclipse installation provided as an installer
Imperas_Eclipse_Helios_3_6_2.0.exe (A linux installer will be available later)

ARM Integrator Compact Platform added for Cortex-A9UP
-------------------------------------------------------------------------------
This release includes a platform based on the ARM 'Integrator' design with a
Linux kernel built for the ARM Cortex-A9

Source of Processor and Peripheral Models
-------------------------------------------------------------------------------
The source of processor and peripheral models is now included in the model
and simulator packages available for download from www.ovpworld.org
The www.ovpworld.org/library pages used to have .zip files that included the
source of the models - these are no longer needed and have been removed.

API Doxygen Formatting enhancement
-------------------------------------------------------------------------------
The OVP APIs documentation is created using Doxygen and can be viewed as part
of the OVP Local Documentation at $IMPERAS_HOME/doc/index.html.  This format
has been enhanced for readability and a search function on the top left has
been added.

ARM NEON support
-------------------------------------------------------------------------------
The ARM VFPv3 and Advanced SIMD instruction set extensions (aka NEON) have been
added for the Cortex v7-A and v7-R architectures. (Note that the pre-v7 VFP
instructions (VFPv2) are NOT supported.) All instructions including the
half-precision extensions are supported.

A new processor attribute named 'enableVFPAtReset' has been added. When set to
'1' this will change the reset values for the FPEXC.EN, CPACR.CP10 and
CPACR.CP11 fields so that SIMD/VFP instructions are enabled (when these bits
are not set these instructions give an Undefined Instruction exception). This
attribute is added as a convenience, so that it is not necessary to have boot
code that sets these fields.

Evaluation Licenses
-------------------------------------------------------------------------------
The mechanism related to licensing copies of OVPsim for evaluation has changed
and now OVPsim connects to the internet as part of the licensing. If OVPsim
cannot connect to the internet, or is blocked by firewall software, then the
software will not run. If this occurs during your evaluation, then please
allow your computer to connect to the internet and try to run OVPsim again.
If you need evaluation licenses for OVPsim that can be used with no internet
connection - then please email your request and reasons / information to
license@ovpworld.org.

VMI Run Time Interface (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- 16-bit integer type vmi_FT_16_INT added to vmiFType (allowing conversion
  between 16-bit signed integers and floating point types).
- 16-bit and 32-bit unsigned integer types vmi_FT_16_UNS and vmi_FT_32_UNS added
  to vmiFType (allowing conversion between unsigned integers and floating point
  types).
- new member vmi_FMSUBR added to vmiFTernop enumeration (multiply and subtract
  reversed).
- Argument indeterminateUns16 added to vmirtConfigureFPU to allow the
  indeterminate result value for 16-bit integers to be specified.
- Arguments indeterminate16ResultCB, indeterminate32ResultCB and
  indeterminate64ResultCB added to vmirtConfigureFPU to allow more flexible
  determination of indeterminate values.
- Argument fzClearsPF added to vmirtConfigureFPU to support ARM processors
  (which do not set precision flag when floating point results are flushed to
  zero).

Processor ISS Encapsulation
-------------------------------------------------------------------------------
A generic example showing how a third party ISS can be encapsulated and used
within the OVP simulation environment has been added into the Examples
directory supplied at Imperas/Examples/Models/Processor/Encapsulation
This now means that the specific example showing the encapsulation of the
Tensilica Xtensa processor model is no longer included. If you wish to use the
Tensilica Xtensa processor ISS within OVP please contact info@imperas.com

###############################################################################
##                                                                           ##
## Date 2011-April-08 (intermediate limited release)                         ##
##                                                                           ##
## Release 20110330.1                                                        ##
##                                                                           ##
###############################################################################

OVPsim/SystemC/Debugger
-------------------------------------------------------------------------------
- Bug causing a platform to restart after completion has been fixed.
- Bug causing OVPsim to ignore the return value of the end-of-schedule callback
  fixed.

TLM2.0
-------------------------------------------------------------------------------
The TLM2.0 interface now propagates SystemC hierarchical names to ICM platform
components.

The TLM2.0 interface can produce trace messages to help with debug. Please
refer to OVPsim_Using_OVP_Models_in_SystemC_TLM2.0_Platforms.pdf.

MIPS Processor Model
-------------------------------------------------------------------------------
- Bugs related to incomplete implementation of per-TC Status.FR have been
  fixed (specifically affecting mttc1, mftc1).
- Status.FR is now copied on a fork instruction.
- Register access from platform is now supported at both VPE and TC levels in
  MT variants.
- Built in support for MIPS AVP test termination added.
- Reset signal is now level-sensitive (processor will remain halted while reset
  is high).

ARM models
-------------------------------------------------------------------------------
- ARMM now has 16 external interrupts.
- ARM1136J-S now uses ARMv6K profile instead of ARMv6 (matches latest ARM
  documentation).
- Fixed bug which prevented multiple TLB lockdown entries for different ASIDs
  coexisting.
- Added multiprocessing extensions:
  - decode added for ARMv7 PLDW instruction;
  - SCTLR.SW enable of SWP/SWPB instructions added;
  - TLBIALLIS, TLBIMVAIS, TLBIASIDIS, TLBIMVAAIS and TLBIMVAA TLB maintenance
    registers added;
  - variant Cortex-A9MP added (use attribute override_numCPUs to change the
    number of cores from the default, which is 4).

###############################################################################
##                                                                           ##
## Date 2011-Feb-24                                                          ##
##                                                                           ##
## Release 20110223.0                                                        ##
##                                                                           ##
###############################################################################

Micrium uC/OS-II Demo
-------------------------------------------------------------------------------
A new demo has been added showing the Micrium uc/OS-II running on the ARM
Cortex-M3 processor model. This is available to download.

OVP Model Source Code
-------------------------------------------------------------------------------
All source code for OVP models is now included in the release. The source code
is found in the Vendor Library Name Version (VLNV) library structure found
at $IMPERAS_HOME/ImperasLib/source.

Building is carried out using the Makefile found at
        $IMPERAS_HOME/ImperasLib/source/Makefile.library

This requires certain arguments
   Must be set to identify the source library
     VLNVSRC    is typically set to $IMPERAS_HOME/ImperasLib/source but can be
                any source library in the correct VLNV structure
   Set one of the following to direct identify the output location to be used
     SYSTEMVLNV is set to build into the standard product output library
     VLNVROOT   is set to an alternative output library


ICM API (See OVP and CpuManager User Guide)
-------------------------------------------------------------------------------
- For clarity ICM functionality has been split into several header files.
  Existing applications can continue to use the existing header.

-------------------------------------------------------------------------------
- An extra argument (the current processor) has been added to icmReadBus and
  icmWriteBus. This should be NULL if this bus access is not caused by the
  current processor.
- These functions have been added to allow easier access to registers:
	icmGetRegByName
	icmGetRegByUsage
- These functions have been added to support register groups
	icmGetNextRegGroup
	icmGetRegGroupByName
	icmGetRegGroupName
	icmGetNextRegInGroup
	icmGetRegInfoGroup
- These functions have been added to allow exception state to be accessed:
    icmGetException
    icmGetNextException
    icmGetExceptionInfoName
    icmGetExceptionInfoCode
- These functions have been added to allow processor mode to be accessed:
    icmGetMode
    icmGetNextMode
    icmGetModeInfoName
    icmGetModeInfoCode

ICM Debugger Integration Example
-------------------------------------------------------------------------------
Example $IMPERAS_HOME/Examples/Platforms/debuggerIntegration has been modified
to demonstrate usage of the new ICM API functions listed above.

PSE Read/Write Memory Warning Corrected
-------------------------------------------------------------------------------
A warning is generated when a PSE attempts to read or write from an area of
memory that cannot support the access. This was testing with an incorrect
address calculation that was producing a warning when it should not have.

SystemC TLM2.0 Integration
-------------------------------------------------------------------------------
Net and Bus connect methods have been disambiguated.

A processor TLM interface can be configured to raise an interrupt if a TLM
transaction os not completed by a memory or peripheral device. This behavior
has been added to the ARM model.

SystemC Filenames
-------------------------------------------------------------------------------
The model file platform.cpp has been renamed tlmPlatform.cpp.
Other model files used in the SystemC TLM2.0 integration have also been renamed.

FlexLM License Queuing
-------------------------------------------------------------------------------
License Feature request can now queue and retry, rather than simply exiting
to enable this feature set the following environment variable
IMPERAS_QUEUE_LICENSE=1

SYSTEMC Building Makefile Examples
-------------------------------------------------------------------------------
The usage of the SYSTEMC_HOME and TLM_HOME environment variables was
inconsistent within the examples and demos provided as part of OVP. These have
all now been made consistent.
SYSTEMC_HOME=root of System C installation for Linux or Windows
TLM_HOME=root of TLM installation

VMI API
-------------------------------------------------------------------------------
- Major version is now 3 because of significant API changes.
- Registers may now be associated with a group (for debugger presentation): see
  vmiDbg.h for the definition of the vmiRegGroup type and its usage.
- Processor models should define new debugger integration functions in the
  vmiAttrs structure:
  - a register group iterator, which returns each register group in turn.
  - an exception description iterator, which returns the name and model-specific
    code for each exception type in turn.
  - a mode description iterator, which returns the name and model-specific code
    for each processor mode in turn.
  - a current mode method, which returns the description of the current
    processor mode.
- vmimtTryStoreRC and vmimtTryLoadRC now accept 'bits' of any power of two up to
  1024 (i.e. up to 128 bytes).
- Function vmirtSetPCException has been added to allow explicit identification
  of control flow changes caused by exceptions (as opposed to normal branches)
- Exception and mode switch programmer's view events are now created implicitly
  for all processors.

MIPS Processor Model
-------------------------------------------------------------------------------
- Bug fixed in RI/XI bit implementation for M14K.
- Moved implementation of MVPConf0 register to CPU level.
- Implemented MVPConf1 register at CPU level.
- Added MTFPU configuration option (enables multithreaded FPU)
- Restrict registers transferred by the dbg /g command to GPRs, sr, lo, hi, bad,
  cause, pc, FPRs, fsr, fir.
- vmiRegInfo objects have been assigned register groups.
- vmiExceptionInfo and vmiModeInfo accessors implemented.

ARM models
-------------------------------------------------------------------------------
- Simplified coprocessor module (merged CP14 and CP15 tables).
- Implemented ThumbEE extension for ARMv7 on.
- Migrated to use standard ARM names for coprocessor registers (e.g. MIDR).
- TEX remap registers implemented
- vmiRegInfo objects have been assigned register groups.
- vmiExceptionInfo and vmiModeInfo accessors implemented.
- Changed external interrupts to be edge sensitive instead of triggering on
  callback with or without a value change.

Files containing port number may be created when ports opened
-------------------------------------------------------------------------------
This allows a script to open the next available port (set port=0) from the pool
and then obtain the number of the port opened from a file.
- GDB port connection
  An environment variable IMPERAS_PORT_FILE may be set to the name of a file
  that will be created containing the port number of a socket opened by the
  simulator when a port is opened to connect to GDB.
- pseSocket modelSupport port connection
  An environment variable IMPERAS_SOCKET_FILE may be set to the name of a file
  that will be created containing the port number of a sockets opened by a PSE
  peripheral that utilizes the pseSocket model support library.

Simulator Core
-------------------------------------------------------------------------------
- Fixed bug in vmirtGetString (it returned an empty string for memory regions
  implemented by device callbacks)
- SIGSEGV Handler
  OVPsim and CpuManager install a SIGSEGV handler in icmInit() and rely on this
  signal to handle unmapped memory accesses. The simulator will now ensure that
  previously installed handlers will be called if the current fault address is
  not recognized.
  Handlers installed AFTER icmInit() must also do this.

###############################################################################
##                                                                           ##
## Date 2011-Jan-14                                                          ##
##                                                                           ##
## Release 20101126.5                                                        ##
##                                                                           ##
###############################################################################

ARM models
-------------------------------------------------------------------------------
- Fixed bug in Cortex-M3 exceptions (incorrectly not masked by PRIMASK in some
  cases).
- Made disassembly UAL syntax by default

mips32Newlib semihost library
-------------------------------------------------------------------------------
Added support for Code Sourcery Pro version compiler in the mips32Newlib
semihost library.

###############################################################################
##                                                                           ##
## Date 2011-Jan-6                                                          ##
##                                                                           ##
## Release 20101126.4                                                        ##
##                                                                           ##
###############################################################################

Linux Installer
-------------------------------------------------------------------------------
The Linux Installer now prompts for an installation directory.
The default installation directory does not include the minor release number
only the major release number is used.

ARM models
-------------------------------------------------------------------------------
- Added a Programmer's View Event trigger when a Reset exception occurs
  (previously this was the only exception that did not trigger an event).

###############################################################################
##                                                                           ##
## Date 2010-Dec-21                                                          ##
##                                                                           ##
## Release 20101126.3                                                        ##
##                                                                           ##
###############################################################################

MIPS Processor Model
-------------------------------------------------------------------------------
Implemented RI/XI bit for M14K

ARM Cortex Model compatibility Mode
-------------------------------------------------------------------------------
One of the modes has been renamed to nopBKPT as it is used to modify the
operation of the BKPT instruction to a NOP. This instruction is used by the
ARM RDI Monitor to gain control. The OVP debugging does not use this so in this
compatibility mode 'ignores' the instruction.

ARM Cortex-M3 CrossCompiler and default linker script
-------------------------------------------------------------------------------
The CrossCompiler file makefile.include (ARM_CORTEX_M3.makefile.include that
was formerly ARM_CORTEX-M3.Makefile.include) that is included when building for
the ARM Cortex-M3 has been renamed to ARM_CORTEX_M3 to avoid a gnu gcc compile
time warning.
The use of the CROSS variable in a Makefile to use this tool chain will need to
be updated.
The default linker script specified in ARM_CORTEX_M3 makefile.include has been
changed to use the generic-m-hosted linker script. The OVP semihosting utilizes
the included calls (read, write, exit, etc...) by intercepting them to provide,
for example, output to stdout.
Demo applications have been modified accordingly.

SElinux security issues
-------------------------------------------------------------------------------
Some of the executables and shared libraries were being flagged as a potential
risk on Linux due the the presence of the flag execstack flag in the elf header
This was in fact erroneous due the the fact that no code is executed on the
stack, but the presence of the flag causes a problem for SElinux.
This is now resolved

ovpworld.org peripheral component library
-------------------------------------------------------------------------------
The following Models have been moved to new vendor specific libraries
directories, to reflect the true functional device being modeled

Previous model Location                       New model Location
------------------------------------------    --------------------------------------------
ovpworld.org/peripheral/NicAM79C97x        -> amd.ovpworld.org/peripheral/79C970
ovpworld.org/peripheral/FloppyDrive        -> intel.ovpworld.org/peripheral/82077AA
ovpworld.org/peripheral/IntervalTimerI8253 -> intel.ovpworld.org/peripheral/8253
ovpworld.org/peripheral/IntPIIX4E8259      -> intel.ovpworld.org/peripheral/8259A
ovpworld.org/peripheral/PciPIIX4Ebase      -> intel.ovpworld.org/peripheral/82371EB
ovpworld.org/peripheral/PciPM              -> intel.ovpworld.org/peripheral/PciPM
ovpworld.org/peripheral/PciUSB             -> intel.ovpworld.org/peripheral/PciUSB
ovpworld.org/peripheral/Ps2Control         -> intel.ovpworld.org/peripheral/Ps2Control
ovpworld.org/peripheral/PciIDE             -> intel.ovpworld.org/peripheral/PciIDE
ovpworld.org/peripheral/Uart16450          -> national.ovpworld.org/peripheral/16450
ovpworld.org/peripheral/Uart16450C         -> national.ovpworld.org/peripheral/16450C
ovpworld.org/peripheral/SysGT6412x         -> marvell.ovpworld.org/peripheral/GT6412x
ovpworld.org/peripheral/MaltaFPGA          -> mips.ovpworld.org/peripheral/MaltaFPGA
ovpworld.org/peripheral/SmartLoaderLinux   -> mips.ovpworld.org/peripheral/SmartLoaderLinux
ovpworld.org/peripheral/RtcMC146818        -> motorola.ovpworld.org/peripheral/MC146818
ovpworld.org/peripheral/VgaCLGD54xx        -> cirrus.ovpworld.org/peripheral/GD5446

All platforms which use these peripherals have been updated to reflect the changes

###############################################################################
##                                                                           ##
## Date 2010-Dec-06                                                          ##
##                                                                           ##
## Release 20101126.2                                                        ##
##                                                                           ##
###############################################################################

ARM Cortex-M3 Demos
-------------------------------------------------------------------------------
A set of demos are available for the ARM Cortex-M3 processors. These are provided
as a single processor platform, dual processor platform and a manycore processor
platform. They have been provided with several benchmark applications to run,
including dhrystone, fibonacci etc.

ARM Cortex-M3 model added
-------------------------------------------------------------------------------
Support for the ARM Cortex-M3 device has been added into the model named 'armm'
found in the vendor directory 'arm.ovpworld.org'.
Along with the model are provided a number of specific ARM Cortex-M3 demos.
These include, single and multiple processor platforms running applications
such as benchmarks dhrystone, linpack and fibonacci and application using
shared memory to communicate between processors.

##
## 2010-11-26
##

ARM models
-------------------------------------------------------------------------------
- ARMv7 instructions have been added.
- Fixed bug in Thumb-mode LDR/STR immediate (address was sometimes wrong).
- Fixed bugs in Thumb-mode 32-bit LDR/STR instructions (these now take account
  of whether unaligned exceptions should be generated or not).
- Fixed STREX to validate alignment/permission prior to exclusive access check.
- Made LDM fully compliant with Base Restored Abort Model (previously, the base
  register was not restored if it was in the list of registers loaded).
- Various minor UAL-format disassembly bugs have been fixed.
- Model has been updated for compatibility with recent gnu toolchains.

MIPS models
-------------------------------------------------------------------------------
- Various corner-case bugs in FPU (coprocessor 1) instructions have been fixed.

Runtime Selection
-------------------------------------------------------------------------------
New files (switchRuntime.bat/sh) have been added into Imperas/bin to allow
the selection of a simulation runtime from those available in the installation.

Makefiles
-------------------------------------------------------------------------------
When linking platforms using the supplied makefile, the path to the runtime
library libRuntimeLoader is no longer hardcoded, this is now referenced
by the LD_LIBRARY_PATH

Platforms using MIPS processor models
-------------------------------------------------------------------------------
There are several vendors that can supply models. Several platforms have been
expanded so that they use the processor model included in the package with the
platform.

CheckInstall utility Program
-------------------------------------------------------------------------------
This utility program has added a new option to provide the current environment
variables associated with an OVP installation.

ICM API
-------------------------------------------------------------------------------
- A new function icmDebugThisProcessor() specifies which processor to connect
  to a single core debugger. This function replaces the attribute
  ICM_ATTR_DEBUG, which is deprecated.
- Function icmFindProcessorByName(const char *name)
  Now has just one argument (name) and will return any processor or sub-processor
  from a platform.
- icmMemReadFn function type has additional arguments 'VA' (giving the virtual
  read address) and 'isFetch' (True if the read is an instruction fetch; False
  if it is a load).
- icmMemWriteFn function type has additional argument 'VA' (giving the virtual
  write address).
- icmMemWatchFn function type has additional argument 'VA' (giving the virtual
  read/write address).

VMI Run Time Interface (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- vmiMemReadFn function type has additional arguments 'VA' (giving the virtual
  read address) and 'isFetch' (True if the read is an instruction fetch; False
  if it is a load).
- vmiMemWriteFn function type has additional argument 'VA' (giving the virtual
  write address).
- vmiMemWatchFn function type has additional argument 'VA' (giving the virtual
  read/write address).
- New functions vmirtAddFetchCallback and vmirtRemoveFetchCallback allow
  processor fetches to be monitored.
- Final argument of vmirtRead*/vmirtWrite* functions has been changed from
  Boolean 'trueAccess' to enumeration 'attrs', allowing specification of reads
  and writes that are true processor writes but which ignore privilege
  exceptions.

VMI Memory Model Component Interface
-------------------------------------------------------------------------------
- Full read and write callbacks are now of types vmiMemReadFn and vmiMemWriteFn,
  respectively.
- Transparent read and write callbacks are now of type vmiMemWatchFn.

VMI Debug Interface
-------------------
- vmiRegInfoFn (defined with VMI_REG_INFO_FN macro) now has 'gdbFrame' argument,
  indicating whether the iteration is to prepare registers for a gdb /g command
  (the format of these is often very specific and any deviation may cause a gdb
  assertion).

###############################################################################
##                                                                           ##
## Date 2010-Sep-06                                                          ##
##                                                                           ##
###############################################################################

ARM models
-------------------------------------------------------------------------------
The ARM models have been greatly enhanced: new ARM1136J-S and ARM1156T2-S
variants are now available.

MIPS models
-------------------------------------------------------------------------------
The MIPS models now include the microMIPS M14K variants. SMP variants have been
revised to use new simulator features.

VMI vmiIASAttr Structure
------------------------
A new callback function field has been added: fetchSnapCB. This optional
function takes a processor structure and an address as arguments and returns the
address snapped to an instruction fetch boundary, if required. Previously, the
only way to snap fetch addresses was in the instruction fetch exception handler
(ifetchExceptCB).

VMI Run Time Interface (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New functions have been added to simplify specification of pages in virtual
  memory systems, including mapping by ASID: see vmirtAliasMemoryVM,
  vmirtUnaliasMemoryVM, vmirtGetDomainMappedASID, vmirtSetProcessorASID and
  vmirtGetProcessorASID.
- Function vmirtMapVAToPA has been enhanced to return the final memory domain
  (memDomainP) to which a simulated address is mapped.
- New functions have been added for enhanced SMP support: see vmirtSetSMPParent
  and vmirtSetSMPIndex. Old SMP support functions vmirtMigrate and
  vmirtSetSMPContext have been removed.
- Function vmirtSetDebugName has been removed and replaced with the more generic
  vmirtSetProcessorName.
- Functions vmirtSetProcessorCodeDomains and vmirtSetProcessorDataDomains have
  been added. These allow the memory domains associated with processor
  dictionaries to be modified.
- Processor model timers may now be used at any level in an SMP hierarchy.
- The callback function prototypes to vmirtAddReadCallback,
  vmirtAddWriteCallback, vmirtRemoveReadCallback and vmirtRemoveWriteCallback
  have been modified to emphasize that the supplied value is read only

VMI Morph Time Interface (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- Function vmimtGetSMPParentRegister has been added. This allows reference to be
  made to registers in a parent of the current processor, even when that parent
  changes dynamically at run time (see vmirtSetSMPParent).

VMI Processor Constructor
-------------------------
There is a new smpContext argument to the processor constructor which allows
SMP member characteristics to be initialized. This replaces the function
vmirtSetSMPContext, which has been deleted.

mips.ovpworld.org MipsMaltaLinux platform
-------------------------------------------------------------------------------
The instantiation of the Flash memory has changed so that it is now correctly
added at a memory mapped address of 0x1e000000 and is then mapped to the
address 0x1fc00000. Note address 0x1fc00010 contains the boardId (0x420 default)

ovpworld.org SmartLoaderLinux Peripheral
-------------------------------------------------------------------------------
Correct usage of virtual and physical addresses in model code. This model has
been recoded to provide initialization of only the Malta Flash area. See
change to Malta platform.
Added support for loading Linux kernel and ramdisk onto Android Goldfish
platform.

modelSupport SDL support library
-------------------------------------------------------------------------------
Added bit per pixel argument to the initialization of the SDL display.

###############################################################################
##                                                                           ##
## Date 2010-May-28                                                          ##
##                                                                           ##
###############################################################################

Mentor Graphics Nucleus Demonstrations
-------------------------------------------------------------------------------
Demonstrations of the Nucleus OS are provided on both the ARM IntegratorCP and
the MIPS Malta platforms.

Core Simulator Performance Improvements
---------------------------------------
Native code emitted by the product JIT compiler has been improved; some examples
run up to 50% faster.

Tensilica Model Integration and Toolchain Support
-------------------------------------------------------------------------------
The Tensilica model integration layer is built and compatible with the
Tensilica release RB-2009.5 toolchain, previous releases were built and were
compatible with release RB-2008.3

TLM2.0 model Library
-------------------------------------------------------------------------------
TLM2.0 model wrappers are now automatically written by igen and have changed
style, requiring new arguments for construction and binding. Processor
models now have separate INSTRUCTION and DATA ports, all ports now use names
as defined in the ICM interfaces.

There is a partial TLM2.0 implementation of the MIPS MALTA platform.

Model Library
-------------------------------------------------------------------------------
A new model has been added for the POWERPC. This is currently a 32 bit ISA
representation, supporting both big and little endian. Chip variants are in
development and will be released shortly.
In addition to the model there is a gnu based compiler toolchain, a tlm
processor wrapper and a number of Demos showing the use of this model.
The VLNV reference for this model is :-
    power.ovpworld.org/processor/powerpc32/1.0
The Newlib semihost library for the gnu toolchain can be found under :-
    power.ovpworld.org/semihosting/powerpc32Newlib/1.0

Peripheral Model SmartPromLoader is deprecated
-------------------------------------------------------------------------------
This model is superseded by the SmartLoaderLinux

mips.com/semihosting/mips32Newlib
-------------------------------------------------------------------------------
Added semihosting support of mdi_getargs and mdi_exit functions to support
startup and exit of elf files created by latest version of umips toolchain.

checkinstall.exe
-------------------------------------------------------------------------------
Fixed a bug in this program that is called by demo scripts to ensure all the
packages needed to run that demo are installed. It would issue erroneous
messages that a package was missing if the name of the package was too long.

VMI Morph Time Interface (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- instruction temporaries can now be specified using VMI_CPU_TEMP macro - these
  allow more efficient code generation

Peripheral Model Tracing
-------------------------------------------------------------------------------
Simulator diagnostics for peripheral model accesses are now enabled when
the diagnostic level is set to or set above level 16, previously the level to
obtain simulator diagnostic information was 4.

###############################################################################
##                                                                           ##
## Date 2010-Mar-31                                                          ##
##                                                                           ##
###############################################################################

New functions icmTriggerAfter and icmCancelTrigger
-------------------------------------------------------------------------------
ICM API functions (only available in Professional Tools) Calls the given
function after a specified delay.

icmTryVlnvString()
-------------------------------------------------------------------------------
The new function icmTryVlnvString() is similar to icmGetvlnvString().

icmTryVlnvString() silently returns null if no model matches the VLNV spec.
Use this if your platform needs to search several places for a model.

icmTryVlnvString() reports an Error if no model matches the VLNV spec.
Use this if your platform will fail without this particular model.

Changes to vmiSymbols
-------------------------------------------------------------------------------
The sections defined in an ELF or COFF file now have vmiSymbols created for
them so that there are now entries in the symbol table with type
VMI_SYMBOL_TYPE_SECTION. (This value was always there but no symbols of
this type were created.)

The order of the values in the enum vmiSymbolType in vmiTypes.h has changed.
Anything that depends on the actual values of these enums will be affected.

Also, when there are multiple symbols defined for an address the symbols will
be returned in order from the highest value for the vmiSymbolType enum to the
lowest value. Previously, the order in which multiple symbols for an address
would be returned was dependent on the order they were parsed out of the ELF
file. Thus anything that uses the first symbol returned for an address may
see its behavior change. This includes labels on instruction tracing.

vmirtTraceOnAfter() & vmirtTraceOffAfter()
-------------------------------------------------------------------------------
It is now possible to turn instruction tracing on or off from an intercept
library or plugin.

Custom Object file loader
-------------------------------------------------------------------------------
It is now possible to write an object file loader to read formats other than
those supported by the standard tool. See the OVPsim and CpuManager User guide
and icmInstallObjectReader in ImpPublic/include/host/icm/icmCpuManager.h
and ImpPublic/include/host/icm/icmObjAttrs.h

ICM_DISASSEMBLE_LABELS Has been deprecated.
-------------------------------------------------------------------------------
Instruction disassembly always includes labels where possible.

PSE SOCKET can finish a simulation on disconnect
-------------------------------------------------------------------------------
- The common code in modelSupport to allow peripheral models to attach to
  sockets now allows the simulation to terminate when a socket has been
  disconnected.
- The UART models have an additional attribute 'finishOnDisconnect' that should
  be set to 'on' to enable this feature

TLM 2.0 DECODE BUS EXAMPLE
-------------------------------------------------------------------------------
- The TLM2.0 DecodeBus file has been modified so that it causes a processor
  exception if the address cannot be decoded. Previously it had caused an
  assertion. This allows an OS like Linux that remaps memory to work correctly.
- A new TLM2.0 file DecodeBusFailOnError maintains the original code and stops
  the simulation with an error if the bus decode fails.

TLM 2.0 WRAPPER icmCpu.cpp
-------------------------------------------------------------------------------
- This interface, as provided, does not support byte enables and so the
  reporting of the bytes used has been removed from the wrapper. TLM2.0
  transactions will now always assume the transfer is word sized.

ICM INTERFACE
-------------------------------------------------------------------------------
- New function icmInFetchContext() returns a Boolean indicating if the currently
  active memory read callback (installed using icmMapExternalMemory) is being
  called to fetch instruction bytes (if True) or data bytes (if False).

VMI MORPH TIME INTERFACE (see VMI Morph Time Function Reference documentation)
-------------------------------------------------------------------------------
- Unary operations added:
	vmi_CLZ     (count leading zeros)
  	vmi_CLO     (count leading ones)
  	vmi_ABS     (get absolute value)
  	vmi_NEGSQ   (negate with saturation)
  	vmi_ABSSQ   (get absolute value with saturation)
- Binary operations added:
	vmi_ADDSQ   (add signed with saturation)
	vmi_SUBSQ   (subtract signed with saturation)
	vmi_RSUBSQ  (reverse-subtract signed with saturation)
	vmi_ADDUQ   (add unsigned with saturation)
	vmi_SUBUQ   (subtract unsigned with saturation)
	vmi_RSUBUQ  (reverse-subtract unsigned with saturation)
	vmi_ADDSH   (signed add and right shift by one)
	vmi_SUBSH   (signed subtract and right shift by one)
	vmi_RSUBSH  (reverse signed subtract and right shift by one)
	vmi_ADDUH   (unsigned add and right shift by one)
	vmi_SUBUH   (unsigned subtract and right shift by one)
	vmi_RSUBUH  (reverse unsigned subtract and right shift by one)
	vmi_ADDSHR  (signed add and right shift by one with rounding)
	vmi_SUBSHR  (signed subtract and right shift by one with rounding)
	vmi_RSUBSHR (reverse signed subtract and right shift by one with rounding)
	vmi_ADDUHR  (unsigned add and right shift by one with rounding)
	vmi_SUBUHR  (unsigned subtract and right shift by one with rounding)
	vmi_RSUBUHR (reverse unsigned subtract and right shift by one with rounding)

VMI RUN TIME INTERFACE (see VMI Run Time Function Reference documentation)
-------------------------------------------------------------------------------
- New functions vmirtCreateModelTimer, vmirtDeleteModelTimer, vmirtSetModelTimer
  and vmirtClearModelTimer added to allow processors to have multiple
  instruction timers.
- New function vmirtGetSMPActiveSibling allows the active sibling in an SMP
  group to be found.
- Existing function vmirtGetProcessorEndian replaced with two new functions,
  vmirtGetProcessorCodeEndian and vmirtGetProcessorDataEndian, enabling models
  with different endianness for instruction fetches and data accesses.

VMI DEBUG INTERFACE
-------------------------------------------------------------------------------
Added processor argument to vmiRegInfoFn callback

TLM2.0 'SimplePlatform' Example
-------------------------------------------------------------------------------
This platform and associated application has been changed to use the OR1K
processor so that it is in line with all other Examples.

Installation Verification Utility
-------------------------------------------------------------------------------
A new executable checkinstall.exe has been added. This will use the file
InstallLog.txt in order to check that a valid installation still exists.
When running a Demo it will check that the required packages have been
installed.

CodeSourcery G++ Lite Toolchain for Application compilation for MIPS32
-------------------------------------------------------------------------------
The include Makefiles have been modified to allow the root of a CodeSourcery
G++ Lite Toolchain (http://www.codesourcery.com/sgpp/lite/mips) to be specified
and used in the compilation of application code for the MIPS cores.
The environment variable MIPS_TOOLCHAIN_ROOT should be set to the directory
containing the bin and lib directories, for example
export MIPS_TOOLCHAIN_ROOT=/user/CodeSourcery/Sourcery_G++_Lite

###############################################################################
##                                                                           ##
## Date 2010-Jan-22                                                          ##
##                                                                           ##
###############################################################################

ICM INTERFACE
-------------------------------------------------------------------------------
New function icmSetTextOutputFn() allows all ICM text output to be
redirected to a user defined function and define the action on a fatal occurrence.
New function icmGetPlatformName() returns the (optional) platform name.
New function icmFindProcessorByName() returns the object from its name.
New function icmFindPseByName() returns the object from its name.
New function icmProcessorIsVisible() returns true if TC is active.

VMI MORPH TIME INTERFACE
-------------------------------------------------------------------------------
Native floating point support enhanced; see VMI Morph Time Function Reference
documentation for details

VMI RUN TIME INTERFACE
-------------------------------------------------------------------------------
Native floating point support enhanced; see VMI Run Time Function Reference
documentation for details
New function vmirtMapMemory allows unmapped regions in a memory domain to
be implemented as RAM or ROM
New function vmirtMapCallbacks allows unmapped regions in a memory domain to
be implemented by callbacks
New function vmirtNextViewEvent allows access to existing events on a view
object.
New functions vmirtDLOpen, vmirtDLError, vmirtDLSymbol and vmirtDLClose added
to allow shared objects to be loaded and used within models

PPM INTERFACE
-------------------------------------------------------------------------------
New function ppmNextViewEvent allows access to existing events on a view
object.

CodeSourcery G++ Lite Toolchain for Application compilation for MIPS32
-------------------------------------------------------------------------------
Additional include Makefiles have been defined to ease the compilation of
applications targeted at MIPS32 processor variants. The CodeSourcery G++ Lite
Toolchain (http://www.codesourcery.com/sgpp/lite/mips) creates code for the MIPS
cores. As with all OVP models the same binary code can be run on the silicon
device or on a configured OVP MIPS32 model.

Model Library
-------------------------------------------------------------------------------
Some of the models have been moved so that they exist in their own vendor
specific libraries. This means that the models available from OVP World are now
in vendor specific libraries such as
  ARM related models and semihost libraries are found in arm.ovpworld.org
  ARC related models and semihost libraries are found in arc.ovpworld.org
  MIPS related models and semihost libraries are found in mips.ovpworld.org
this may require modification to platforms defined using the vendor entry.

A New model has been added for the NEC V850 series.
This models the V850, V850E, V850E1 and V850E2(Partial implementation)
Instruction set architectures more information can be found in the
library documentation.

New Models have been added for MIPS, these are 74Kc, 74Kf, 1004Kc, 1004Kf

FlexLM Utilities
-------------------------------------------------------------------------------
The FlexLM utilities are no longer included as separate executables. The
utility lmutils(.exe) can be used to run any of the previously supplied FlexLM
utilities.
For example, to use lmhostid now invoke as an argument to lmutils
On Linux
  > lmutils lmhostid
or on Windows
  > lmutils.exe lmhostid

###############################################################################
##                                                                           ##
## Date 2009-Oct-16                                                          ##
##                                                                           ##
###############################################################################
ICM INTERFACE
-------------------------------------------------------------------------------
The ImpPublic/include/host/icm/icmMessage.h header file has now been deprecated,
its contents moved to icmCpuManager.h

icmSetReadWatchPoint, icmSetWriteWatchPoint, icmSetAccessWatchPoint
accept an icmBusP rather than a icmMemoryP;

The new function                   icmSetPlatformName(const char *name)
optionally sets a platform name.

A problem with icmLoadSymbols() sometimes not loading symbols has been fixed.

The method of linking ICM platforms has been changed to use a dynamically
switchable runtime library. When compiling platforms the user mut now link
to the Simulator runtime library libRuntimeLoader, using -lRuntimeLoader
This is reflected in all the Makefiles for building platforms

TLM 2.0 Wrappers and Header file changes
-------------------------------------------------------------------------------
The TLM 2.0 header files have had some minor alterations to support Cadence
Incisive SystemC simulator as well as the OSCI SystemC simulator
SystemC simulator.
1. SystemC pure virtual methods
   sc_trace.h includes two methods for set_time_unit. These are added to
   IMPERAS_HOME/ImpPublic/include/host/tlm2.0/advanceTime.h
2. Ambiguous use of connect()
   The use of connect() was ambiguous and so is now specified distinctly in
   IMPERAS_HOME/ImpPublic/include/host/tlm2.0/icmPeripheral.h


MIPS PROCESSOR MODEL
-------------------------------------------------------------------------------
COP1 (floating point unit) now supported
Shadow registers now supported

VMI MORPH TIME INTERFACE
-------------------------------------------------------------------------------
Native floating point support added; see VMI Morph Time Function Reference
documentation for details

VMI RUN TIME INTERFACE
-------------------------------------------------------------------------------
Native floating point support added; see VMI Run Time Function Reference
documentation for details

VMI API CHANGES
-------------------------------------------------------------------------------
vmiosAddCommand  has a new argument "const char *exampleArguments"
vmirtAddCommand  has a new argument "const char *exampleArguments"
vmimmcAddCommand has a new argument "const char *exampleArguments"
vmirtGetPlatformName() -new function.

SIMULATOR BUG FIXES
-------------------------------------------------------------------------------
Waiting for delay or event in SystemC memory callbacks now supported.

Excessive interrupt latency of CPU models in SystemC now fixed.

TLM2 Demonstrations
-------------------------------------------------------------------------------
The TLM2 demonstrations are provided separately from the OVPsim download.

Component arm.ovpworld.org/peripheral/IntICP/1.01
-------------------------------------------------------------------------------
The 'enable' register was always read as zero. This stopped the Nucleus
operating system booting on this platform.

###############################################################################
##                                                                           ##
## Date 2009-07-21                                                           ##
##                                                                           ##
###############################################################################

ARM Integrator Compact Platform added
-------------------------------------------------------------------------------
This release includes a platform based on the ARM 'Integrator' design.

It uses the ARM processor (variant ARM926EJ-S) and the following peripherals:
   Core module controller (*)
   ICP controller (*)
   Programmable Interval Timer
   Interrupt Controller
   Keyboard interface
   Multi-media card interface (*)
   Realtime Clock
   Uart
   LCD VGA display module (^)

NOTE:
1. Those marked with (*) only have basic register functionality. These and other
    peripherals are in development.
2. The LCD VGA display module marked with (^) has non-optimized refresh. This limits
   platform performance to a maximum of around 300 MIPS

A Linux installation which runs on this platform is available
from the ovp website.

ATMEL AT91SAM7 Series Platform added
-------------------------------------------------------------------------------
This release includes an example of the AT91SAM7 (ARM7TDMI based) platform
running uclinux. A Demonstration of the boot sequence can be found under
Imperas/Demo/OVPsim_uclinux_atmel_at91sam7
This makes use of a number of Peripherals and platforms which are packaged into
the Library 'atmel.ovpworld.org'. The current set of Peripherals includes
- AdvancedInterruptController
- ParallelIOControler
- PowerSaving
- SpecialFunction
- TimerCounter
- Usart
- WatchdogTimer
This platform is supplied as a Demo booting uClinux with a small ram disk

The calculated BogoMips for this platform is currently fixed at 250Mips

PPM Header API Correction
-------------------------------------------------------------------------------
A 'net' passes a ppmNetValue type which allows for any unsigned integer value
to be passed. A comment was corrected that inferred that a 'net' could only
carry the values '0' or '1'.

ARM model
-------------------------------------------------------------------------------
The new ARM model supports
    BIG and LITTLE endian
    variants for architecture and processors up to ISA ARMv5TEJ
        architectural variants:
            ARMv4xM ARMv4 ARMv4TxM ARMv4T
            ARMv5xM ARMv5 ARMv5TxM ARMv5T ARMv5TExP ARMv5TE ARMv5TEJ
        processor variants:
            ARM7TDMI ARM7EJ-S ARM720T
            ARM920T ARM922T ARM926EJ-S ARM940T ARM946E ARM966E ARM968E-S
            ARM1020E ARM1022E ARM1026EJ-S
    MMU, MPU and TCM are implemented

UART 16450 Model
-------------------------------------------------------------------------------
When a logfile is opened with the same name as an existing file, the existing
file is overwritten. Previous versions did not write to the logfile if it
already existed.
The UART model now supports record and replay.

ICM Platform with Imperas Interception Plugins
-------------------------------------------------------------------------------
An ICM platform defined that includes Imperas Binary Interception libraries.
Can now be run with OVPsim without the previous Fatal. This is now a warning
that indicates the Interception libraries were not loaded. The same ICM
platform can be invoked with the Imperas Proffessional tools in which the
Binary Interception Libraries are loaded.

VMI MORPH TIME INTERFACE
-------------------------------------------------------------------------------
- vmimtSetShiftMask added
  (allows the mask applied to shift/rotate amount for binops vmi_ROL, vmi_ROR,
  vmi_RCL, vmi_RCR, vmi_SHL, vmi_SHR and vmi_SAR to be overridden)

- new vmiUnop added:
    vmi_MOV         // d <- a

- new vmiBinops added:
    vmi_RSBB        // d <- b - a - C
    vmi_RSUB        // d <- b - a
    vmi_ORN         // d <- a | ~b
    vmi_ANDN        // d <- a & ~b
    vmi_XORN        // d <- a ^ ~b
    vmi_NOR         // d <- ~(a | b)
    vmi_NAND        // d <- ~(a & b)
    vmi_XNOR        // d <- ~(a ^ b)

- vmiFlags object has been enhanced to support flag negation when model flags
  are read or written (for example, simplifies modeling of the ARM processor,
  where subtract operations generate borrow, not carry). See the VMI Morph Time
  Reference for more details.

- vmimtSetAddressMask added
  (allows target and link addresses of subsequent jump opcodes to be masked)

- vmimtTestRCJumpLabel and vmimtCompareRCJumpLabel added
  (allow more efficient intra-instruction jumps)

VMI RUN TIME INTERFACE
-------------------------------------------------------------------------------
- vmirtFlushAllDicts added
  (allows all processor dictionaries to be flushed; typically used by intercept
  libraries when the functionality they implement is enabled or disabled)

- vmirtRead1ByteDomain, vmirtRead2ByteDomain, vmirtRead4ByteDomain,
  vmirtRead8ByteDomain, vmirtWrite1ByteDomain, vmirtWrite2ByteDomain,
  vmirtWrite4ByteDomain, vmirtWrite8ByteDomain added
  (allow endian-independent intercept libraries to be written more easily)

- New set of address range hash utility functions created (simplify modeling of
  TLB and cache related structures): vmirtNewRangeTable, vmirtFreeRangeTable,
  vmirtInsertRangeEntry, vmirtRemoveRangeEntry, vmirtGetFirstRangeEntry,
  vmirtGetLastRangeEntry, vmirtGetRangeEntryLow, vmirtGetRangeEntryHigh,
  vmirtGetRangeEntryUserData and vmirtSetRangeEntryUserData.

Platform Makefile
-------------------------------------------------------------------------------
Makefile.platform has been modified to create an executable that is identified
by the host architecture on which it can run. When the provided Makefile system
is used to compile and link a platform file the executable now generated is of
the form platform.<ARCH>.exe where previously the architecture on which the
executable could be run was not identified.

MIPS CrossCompiler Makefiles
-------------------------------------------------------------------------------
The default has been changed for the MIPS32 floating point usage to select the
software floating point library.

ICM API
-------------------------------------------------------------------------------

icmNewBusBridge
A new argument bridgeName has been added.
An error in the naming of the address parameters and their documentation has been corrected.
Refer to icmCpuManager.h for details.

(In the C++ ASPI icmBusObject::newBridge has been changed in the same way).

SIMULATOR BUG FIXES
-------------------
- Native code emission optimizer bug fixed (caused incorrect behavior when code block
  blocks self-eject in some circumstances).

- Simulations stuck in peripheral code can now be interrupted by hitting Ctrl-C
  twice.

- Memory subsystem bug fixed (caused incorrect behavior if alias region which
  itself has aliases containing code is re-aliased to a different address)

###############################################################################
##                                                                           ##
## Date 2009-05-18                                                           ##
##                                                                           ##
###############################################################################

Models
-------------------------------------------------------------------------------

The model ovpworld.org/mmc/endianSwap/1.0 will swap the endianness of 4-byte
transactions.

Licensing
-------------------------------------------------------------------------------
The OVPsim Product requires a License key - this is available from the OVP
website

MALTA PLATFORM / 8259 INTERRUPT CONTROLLER
-------------------------------------------------------------------------------
- The model of the 8259 has been improved to truly reflect the behavior of the
  hardware. There are now 2 discrete 8259 instantiations which use the
  cascaded interface in order to handle the master slave relationship

MIPS Model
-------------------------------------------------------------------------------
- enhanced to support an external interrupt controller

- enhanced to use physically-mapped code dictionaries for better performance

- mips34K verified booting and installing Linux (some mips34K TLB-related bugs
  were found and fixed)

- implemented relaxed TLB exception model supported by later MIPS processors

VMI INTERFACE
-------------------------------------------------------------------------------
- vmirtStop added
  (stops simulation and enters debug shell, if Imperas debugger is attached)

- vmimtValidateBlockMode and vmirtSetBlockMode added
  (allow easier implementation of some types of modal instruction)

- vmirtAliasMemory now allows specification of physical or virtual mapping when
  native code is generated (improves performance)

- vmirtMapVAToPA added
  (given a domain virtual address, returns the corresponding physical address)

- value argument in VMI_MEM_WRITE_FN/vmiMemWriteFn changed to type 'const void *'
  (disambiguates read and write callback functions)

- vmiosGetExtensionName added
  (allows extension to find its own name)

- thisPC argument added to VMIOS_INTERCEPT_FN/vmiosInterceptFn
  (intercept callbacks often need to know their own address)

ICM API
-------------------------------------------------------------------------------
- icmSetWallClockFactor added
  (limits simulation to a factor of wallclock time).

- Platforms constructed in SystemC TLM2.0 can now use iteration to create arrays
  of components (processors in particular).

- Change of implementation of SystemC TLM2.0 interrupts.
  Note that interrupts are now implemented using the SystemC analysis port. This
  is to overcome the issue of excessive interrupt latency, and a functional bug.
  Platforms should now apply the bind() method of the output port to the corresponding
  input port. There is no longer need to bind unused inputs.

- Note that a sequence of  icmInit() .... icmTerminate() .... icmInit()
  (more than one simulation in a session) is not supported in this release.

- icmMapExternalMemory()
  The callbacks could receive real or virtual addresses. This is now fixed - the
  address will always be real.

- Adding extension libraries in OVP no longer causes a Fatal, this is now only
  an error with the extension library not being loaded.

- icmGetProcessorICount bug found and fixed (previously, it overstated the
  number of executed instructions when processors were in a halted state)

- Having multiple intercept plugins on an instance no longer stops the simulation.
  The simulation will continue but the intercept plugins specified will not be
  loaded.

MAKEFILE SYSTEM
-------------------------------------------------------------------------------
- The Makefiles provided for compiling Platforms and plugin intercept libraries
  have been modified to include the '-m32' flag for gcc. This is to help with
  compilation under 64 bit Linux

###############################################################################
##                                                                           ##
## Date 2009-03-19                                                           ##
##                                                                           ##
###############################################################################

Processor Semihost Libraries
-------------------------------------------------------------------------------
The processor semihost libraries have been standardized on Newlib.

Peripheral Endian Support
-------------------------------------------------------------------------------
Work is being carried out to add support for big endian to peripheral models.
At present some models support endian switching while others support only little
endian operation.
The default operation of a PSE peripheral model is the same as the host machine
i.e. on an x86 host this is little endian.

VMI View API
-------------------------------------------------------------------------------
New VMI header file vmiView.h provides the interface into the programmers view
that can be incorporated into models and used in conjunction with Imperas
Binary Intercept Technology and Imperas MP Debugger.

ARM Makefile Support
-------------------------------------------------------------------------------
The ARM model is an ISA model so the Makefile support has been changed to
reflect this. Previously specific cpu types were targeted for the toolchain, in
this release the architecture is targeted.
NOTE: The toolchain available with OVPsim is built for the ARM7. The ARM7
Makefile does not specify cpu or architecture type.

MMC API Interface
-------------------------------------------------------------------------------
Modification to the vmimmcGetUns64Attribute API function to return a
de-referenced flag indicating if the attribute was found. the function prototype
now becomes:
Uns64 vmimmcGetUns64Attribute(vmimmcComponentP component,
                              const char *name,
                              Bool *found);


MIPS32 Processor Model
-------------------------------------------------------------------------------
The TLB model has been extensively reworked to improve performance by up to 7x
in O/S emulation mode (when attribute hiddenTLBentries is non-zero).

The 34K variant of the model has additional attributes to override the default
settings of the number of VPEs and TCs in the MVConf0 Register.

The MIPS32 processor model now has support for the DSP ASE, adding DSP
instructions to the model configurations that include this.

The attribute 'variant' is now used instead of the deprecated 'modelconfig'
attribute (this is however still supported for backwards compatibility but will
not be added to as new variants become available)

VMI INTERFACE
-------------------------------------------------------------------------------
Align exception handlers (VMI_RD_ALIGN_EXCEPT_FN, VMI_WR_ALIGN_EXCEPT_FN) now
support efficient snapping of misaligned load/store addresses: see
OVP_Processor_Modeling_Guide.pdf (Misaligned Address Snapping) for details.

vmirtWriteNetPort added, allowing processor models to create net events

ICM API
-------------------------------------------------------------------------------
Added wildcard capability to icmGetVlnvString (see Doxygen).

###############################################################################
##                                                                           ##
## Date 2009-01-22                                                           ##
##                                                                           ##
###############################################################################

New MMC library created
-------------------------------------------------------------------------------
A new generic MMC (Memory Mapped Component) library has been created within the
ovpworld.org vendor. This will contain all MMC component models created by
ovpworld.org. The cache models are moved from the library cache to the MMC
library.

SystemC TLM2.0
-------------------------------------------------------------------------------
Added TLM2.0 implementations of mips32 family, arc6xx and arc7xx, or1k and arm7
processor models.
Source is in ImperasLib/source/ovpworld.org/processor/mips32/1.0/tlm2.0 etc.
These use the generic model ImpPublic/source/host/tlm2.0/ovpCpu.cpp
They must be compiled in your own SystemC environment.
See Examples/Platforms/SystemC_TLM2.0 for how to do this.

There is also a full user guide in the doc/ovp directory.

New Peripheral and Change to MIPS Malta Platform
-------------------------------------------------------------------------------
A new peripheral 'SmartLoaderLinux' has been added to the library. This
replaces 'SmartPromInit' in the Malta platform. It performs a more accurate
initialization of the systems Flash memory components and the Linux kernel
command string.

Processor Models
-------------------------------------------------------------------------------
Added Support for ARC600 and ARC700, including demo platforms:
    Demo/OVPsim_manycore24_arc
    Demo/OVPsim_multicore2_arc
    Demo/OVPsim_single_arc

Library Re-Organization
-------------------------------------------------------------------------------
The library 'ImperasLib' has been re-organized to more clearly distinguish
between components provided as part of OVP and those that are made available
with the Imperas professional tools. Where platforms explicitly select
components they may need to be updated.

- Most peripheral models are released by OVP so have been moved under the
  ovpworld.org vendor
- The MIPS32, OR1K and ARM processor models released as part of OVP have been
  moved to the ovpworld.org vendor
- All cache models are released by OVP so have been moved under the
  ovpworld.org vendor
- A new library 'interception' has been created to contain general interception
  i.e. non-semihosting libraries. This allowed the semihosting directories to be
  rationalized, so that only semihosting libraries are contained within.
- A new library has been created ovpworld.org/modelSupport. This contains some
  common libraries used to support model development.

VMI INTERFACE
-------------------------------------------------------------------------------
- Added vmidNewEntryFmtBin (add new decode table entry from binary format)
- Added vmimtUnopRC (unary operation with constant argument)
- Added vmimtBinopRCR (binary operation with constant and register arguments)
- Added vmimtCompareCR (compare constant and register)
- Added vmimtCondMoveRRR, vmimtCondMoveRRC, vmimtCondMoveRCR and
  vmimtCondMoveRCC (conditional move based on flag value)
- New emitTrace argument to VMI_MORPH_FN callback (true if instruction tracing
  is enabled)
- New isTrace argument to VMI_DEBUG_FN callback (true if register dump is being
  emitted during instruction trace)
- New isException argument to VMI_DEBUG_FN callback (true if register dump is being
  emitted for instruction that is causing an exception)
- vmiIFetchFn prototype has been changed to allow register dumps to be emitted
  either before or after model state change (previously, they were always
  emitted after state change)

ICM API
-------------------------------------------------------------------------------
- Added ICM version check
  -  icmInit now performs a version check to ensure that the version of
     the runtime library, is the same as the version which the platform was
     compiled against
- Added icmReadBus() and icmWriteBus()
    Direct read/write to a bus (and anything connected to it).
- Added icmNetPortP  object representing a model's interrupt connection.
  - icmFindProcessorNetPort() Locate a model's net port
  - icmNextProcessorNetPort() Processor interrupt port iterator
  - icmNextPseNetPort()       PSE interrupt port iterator
  - icmNetPortName            Name of port
  - icmNetPortDirection       Direction of port
- Added icmLoadNativeMemory() Load an ELF file into the user's native memory.
- Added useEntry argument to icmLoadProcessorMemory()
      If false, do NOT set the PC to the entry point found in the object file.
      Set this to True for backward compatibility.

- Added argument to icmNewBusBridge()
      So that bridge can have different name on each bus,
      or two names when the bridge loops onto the same bus.

      The same applies to icmBusObject::newBridge()

- Added icmBridgeBuses(), icmUnbridgeBuses()
      creates/deletes a dynamic bridge between 2 buses.

- Added icmSimulationStarting() for use in a platform with PSEs but
  no processors.

ICM C++ API
-------------------------------------------------------------------------------
Many enhancements to the ICM C++ interface including:
-     icmBusObject::mapExternalMemory()
-     icmBusObject::mapNativeMemory()
-     icmBusObject::loadMemory()
-     icmBusObject::bridge() & unbridge()
-     icmProcessorObject::loadNativeMemory()
-     icmProcessorObject::setPC()
-     icmProcessorObject::findNetPort() etc.
-     icmPseObject::connect()     direct connection to user code.
-     icmPseObject::findNetPort()
-     icmPseObject::access()
-     icmPlatformObject::simulationStarting()

CACHE MODELS
-------------------------------------------------------------------------------
A number of cache models implemented using the Memory Mapped Component (MMC)
API have been added to the library. These offer a range of configurations that
can be added to provide different behaviors.


###############################################################################
##                                                                           ##
## Date 2008-10-22                                                           ##
##                                                                           ##
###############################################################################

AUTOMATIC WEB UPDATE CHECK
-------------------------------------------------------------------------------
This release includes a new feature which will access the OVP website to see if
a newer version of the OVP simulator is available. If you wish to disable this
feature, please simply uncheck the item :-
	"updatecheck"
in the Installer "Choose Components" screen.
Alternately, after installation you can simply delete the executable from the
installation Directory, the executable to remove is called :-
	"imperasOVP_versionCheck.exe"

EXAMPLES
-------------------------------------------------------------------------------
The examples found in Examples/Platforms have been updated to make use of the
generic Makefiles provided with the installation.

A new example Examples/Platforms/peripheral shows the instantiation of a
peripheral model into an ICM platform. This also shows the use of ICM functions
to allow a custom scheduling algorithm using icmSimulate() and icmAdvanceTime().

MIPS32 MODEL
-------------------------------------------------------------------------------
- MIPS16e instructions implemented and validated;
- 24KEc/24KEf variants added.

ICM INTERFACE (icmCpuManager.h)
-------------------------------------------------------------------------------
- ICM_ATTR_TRACE_REGS deprecated. Use either or both of:
    ICM_ATTR_TRACE_REGS_BEFORE to dump register values before each instruction;
    ICM_ATTR_TRACE_REGS_AFTER to dump register values after each instruction;

New features:
- Simulator control attributes :
    ICM_DISASSEMBLE_LABELS         during disassembly, look up addresses in symbol tables
    ICM_PRINT_USER_ATTRIBUTES      before simulation, print list of user attributes

- MMC instance interface:
    type icmMmcP
    icmNewMMC()                 create an MMC instance
    icmConnectMMCBus()          MMC connection
    icmConnectTransparentMMC()
    icmChainTransparentMMC()
    icmFreeMMC()

- Access to loaded object (image) files:

    type icmImagefileP:
    icmLoadProcessorMemory()   Now returns an icmImagefile object.
    icmLoadBus()               Loads an ELF binary file onto a bus.
    icmEndian                  Endian-ness enumeration
    icmGetImagefileEndian()    Return the endian-ness of a loaded object
    icmGetImagefileElfcode()   Return the ELF processor type code of a loaded object
    icmGetImagefileEntry()     Find the entry point of a loaded object
    icmGetProcessorImagefile() Return a processor's associated image file

- Access to what processor registers are used for:
    icmRegUsage                Processor register usage enumeration
    icmGetRegInfoUsage         Return the register usage

- Access to all user-defined model attributes:
    icmIterAllUserAttributes()

- Force a processor to start at a different address:
    icmSetPC()

-- Control how OVP prints processor names:
    icmInstallObjectNameFn()

- Access to VMI Symmetric Multiprocessor (SMP) features
   icmGetSMPParent()
   icmGetSMPChild()
   icmGetSMPPrevSibling()
   icmGetSMPNextSibling()
   icmGetSMPIndex()
   icmIterAllChildren()

Deprecated icmStopReasons:
    ICM_SR_WATCHPOINT          Watchpoint encountered
    ICM_SR_BP_ICOUNT           Instruction count breakpoint encountered
    ICM_SR_BP_ADDRESS          Address breakpoint encountered

Control of seed for randomizing processor execution order:
    icmSetSimulationRandomSeed()

- Associated a handle with a processor instance
    icmNewProcessorWithHandle()
    icmGetProcessorHandle()

ICM++ INTERFACE (icmCpuManager.hpp)
-------------------------------------------------------------------------------
- Introduced icmPlatform class with simulation control methods:

    setSimulationTimePrecision();
    setSimulationTimeSlice();
    setSimulationStopTime();
    setSimulationRandomSeed();
    setDebugMode();
    simulate();

- icmAttrListObject:: methods renamed
        addUns64Attr    to     addAttr
        addStringAttr   to     addAttr
        addDoubleAttr   to     addAttr

- Introduced icmMmcObject:: class with construction and connection methods:
        icmMmcObject();
        ~icmMmcObject();
        connect();
        chainTransparent();

- Renamed methods:

    icmMemoryObject::
        connectBus()     to    connect()

    icmProcessorObject::
        connectBus()     to    connect()
        connectNet()     to    connect()

    icmPseObject::
        connectBus()     to    connect()
        connectNet()     to    connect()

- Added methods to icmProcessorObject::
    setGdbPath))
    regUsage()
    regBits()

    getSMPParent();
    getSMPChild();
    getSMPPrevSibling();
    getSMPNextSibling();
    getSMPIndex();

- Added methods to icmPseObject::
    addInterceptObject()

##
## Started 2008-07-07
##

