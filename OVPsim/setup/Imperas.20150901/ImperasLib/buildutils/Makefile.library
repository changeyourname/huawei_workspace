IMPERAS_HOME := $(shell getpath.exe "$(IMPERAS_HOME)")
include $(IMPERAS_HOME)/bin/Makefile.include

ifndef IMPERAS_HOME
  IMPERAS_ERROR := $(error "IMPERAS_HOME not defined")
endif

include $(IMPERAS_HOME)/ImperasLib/buildutils/Makefile.common

#
# VLNVROOT & VLNVSRC MUST be absolute paths
#
ifndef VLNVROOT
    VLNVROOT_ERROR := $(error "VLNVROOT not defined")
else
    VLNVROOT_INT := $(shell getpath.exe "$(VLNVROOT)")
    ifeq ($(VLNVROOT_INT),)
        VLNVROOT_ERROR := $(error "VLNVROOT_INT not determined")
    endif
endif

ifndef VLNVSRC
    VLNVSRC_ERROR := $(error "VLNVSRC not defined")
else
    VLNVSRC_INT  := $(shell getpath.exe "$(VLNVSRC)")
    ifeq ($(VLNVSRC_INT),)
        VLNVSRC_ERROR := $(error "VLNVSRC_INT not determined")
    endif
endif

DEP_SUFFIX = h c cpp S xml

MAKEIGEN?=$(IMPERAS_HOME)/ImperasLib/buildutils/Makefile.igen
MAKELIBRARY?=$(IMPERAS_HOME)/ImperasLib/buildutils/Makefile.library

#
# For each of pse, model & platform dirs, generate a list of
# src file directories *SRC
# vlnv lists *VLNV
# and object directories *OBJ
#
PSESRC  = $(foreach d, $(sort $(wildcard $(VLNVSRC_INT)/*/*/*/*/pse/Makefile)), $(subst /pse/Makefile,,$(d)))
PSEVLNV = $(foreach d, $(PSESRC), $(subst $(VLNVSRC_INT)/,,$(d)))
PSEOBJ  = $(foreach d, $(PSESRC), $(subst $(VLNVSRC_INT),$(VLNVROOT_INT),$(d))/pse.pse)

MODELSRC  = $(foreach d, $(sort $(wildcard $(VLNVSRC_INT)/*/*/*/*/model/Makefile)), $(subst /model/Makefile,,$(d)))
MODELVLNV = $(foreach d, $(MODELSRC), $(subst $(VLNVSRC_INT)/,,$(d)))
MODELOBJ  = $(foreach d, $(MODELSRC), $(subst $(VLNVSRC_INT),$(VLNVROOT_INT),$(d))/model.$(IMPERAS_SHRSUF))

PLATFORMSRC  = $(foreach d, $(sort $(wildcard $(VLNVSRC_INT)/*/*/*/*/platform/Makefile)), $(subst /platform/Makefile,,$(d)))
PLATFORMVLNV = $(foreach d, $(PLATFORMSRC), $(subst $(VLNVSRC_INT)/,,$(d)))
PLATFORMOBJ  = $(foreach d, $(PLATFORMSRC), $(subst $(VLNVSRC_INT),$(VLNVROOT_INT),$(d))/platform.$(IMPERAS_ARCH).exe)

CLEANSRC = $(foreach d, $(sort $(wildcard */*/*/*/*/Makefile)), $(subst /Makefile,,$(d)))

all:
	$(V) $(MAKE) -f $(MAKELIBRARY) derived
	$(V) $(MAKE) -f $(MAKELIBRARY) compile

compile: $(PSEOBJ) $(MODELOBJ) $(PLATFORMOBJ)

ifneq ($(wildcard $(MAKEIGEN)),)
derived:
	$(V) $(MAKE) -f $(MAKEIGEN) VLNVSRC=$(VLNVSRC_INT)
else
derived:
	@echo "Not Available: $(MAKEIGEN)"  
endif

define DEPENDPSE
$(VLNVROOT_INT)/$(1)/pse.pse: $(sort $(wildcard $(VLNVSRC_INT)/$(1)/pse/*.$(2)))
endef
$(VLNVROOT_INT)/%/pse.pse:
	$(V) mkdir -p $(@D)
	$(V) $(MAKE) VLNVROOT=$(VLNVROOT_INT) -C $(VLNVSRC_INT)/$*/pse

define DEPENDMODEL
$(VLNVROOT_INT)/$(1)/model.$(IMPERAS_SHRSUF): $(sort $(wildcard $(VLNVSRC_INT)/$(1)/model/*.$(2)))
endef
$(VLNVROOT_INT)/%/model.$(IMPERAS_SHRSUF):
	$(V) mkdir -p $(@D)
	$(V) $(MAKE) VLNVROOT=$(VLNVROOT_INT) -C $(VLNVSRC_INT)/$*/model

define DEPENDPLATFORM
$(VLNVROOT_INT)/$(1)/platform.$(IMPERAS_ARCH).exe: $(sort $(wildcard $(VLNVSRC_INT)/$(1)/platform/*.$(2)))
endef
$(VLNVROOT_INT)/%/platform.$(IMPERAS_ARCH).exe: $(VLNVSRC_INT)/%/platform
	$(V) mkdir -p $(@D)
	$(V) $(MAKE) VLNVROOT=$(VLNVROOT_INT) -C $(VLNVSRC_INT)/$*/platform

$(foreach s, $(DEP_SUFFIX), $(foreach v, $(PSEVLNV),      $(eval $(call DEPENDPSE,$(v),$(s)))))
$(foreach s, $(DEP_SUFFIX), $(foreach v, $(MODELVLNV),    $(eval $(call DEPENDMODEL,$(v),$(s)))))
$(foreach s, $(DEP_SUFFIX), $(foreach v, $(PLATFORMVLNV), $(eval $(call DEPENDPLATFORM,$(v),$(s)))))

clean::
ifneq ($(wildcard $(MAKEIGEN)),)
	$(V) $(MAKE) -f $(MAKEIGEN) IGENFLAGS=$(IGENFLAGS) clean
endif

define clean_Template
clean::
ifeq ($(wildcard $(1)),)
	@echo "$(1) not found, please invoke clean target in source directory, for example add -C <VLNVSRC>"
else
	$(V) $(MAKE) -C $(1) VLNVROOT=$(VLNVROOT_INT) clean
endif
endef
$(foreach M,$(CLEANSRC),$(eval $(call clean_Template,$(M))))

force::
